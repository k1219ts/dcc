import sys
import os
import time
import nuke, nukescripts
import threading
import subprocess

class FfmpegThread(threading.Thread):
    def __init__(self, command):
        threading.Thread.__init__(self)
        self.command = command.split(' ')

    def run(self):
        print "starting command: ", self.command
        subprocess.Popen(self.command).wait()

#renderScriptRoot = '/dexter/Cache_DATA/comp/render_script'
renderScriptRoot = '/netapp/dexter/render_script'
#------------------------------------------------------------------------------ 
platePath = sys.argv[1]
startFrame = sys.argv[2]
endFrame = sys.argv[3]
shotName = sys.argv[4]
username = sys.argv[5]
if sys.argv[6] == 'True':
    is1011 = True
else:
    is1011 = False
    
project = sys.argv[7]
scriptname = sys.argv[8]
try:

    fps = sys.argv[9].replace('fps','')
except:
    fps = '24'
print sys.argv
#------------------------------------------------------------------------------ 
plateDir = os.path.dirname(platePath)
plateFile = os.path.basename(platePath)

filenameList = nuke.getFileNameList(plateDir)
writeList = []
#------------------------------------------------------------------------------
nuke.root()['first_frame'].setValue(int(startFrame))
nuke.root()['last_frame'].setValue(int(endFrame))
#------------------------------------------------------------------------------
# CREATE NODES
readNode = nuke.nodes.Read(file=platePath, first=startFrame, last=endFrame)
if is1011:
    stampNode = nuke.createNode('stamp_log')
else:    
    stampNode = nuke.createNode('stamp_log_ani')
stampNode.setInput(0, readNode)
stampNode['Artist_name'].setValue(username)
stampNode['Shotname'].setValue(shotName)
stampNode.node('P_INPUT1')['message'].setValue('')
stampNode['Project_name'].setValue(project)

if scriptname:
    stampNode['scriptname'].setValue(scriptname)
    

writeNode = nuke.nodes.Write(file = plateDir+'_STAMP/'+plateFile,
                             file_type='jpeg')

writeNode['_jpeg_quality'].setValue(1)
writeNode['_jpeg_sub_sampling'].setValue('4:2:2')
    
writeNode.setInput(0, stampNode)
writeList.append(writeNode)

nukescripts.clear_selection_recursive()

#------------------------------------------------------------------------------ 
timestamp = time.strftime("%y%m%d.%H%M%S")
renderScriptPath = '%s/ANI_STAMP/%s_%s.nk' % (renderScriptRoot, shotName, timestamp)

if not(os.path.exists(os.path.dirname(renderScriptPath))):
    os.makedirs(os.path.dirname(renderScriptPath))
nuke.scriptSaveAs(renderScriptPath, overwrite=1)
#------------------------------------------------------------------------------ 
for w in writeList:
    writePath = w['file'].value()    
    if not(os.path.exists(os.path.dirname(writePath))):
        os.makedirs(os.path.dirname(writePath))
    nuke.execute(w.name(), w.frameRange().first(), w.frameRange().last())
    movOutPath = os.path.dirname(writePath) + '.mov'
    ffCmd = '/opt/ffmpeg/bin/ffmpeg -r %s -start_number %s -i %s ' % (fps, str(w.frameRange().first()), writePath)
    ffCmd += '-r %s -an -vcodec libx264 -pix_fmt yuv420p -preset slow ' % fps
    ffCmd += '-profile:v baseline -b 30000k -tune zerolatency -y %s' % (movOutPath)
    
    threadObject = FfmpegThread(ffCmd)
    threadObject.start()
    
