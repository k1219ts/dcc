# Dexter Naming Rule Example
# Legends:
#    {} = environment variable key
#    () = flag key
#    <> = product key

# '.*'     # MATCH ANY CHARACTER
# [a-z]    # MATCH ANY SINGLE LOWER CASE 
# [a-z]+   # MATCH ANY UNLIMITED TIMES LOWER CASE
#
# '^ABC'   # MATCH STRING STARTSWITH 'ABC'
# 'ABC$'   # MATCH STRING ENDSWITH 'ABC'
#
# [A-Z]{3} # MATCH 3 CAPITAL ALPHABET
# [0-9]{4} # MATCH 4 DECIMAL


# global:
__flag__:
    USERNAME : 
        __default__: '{USER}'
        __pattern__: '[a-zA-Z0-9.]+'
        
    VER : 
        __default__: 'v01'      
        __pattern__: 'v[0-9]+'
        
    DESC : 
        __default__: 'desc'
        __pattern__: '[a-zA-Z0-9_]+'
    
    FRAME : 
        __default__: '%04d'
        __pattern__: '\%04d|[0-9]{4}|\#+'
#------------------------------------------------------------------------------     
    PROJECT : 
        __default__: 'PROJECT_NAME'
        __pattern__: '[a-zA-Z0-9]+'

    SEQUENCE : 
        __default__: 'SEQUENCE_NAME'
        __pattern__: '[A-Z]+' # MUST BE CAPITAL

    SHOT : 
        __default__: 'SEQUENCE_NUMBER'
        __pattern__: '[A-Z]+_[0-9]+'

    TEAM : 
        __default__: 'rnd'
        __pattern__: '[a-zA-Z0-9]+'

    TASK : 
        __default__: 'rnd'
        __pattern__: '[a-zA-Z0-9]+'
        
    ANY :
        __default__: ''
        __pattern__: '.*'

    PUBDEV :
        __default__: 'pub'
        __pattern__: 'dev|pub'
                            

__product__: 
    shot_path: '/show/(PROJECT)/shot/(SEQUENCE)/(SHOT)'
    pub_path: '<shot_path>/(TASK)/pub/data'
    home_path: '/home/(USERNAME)'
    path: '<home_path>/temp'

__child__: 
    camera:        
        __flag__:
            WORK_VER : 
                __default__: 'w01'
                __pattern__: 'w[0-9]+'


        __product__:
            root: '<pub_path>/cam'

                
        __child__:
            ani_camera:
                __product__:
                    root: '<shot_path>/(TASK)/(PUBDEV)/data/cam'
                    path: '<root>/(SHOT)_(TASK)_(VER)'
                    camera_path: '<root>/(SHOT)_(TASK)_camera.abc'
                    camera_imageplane: '<root>/(SHOT)_(TASK)_camera.imageplane'
                    imageplane_path: '<root>/(SHOT)_(TASK)_imageplane.abc'
                    camera_dxc_path: '<root>/(SHOT)_(TASK)_camera.dxc'
                                  
    geoCache:
        __flag__:
            NAMESPACE :
                __default__: 'namespace'

            ASSET : 
                __default__: 'assetname'
                
        __product__:
            root: '<shot_path>/(TASK)/pub/data/geoCache'
            path: '<root>/(SHOT)_(TASK)_(VER)'
            render_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP.abc'
            mid_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP_mid.abc'
            low_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP_low.abc'
            sim_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP_sim.abc'
            bbox_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP.bbox'
            world_path: '<root>/(SHOT)_(TASK)_(VER)/(NAMESPACE):(ASSET)_rig_GRP.wrd'
            json_path: '<shot_path>/(TASK)/pub/data/(SHOT)_(TASK)_(VER).json'
            
    layout:
        __flag__:
            ASSET : 
                __default__: 'assetname'
                
        __product__:
            root: '<shot_path>/(TASK)/pub/data/layout'
            path: '<root>/(SHOT)_(TASK)_(VER)'
            
    hair:
        __flag__:
            NAMESPACE : 
                __default__: 'namespace'

            ASSET : 
                __default__: 'assetname'
            
        __product__:
            root: '<shot_path>/hair/pub/data/zenn'
            path: '<root>/(SHOT)_(TASK)_hair_(VER)'

    zenn:
        __flag__:
            NAMESPACE : 
                __default__: 'namespace'

            ASSET : 
                __default__: 'assetname'
            
        __product__:
            root: '<shot_path>/(TASK)/pub/data/zenn'
            path: '<root>/(SHOT)_(TASK)_zenn_(VER)'



                                                                      
