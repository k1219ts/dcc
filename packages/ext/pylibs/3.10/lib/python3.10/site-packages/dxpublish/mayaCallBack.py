#encoding=utf-8
#!/usr/bin/env python

#-------------------------------------------------------------------------------
#
#   Dexter CG Supervisor
#
#		sanghun.kim		rman.td@gmail.com
#
#	MongoDB common procedural
#
#	2017.02.15	$1
#-------------------------------------------------------------------------------

import sys, os
import string
import getpass
import time
import datetime
import dateutil.parser



from pymongo import MongoClient
import pymongo

try:
	_CONNECT = MongoClient( '10.0.0.12:27017, 10.0.0.13:27017',
							serverSelectionTimeoutMS=5 )
	_CONNECT.server_info()
except pymongo.errors.ServerSelectionTimeoutError as err:
	_CONNECT = None




class InsertFile:
	def __init__( self, fileName ):
		self.SHOW  = None
		self.TYPE  = None
		self.TASK  = None
		self.ASSET = None
		self.SHOT  = None
		self.STATE = None
		self.DATA  = None

		self.fileName = fileName

		self.doIt()


	def doIt( self ):
		if not _CONNECT:
			return

		src = self.fileName.split('/')
		self.SHOW  = src[ src.index('show')+1 ]
		self.TYPE  = src[ src.index('show')+2 ]
		self.TASK  = src[ src.index(self.TYPE)+3 ]
		self.STATE = src[ src.index(self.TASK)+1 ]
		exec( 'self.%s = src[src.index("%s")+2]' % (self.TYPE.upper(), self.TYPE) )

		if self.STATE != 'pub' and self.STATE != 'dev':
			return

		dt_time 	 = dateutil.parser.parse( time.ctime() )
		self.isotime = dt_time.isoformat()

		if self.TYPE == 'asset':
			self.assetUpdate()
		if self.TYPE == 'shot':
			self.shotUpdate()


	#----------------------------------------------------------------------
	def fileTaskName( self, baseName ):
		task = self.TASK
		#	for lighting
		if task == 'lighting':
			if baseName.find( '_lookdev_' ) > -1:
				task = 'lookdev'
			if baseName.find( '_ldv_' ) > -1:
				task = 'ldv'
			if baseName.find( '_lti_' ) > -1:
				task = 'lti'
		#	for texture
		if task == 'texture':
			if baseName.find( '_lookdev_' ) > -1:
				task = 'lookdev'
			if baseName.find( '_tex_' ) > -1:
				task = 'tex'
		return task



	#----------------------------------------------------------------------
	def assetUpdate( self ):
		src = self.fileName.split('/')

		if not 'char' in src and not 'env' in src and not 'prop' in src:
			return

		assetPath = '/' + string.join( src[src.index('show'):src.index(self.ASSET)+1], '/' )
		self.PATH = assetPath
		baseName  = os.path.basename( self.fileName )
		__task    = self.fileTaskName( baseName )
		if baseName.find( __task ) == -1:
			return

		# real asset name
		#assetName = baseName.split('_%s' % __task)[0]
		self.VERSION = os.path.splitext( baseName )[0]

		# update
		self.DATA = { 'file': self.fileName,
					  'time': self.isotime,
					  'artist': getpass.getuser() }


	def shotUpdate( self ):
		baseName = os.path.basename( self.fileName )
		__task   = self.fileTaskName( baseName )
		if baseName.find( __task ) == -1:
			return

		self.VERSION = os.path.splitext( baseName )[0]

		# update
		self.DATA = { 'file': self.fileName,
					  'time': self.isotime,
					  'artist': getpass.getuser() }


	#----------------------------------------------------------------------
	# UPDATE MAIN
	def doUpdate( self ):
		if not self.DATA or not _CONNECT:
			return
		# ASSET
		if self.ASSET:
			db = _CONNECT.ASSET[ self.SHOW ]
			db.update(
				{'show':self.SHOW, 'name':self.ASSET, 'path':self.PATH},
				{'$set': {'%s.%s.%s' % (self.TASK, self.STATE, self.VERSION): self.DATA}},
				upsert=True )
			sys.stdout.write( '# Result : MongoDB ASSET.%s.%s insert successed!\n' % (self.ASSET, self.TASK) )

		# SHOT
		if self.SHOT:
			db = _CONNECT.SHOT[ self.SHOW ]
			db.update(
				{'show': self.SHOW, 'shot': self.SHOT},
				{'$set': {'work.%s.%s.%s' % (self.TASK, self.STATE, self.VERSION): self.DATA}},
				upsert=True )
			sys.stdout.write( '# Result : MongoDB SHOT.%s.work.%s insert successed!\n' % (self.SHOT, self.TASK) )
