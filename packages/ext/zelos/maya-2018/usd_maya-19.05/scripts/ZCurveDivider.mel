//-------------------//
// ZCurveDivider.mel //
//-------------------------------------------------------//
// author: Wanho Choi @ Dexter Studios                   //
//         Nayoung Kim @ Dexter Studios                  //
// last update: 2017.03.23                               //
//-------------------------------------------------------//

global proc CreateZCurveDivider()
{
    if( !`pluginInfo -q -loaded "ZRigForMaya"` )
	{
		ZPrintError "ZENVForMaya is not loaded.";
		return;
	}

	string $curveShapes[];
	{
		string $xforms[] = `ls -sl`;

		for( $xform in $xforms )
		{
			string $shapes[] = `listRelatives -f -c -ad -ni -type nurbsCurve $xform`;

			for( $shape in $shapes )
			{
				$curveShapes[size($curveShapes)] = $shape;
			}
		}
	}

	if( size($curveShapes) == 0 )
	{
		ZPrintError "No selected NURBS curves.";
		return;
	}

	string $ZCurveDivider = `createNode ZCurveDivider`;

	int $idx = 0;

	for( $curveShape in $curveShapes )
	{
		if( `attributeExists segmentLength $curveShape` == 0 )
		{
			addAttr -nn "Rest Curve Length" -sn segLen -ln segmentLength -at double -dv 1.0 -min 0.001 -smx 10.0 -k 1 $curveShape;
		}

		if( `attributeExists segmentCount $curveShape` == 0 )
		{
			addAttr -nn "Maximum Segments" -sn nSegs -ln segmentCount -at long -dv 10 -min 1 -smx 999 -k 1 $curveShape;
		}

		connectAttr ($curveShape+".worldSpace")    ($ZCurveDivider+".inCurves["+$idx+"]");
		connectAttr ($curveShape+".segmentLength") ($ZCurveDivider+".segmentLengths["+$idx+"]");
		connectAttr ($curveShape+".segmentCount")  ($ZCurveDivider+".segmentCounts["+$idx+"]");

		$idx++;
	}

	// Create a locator to update this ZCurveDivider node.
	// ZCurveDivider node cannot be updated if it doens't have the output connection.
	// Position: The first point of the first curve
	string $locator[] = `spaceLocator`;
	connectAttr ($ZCurveDivider+".outPoints[0]") ($locator[0]+".translate");
	connectAttr ($ZCurveDivider+".outAngles[0]") ($locator[0]+".rotate");
	connectAttr ($ZCurveDivider+".outVisibilities[0]") ($locator[0]+".visibility");

	setAttr ($ZCurveDivider+".update") 1;
}

global proc SetZCurveDividerOutputs( string $ZCurveDivider )
{
    if( !`pluginInfo -q -loaded "ZRigForMaya"` )
	{
		ZPrintError "ZENVForMaya is not loaded.";
		return;
	}

	if( `nodeType $ZCurveDivider` != "ZCurveDivider" )
	{
		ZPrintError ($ZCurveDivider+" is not a ZCurveDivider type.");
		return;
	}

	int $totalNumPoints = `getAttr ($ZCurveDivider+".totalNumPoints")`;

	// Delete all the existing locators.
	string $locs[] = `listConnections ($ZCurveDivider+".outPoints")`;

	for( $loc in $locs )
	{
		string $nodeAttr = `connectionInfo -sfd ($loc+".translate")`;

		// $tokens[0]: connected ZCurveDivider.points[i] => i index!
		string $tokens[];
		tokenize $nodeAttr "[" $tokens;
		tokenize $tokens[1] "]" $tokens;

		int $idx = $tokens[0];

		disconnectAttr ($ZCurveDivider+".outPoints["+$idx+"]") ($loc+".translate");
		disconnectAttr ($ZCurveDivider+".outAngles["+$idx+"]") ($loc+".rotate");
		disconnectAttr ($ZCurveDivider+".outVisibilities["+$idx+"]") ($loc+".visibility");
		select -r $loc;
		delete $loc;
	}

	// Create new locators on updated positions.
 	int $i=0;
	for( $i=0; $i<$totalNumPoints; $i++ )
	{
		// transform
		string $xform = `createNode transform`;

		// locator for debug
//		string $locator[] = `spaceLocator`;
//		string $xform = $locator[0];
//
//		setAttr ($xform+".sx") 0.2;
//		setAttr ($xform+".sy") 0.2;
//		setAttr ($xform+".sz") 0.2;

		connectAttr ($ZCurveDivider+".outPoints["+$i+"]") ($xform+".translate");
		connectAttr ($ZCurveDivider+".outAngles["+$i+"]") ($xform+".rotate");
		connectAttr ($ZCurveDivider+".outVisibilities["+$i+"]") ($xform+".visibility");
	}
}

global proc ConnectZCurveDividerInputRot()
{
    if( !`pluginInfo -q -loaded "ZRigForMaya"` )
	{
		ZPrintError "ZENVForMaya is not loaded.";
		return;
	}

	string $selected[] = `ls -sl`;

	if( size( $selected ) != 2 )
	{
		ZPrintError( "Select a transform node first and the ZCurveDivider node second." );
		return;
	}

	if( nodeType( $selected[0] ) != "transform" )
	{
		ZPrintError( "Select a transform node first and the ZCurveDivider node second." );
		return;
	}

	if( nodeType( $selected[1] ) != "ZCurveDivider" )
	{
		ZPrintError( "Select a transform node first and the ZCurveDivider node second." );
		return;
	}

	string $xform = $selected[0];
	string $ZCurveDivider = $selected[1];

	connectAttr ($xform+".rotate") ($ZCurveDivider+".inputRot");
}

