# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ZelosForMaya')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ZelosForMaya')
    _ZelosForMaya = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ZelosForMaya', [dirname(__file__)])
        except ImportError:
            import _ZelosForMaya
            return _ZelosForMaya
        try:
            _mod = imp.load_module('_ZelosForMaya', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ZelosForMaya = swig_import_helper()
    del swig_import_helper
else:
    import _ZelosForMaya
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def getMesh(mesh, meshShapeNodeName, vPosOnly=False, uvSetName=None):
    return _ZelosForMaya.getMesh(mesh, meshShapeNodeName, vPosOnly, uvSetName)
getMesh = _ZelosForMaya.getMesh
class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fromTextFile(self, filePathName):
        return _ZelosForMaya.string_fromTextFile(self, filePathName)

    def __eq__(self, *args):
        return _ZelosForMaya.string___eq__(self, *args)

    def __ne__(self, *args):
        return _ZelosForMaya.string___ne__(self, *args)

    def length(self):
        return _ZelosForMaya.string_length(self)

    def subString(self, start, end):
        return _ZelosForMaya.string_subString(self, start, end)

    def isDigit(self):
        return _ZelosForMaya.string_isDigit(self)

    def isAlpha(self):
        return _ZelosForMaya.string_isAlpha(self)

    def isAlnum(self):
        return _ZelosForMaya.string_isAlnum(self)

    def isLower(self):
        return _ZelosForMaya.string_isLower(self)

    def isUpper(self):
        return _ZelosForMaya.string_isUpper(self)

    def lowerize(self):
        return _ZelosForMaya.string_lowerize(self)

    def upperize(self):
        return _ZelosForMaya.string_upperize(self)

    def toLower(self):
        return _ZelosForMaya.string_toLower(self)

    def toUpper(self):
        return _ZelosForMaya.string_toUpper(self)

    def capitalize(self):
        return _ZelosForMaya.string_capitalize(self)

    def swapCase(self):
        return _ZelosForMaya.string_swapCase(self)

    def asChar(self):
        return _ZelosForMaya.string_asChar(self)

    def at0(self):
        return _ZelosForMaya.string_at0(self)

    def asInt(self):
        return _ZelosForMaya.string_asInt(self)

    def asFloat(self):
        return _ZelosForMaya.string_asFloat(self)

    def asDouble(self):
        return _ZelosForMaya.string_asDouble(self)

    def replace(self, *args):
        return _ZelosForMaya.string_replace(self, *args)

    def reverse(self):
        return _ZelosForMaya.string_reverse(self)
    if _newclass:
        commify = staticmethod(_ZelosForMaya.string_commify)
    else:
        commify = _ZelosForMaya.string_commify

    def split(self, delimiter, tokens):
        return _ZelosForMaya.string_split(self, delimiter, tokens)

    def removeSpace(self):
        return _ZelosForMaya.string_removeSpace(self)

    def __repr__(self):
        return _ZelosForMaya.string___repr__(self)

    def __str__(self):
        return _ZelosForMaya.string___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.string___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.string___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_string
    __del__ = lambda self: None
string_swigregister = _ZelosForMaya.string_swigregister
string_swigregister(string)

def string_commify(number):
    return _ZelosForMaya.string_commify(number)
string_commify = _ZelosForMaya.string_commify


def min(*args):
    return _ZelosForMaya.min(*args)
min = _ZelosForMaya.min

def max(*args):
    return _ZelosForMaya.max(*args)
max = _ZelosForMaya.max

def absMax(*args):
    return _ZelosForMaya.absMax(*args)
absMax = _ZelosForMaya.absMax

def pow2(arg1):
    return _ZelosForMaya.pow2(arg1)
pow2 = _ZelosForMaya.pow2

def pow3(arg1):
    return _ZelosForMaya.pow3(arg1)
pow3 = _ZelosForMaya.pow3

def pow4(arg1):
    return _ZelosForMaya.pow4(arg1)
pow4 = _ZelosForMaya.pow4

def pow5(arg1):
    return _ZelosForMaya.pow5(arg1)
pow5 = _ZelosForMaya.pow5

def pow6(arg1):
    return _ZelosForMaya.pow6(arg1)
pow6 = _ZelosForMaya.pow6
class dataUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataUnit, name)
    zNone = _ZelosForMaya.dataUnit_zNone
    zBytes = _ZelosForMaya.dataUnit_zBytes
    zKilobytes = _ZelosForMaya.dataUnit_zKilobytes
    zMegabytes = _ZelosForMaya.dataUnit_zMegabytes
    zGigabytes = _ZelosForMaya.dataUnit_zGigabytes

    def __repr__(self):
        return _ZelosForMaya.dataUnit___repr__(self)

    def __str__(self):
        return _ZelosForMaya.dataUnit___str__(self)

    def __init__(self):
        this = _ZelosForMaya.new_dataUnit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ZelosForMaya.delete_dataUnit
    __del__ = lambda self: None
dataUnit_swigregister = _ZelosForMaya.dataUnit_swigregister
dataUnit_swigregister(dataUnit)

class dataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataType, name)
    zNone = _ZelosForMaya.dataType_zNone
    zChar = _ZelosForMaya.dataType_zChar
    zInt = _ZelosForMaya.dataType_zInt
    zInt2 = _ZelosForMaya.dataType_zInt2
    zInt3 = _ZelosForMaya.dataType_zInt3
    zInt4 = _ZelosForMaya.dataType_zInt4
    zInt8 = _ZelosForMaya.dataType_zInt8
    zInt16 = _ZelosForMaya.dataType_zInt16
    zFloat = _ZelosForMaya.dataType_zFloat
    zFloat2 = _ZelosForMaya.dataType_zFloat2
    zFloat3 = _ZelosForMaya.dataType_zFloat3
    zFloat4 = _ZelosForMaya.dataType_zFloat4
    zFloat8 = _ZelosForMaya.dataType_zFloat8
    zFloat16 = _ZelosForMaya.dataType_zFloat16
    zDouble = _ZelosForMaya.dataType_zDouble
    zDouble2 = _ZelosForMaya.dataType_zDouble2
    zDouble3 = _ZelosForMaya.dataType_zDouble3
    zDouble4 = _ZelosForMaya.dataType_zDouble4
    zDouble8 = _ZelosForMaya.dataType_zDouble8
    zDouble16 = _ZelosForMaya.dataType_zDouble16
    zPoint = _ZelosForMaya.dataType_zPoint
    zVector = _ZelosForMaya.dataType_zVector
    zQuaternion = _ZelosForMaya.dataType_zQuaternion
    zMatrix = _ZelosForMaya.dataType_zMatrix
    zColor = _ZelosForMaya.dataType_zColor

    def __repr__(self):
        return _ZelosForMaya.dataType___repr__(self)

    def __str__(self):
        return _ZelosForMaya.dataType___str__(self)

    def __init__(self):
        this = _ZelosForMaya.new_dataType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ZelosForMaya.delete_dataType
    __del__ = lambda self: None
dataType_swigregister = _ZelosForMaya.dataType_swigregister
dataType_swigregister(dataType)

class rotationOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rotationOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rotationOrder, name)
    __repr__ = _swig_repr
    zXYZ = _ZelosForMaya.rotationOrder_zXYZ
    zYZX = _ZelosForMaya.rotationOrder_zYZX
    zZXY = _ZelosForMaya.rotationOrder_zZXY
    zXZY = _ZelosForMaya.rotationOrder_zXZY
    zYXZ = _ZelosForMaya.rotationOrder_zYXZ
    zZYX = _ZelosForMaya.rotationOrder_zZYX

    def __init__(self):
        this = _ZelosForMaya.new_rotationOrder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ZelosForMaya.delete_rotationOrder
    __del__ = lambda self: None
rotationOrder_swigregister = _ZelosForMaya.rotationOrder_swigregister
rotationOrder_swigregister(rotationOrder)

class imageFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imageFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imageFormat, name)
    __repr__ = _swig_repr
    zNone = _ZelosForMaya.imageFormat_zNone
    zInt8 = _ZelosForMaya.imageFormat_zInt8
    zUInt8 = _ZelosForMaya.imageFormat_zUInt8
    zInt16 = _ZelosForMaya.imageFormat_zInt16
    zUInt16 = _ZelosForMaya.imageFormat_zUInt16
    zInt32 = _ZelosForMaya.imageFormat_zInt32
    zUInt32 = _ZelosForMaya.imageFormat_zUInt32
    zInt64 = _ZelosForMaya.imageFormat_zInt64
    zUInt64 = _ZelosForMaya.imageFormat_zUInt64
    zHalf = _ZelosForMaya.imageFormat_zHalf
    zFloat = _ZelosForMaya.imageFormat_zFloat
    zDouble = _ZelosForMaya.imageFormat_zDouble

    def __init__(self):
        this = _ZelosForMaya.new_imageFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ZelosForMaya.delete_imageFormat
    __del__ = lambda self: None
imageFormat_swigregister = _ZelosForMaya.imageFormat_swigregister
imageFormat_swigregister(imageFormat)

NONE = _ZelosForMaya.NONE
ALL = _ZelosForMaya.ALL
FALSE = _ZelosForMaya.FALSE
TRUE = _ZelosForMaya.TRUE
EPS = _ZelosForMaya.EPS
LARGE = _ZelosForMaya.LARGE
Z_PI = _ZelosForMaya.Z_PI
Z_PI_INV = _ZelosForMaya.Z_PI_INV
Z_PIx2 = _ZelosForMaya.Z_PIx2
Z_PIx3 = _ZelosForMaya.Z_PIx3
Z_PI_2 = _ZelosForMaya.Z_PI_2
Z_PI_3 = _ZelosForMaya.Z_PI_3
Z_PI_4 = _ZelosForMaya.Z_PI_4
Z_PI_6 = _ZelosForMaya.Z_PI_6
Z_E = _ZelosForMaya.Z_E
Z_Eplus1 = _ZelosForMaya.Z_Eplus1
Z_Eminus1 = _ZelosForMaya.Z_Eminus1
Z_Ex2 = _ZelosForMaya.Z_Ex2
Z_E3 = _ZelosForMaya.Z_E3
Z_E_2 = _ZelosForMaya.Z_E_2
Z_E_3 = _ZelosForMaya.Z_E_3
Z_E_INV = _ZelosForMaya.Z_E_INV
Z_E_SQ = _ZelosForMaya.Z_E_SQ
Z_SQRT2 = _ZelosForMaya.Z_SQRT2
Z_SQRT3 = _ZelosForMaya.Z_SQRT3
Z_RADtoDEG = _ZelosForMaya.Z_RADtoDEG
Z_DEGtoRAD = _ZelosForMaya.Z_DEGtoRAD
Z_One_Over_Three = _ZelosForMaya.Z_One_Over_Three
Z_One_Over_Five = _ZelosForMaya.Z_One_Over_Five
Z_One_Over_Six = _ZelosForMaya.Z_One_Over_Six
Z_One_Over_Seven = _ZelosForMaya.Z_One_Over_Seven
Z_One_Over_Nine = _ZelosForMaya.Z_One_Over_Nine

def isUpper(arg1):
    return _ZelosForMaya.isUpper(arg1)
isUpper = _ZelosForMaya.isUpper

def isLower(arg1):
    return _ZelosForMaya.isLower(arg1)
isLower = _ZelosForMaya.isLower

def isDigit(arg1):
    return _ZelosForMaya.isDigit(arg1)
isDigit = _ZelosForMaya.isDigit

def toUpper(arg1):
    return _ZelosForMaya.toUpper(arg1)
toUpper = _ZelosForMaya.toUpper

def toLower(arg1):
    return _ZelosForMaya.toLower(arg1)
toLower = _ZelosForMaya.toLower
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ZelosForMaya.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ZelosForMaya.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ZelosForMaya.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ZelosForMaya.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ZelosForMaya.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ZelosForMaya.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ZelosForMaya.SwigPyIterator_copy(self)

    def next(self):
        return _ZelosForMaya.SwigPyIterator_next(self)

    def __next__(self):
        return _ZelosForMaya.SwigPyIterator___next__(self)

    def previous(self):
        return _ZelosForMaya.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ZelosForMaya.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ZelosForMaya.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ZelosForMaya.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ZelosForMaya.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ZelosForMaya.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ZelosForMaya.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ZelosForMaya.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ZelosForMaya.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ZelosForMaya.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ZelosForMaya.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ZelosForMaya.DoubleVector___bool__(self)

    def __len__(self):
        return _ZelosForMaya.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ZelosForMaya.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ZelosForMaya.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ZelosForMaya.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ZelosForMaya.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ZelosForMaya.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ZelosForMaya.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ZelosForMaya.DoubleVector_pop(self)

    def append(self, x):
        return _ZelosForMaya.DoubleVector_append(self, x)

    def empty(self):
        return _ZelosForMaya.DoubleVector_empty(self)

    def size(self):
        return _ZelosForMaya.DoubleVector_size(self)

    def swap(self, v):
        return _ZelosForMaya.DoubleVector_swap(self, v)

    def begin(self):
        return _ZelosForMaya.DoubleVector_begin(self)

    def end(self):
        return _ZelosForMaya.DoubleVector_end(self)

    def rbegin(self):
        return _ZelosForMaya.DoubleVector_rbegin(self)

    def rend(self):
        return _ZelosForMaya.DoubleVector_rend(self)

    def clear(self):
        return _ZelosForMaya.DoubleVector_clear(self)

    def get_allocator(self):
        return _ZelosForMaya.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ZelosForMaya.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ZelosForMaya.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _ZelosForMaya.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ZelosForMaya.DoubleVector_push_back(self, x)

    def front(self):
        return _ZelosForMaya.DoubleVector_front(self)

    def back(self):
        return _ZelosForMaya.DoubleVector_back(self)

    def assign(self, n, x):
        return _ZelosForMaya.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ZelosForMaya.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ZelosForMaya.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ZelosForMaya.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ZelosForMaya.DoubleVector_capacity(self)
    __swig_destroy__ = _ZelosForMaya.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _ZelosForMaya.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ZelosForMaya.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ZelosForMaya.FloatVector___nonzero__(self)

    def __bool__(self):
        return _ZelosForMaya.FloatVector___bool__(self)

    def __len__(self):
        return _ZelosForMaya.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _ZelosForMaya.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ZelosForMaya.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ZelosForMaya.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ZelosForMaya.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ZelosForMaya.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ZelosForMaya.FloatVector___setitem__(self, *args)

    def pop(self):
        return _ZelosForMaya.FloatVector_pop(self)

    def append(self, x):
        return _ZelosForMaya.FloatVector_append(self, x)

    def empty(self):
        return _ZelosForMaya.FloatVector_empty(self)

    def size(self):
        return _ZelosForMaya.FloatVector_size(self)

    def swap(self, v):
        return _ZelosForMaya.FloatVector_swap(self, v)

    def begin(self):
        return _ZelosForMaya.FloatVector_begin(self)

    def end(self):
        return _ZelosForMaya.FloatVector_end(self)

    def rbegin(self):
        return _ZelosForMaya.FloatVector_rbegin(self)

    def rend(self):
        return _ZelosForMaya.FloatVector_rend(self)

    def clear(self):
        return _ZelosForMaya.FloatVector_clear(self)

    def get_allocator(self):
        return _ZelosForMaya.FloatVector_get_allocator(self)

    def pop_back(self):
        return _ZelosForMaya.FloatVector_pop_back(self)

    def erase(self, *args):
        return _ZelosForMaya.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _ZelosForMaya.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ZelosForMaya.FloatVector_push_back(self, x)

    def front(self):
        return _ZelosForMaya.FloatVector_front(self)

    def back(self):
        return _ZelosForMaya.FloatVector_back(self)

    def assign(self, n, x):
        return _ZelosForMaya.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _ZelosForMaya.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _ZelosForMaya.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _ZelosForMaya.FloatVector_reserve(self, n)

    def capacity(self):
        return _ZelosForMaya.FloatVector_capacity(self)
    __swig_destroy__ = _ZelosForMaya.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _ZelosForMaya.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class testClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, testClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, testClass, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_testClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def return_double_tuple(self):
        return _ZelosForMaya.testClass_return_double_tuple(self)

    def return_float_tuple(self):
        return _ZelosForMaya.testClass_return_float_tuple(self)

    def times2(self, a):
        return _ZelosForMaya.testClass_times2(self, a)

    def __repr__(self):
        return _ZelosForMaya.testClass___repr__(self)

    def __str__(self):
        return _ZelosForMaya.testClass___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_testClass
    __del__ = lambda self: None
testClass_swigregister = _ZelosForMaya.testClass_swigregister
testClass_swigregister(testClass)

class int2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int2, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.int2_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.int2_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.int2___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.int2___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.int2___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.int2___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.int2___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.int2___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.int2___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.int2___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.int2___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.int2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.int2___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.int2___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.int2___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.int2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.int2___neg__(self)

    def negate(self):
        return _ZelosForMaya.int2_negate(self)

    def negated(self):
        return _ZelosForMaya.int2_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.int2_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.int2_length(self)

    def squaredLength(self):
        return _ZelosForMaya.int2_squaredLength(self)

    def min(self):
        return _ZelosForMaya.int2_min(self)

    def max(self):
        return _ZelosForMaya.int2_max(self)

    def absMax(self):
        return _ZelosForMaya.int2_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.int2_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.int2_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.int2___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int2___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int2___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int2
    __del__ = lambda self: None
int2_swigregister = _ZelosForMaya.int2_swigregister
int2_swigregister(int2)

class int3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int3, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.int3_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.int3_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.int3___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.int3___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.int3___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.int3___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.int3___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.int3___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.int3___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.int3___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.int3___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.int3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.int3___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.int3___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.int3___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.int3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.int3___neg__(self)

    def negate(self):
        return _ZelosForMaya.int3_negate(self)

    def negated(self):
        return _ZelosForMaya.int3_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.int3_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.int3_length(self)

    def squaredLength(self):
        return _ZelosForMaya.int3_squaredLength(self)

    def min(self):
        return _ZelosForMaya.int3_min(self)

    def max(self):
        return _ZelosForMaya.int3_max(self)

    def absMax(self):
        return _ZelosForMaya.int3_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.int3_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.int3_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.int3___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int3___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int3___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int3
    __del__ = lambda self: None
int3_swigregister = _ZelosForMaya.int3_swigregister
int3_swigregister(int3)

class int4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int4, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.int4_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.int4_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.int4___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.int4___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.int4___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.int4___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.int4___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.int4___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.int4___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.int4___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.int4___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.int4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.int4___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.int4___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.int4___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.int4___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.int4___neg__(self)

    def negate(self):
        return _ZelosForMaya.int4_negate(self)

    def negated(self):
        return _ZelosForMaya.int4_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.int4_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.int4_length(self)

    def squaredLength(self):
        return _ZelosForMaya.int4_squaredLength(self)

    def min(self):
        return _ZelosForMaya.int4_min(self)

    def max(self):
        return _ZelosForMaya.int4_max(self)

    def absMax(self):
        return _ZelosForMaya.int4_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.int4_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.int4_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.int4___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int4___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int4___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int4
    __del__ = lambda self: None
int4_swigregister = _ZelosForMaya.int4_swigregister
int4_swigregister(int4)

class float2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float2, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.float2_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.float2_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.float2___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.float2___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.float2___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.float2___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.float2___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.float2___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.float2___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.float2___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.float2___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.float2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.float2___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.float2___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.float2___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.float2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.float2___neg__(self)

    def negate(self):
        return _ZelosForMaya.float2_negate(self)

    def negated(self):
        return _ZelosForMaya.float2_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.float2_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.float2_length(self)

    def squaredLength(self):
        return _ZelosForMaya.float2_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.float2_normalize(self)

    def normalized(self):
        return _ZelosForMaya.float2_normalized(self)

    def min(self):
        return _ZelosForMaya.float2_min(self)

    def max(self):
        return _ZelosForMaya.float2_max(self)

    def absMax(self):
        return _ZelosForMaya.float2_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.float2_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.float2_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.float2___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float2___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float2___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float2
    __del__ = lambda self: None
float2_swigregister = _ZelosForMaya.float2_swigregister
float2_swigregister(float2)

class float3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float3, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.float3_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.float3_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.float3___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.float3___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.float3___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.float3___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.float3___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.float3___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.float3___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.float3___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.float3___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.float3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.float3___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.float3___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.float3___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.float3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.float3___neg__(self)

    def negate(self):
        return _ZelosForMaya.float3_negate(self)

    def negated(self):
        return _ZelosForMaya.float3_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.float3_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.float3_length(self)

    def squaredLength(self):
        return _ZelosForMaya.float3_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.float3_normalize(self)

    def normalized(self):
        return _ZelosForMaya.float3_normalized(self)

    def min(self):
        return _ZelosForMaya.float3_min(self)

    def max(self):
        return _ZelosForMaya.float3_max(self)

    def absMax(self):
        return _ZelosForMaya.float3_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.float3_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.float3_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.float3___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float3___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float3___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float3
    __del__ = lambda self: None
float3_swigregister = _ZelosForMaya.float3_swigregister
float3_swigregister(float3)

class float4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float4, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.float4_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.float4_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.float4___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.float4___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.float4___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.float4___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.float4___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.float4___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.float4___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.float4___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.float4___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.float4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.float4___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.float4___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.float4___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.float4___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.float4___neg__(self)

    def negate(self):
        return _ZelosForMaya.float4_negate(self)

    def negated(self):
        return _ZelosForMaya.float4_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.float4_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.float4_length(self)

    def squaredLength(self):
        return _ZelosForMaya.float4_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.float4_normalize(self)

    def normalized(self):
        return _ZelosForMaya.float4_normalized(self)

    def min(self):
        return _ZelosForMaya.float4_min(self)

    def max(self):
        return _ZelosForMaya.float4_max(self)

    def absMax(self):
        return _ZelosForMaya.float4_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.float4_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.float4_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.float4___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float4___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float4___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float4
    __del__ = lambda self: None
float4_swigregister = _ZelosForMaya.float4_swigregister
float4_swigregister(float4)

class double2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double2, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.double2_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.double2_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.double2___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.double2___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.double2___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.double2___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.double2___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.double2___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.double2___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.double2___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.double2___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.double2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.double2___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.double2___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.double2___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.double2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.double2___neg__(self)

    def negate(self):
        return _ZelosForMaya.double2_negate(self)

    def negated(self):
        return _ZelosForMaya.double2_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.double2_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.double2_length(self)

    def squaredLength(self):
        return _ZelosForMaya.double2_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.double2_normalize(self)

    def normalized(self):
        return _ZelosForMaya.double2_normalized(self)

    def min(self):
        return _ZelosForMaya.double2_min(self)

    def max(self):
        return _ZelosForMaya.double2_max(self)

    def absMax(self):
        return _ZelosForMaya.double2_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.double2_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.double2_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.double2___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double2___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double2___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double2
    __del__ = lambda self: None
double2_swigregister = _ZelosForMaya.double2_swigregister
double2_swigregister(double2)

class double3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double3, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.double3_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.double3_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.double3___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.double3___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.double3___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.double3___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.double3___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.double3___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.double3___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.double3___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.double3___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.double3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.double3___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.double3___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.double3___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.double3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.double3___neg__(self)

    def negate(self):
        return _ZelosForMaya.double3_negate(self)

    def negated(self):
        return _ZelosForMaya.double3_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.double3_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.double3_length(self)

    def squaredLength(self):
        return _ZelosForMaya.double3_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.double3_normalize(self)

    def normalized(self):
        return _ZelosForMaya.double3_normalized(self)

    def min(self):
        return _ZelosForMaya.double3_min(self)

    def max(self):
        return _ZelosForMaya.double3_max(self)

    def absMax(self):
        return _ZelosForMaya.double3_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.double3_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.double3_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.double3___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double3___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double3___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double3
    __del__ = lambda self: None
double3_swigregister = _ZelosForMaya.double3_swigregister
double3_swigregister(double3)

class double4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double4, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.double4_set(self, *args)

    def zeroize(self):
        return _ZelosForMaya.double4_zeroize(self)

    def __eq__(self, t):
        return _ZelosForMaya.double4___eq__(self, t)

    def __ne__(self, t):
        return _ZelosForMaya.double4___ne__(self, t)

    def __lt__(self, t):
        return _ZelosForMaya.double4___lt__(self, t)

    def __gt__(self, t):
        return _ZelosForMaya.double4___gt__(self, t)

    def __le__(self, t):
        return _ZelosForMaya.double4___le__(self, t)

    def __ge__(self, t):
        return _ZelosForMaya.double4___ge__(self, t)

    def __iadd__(self, v):
        return _ZelosForMaya.double4___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.double4___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.double4___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.double4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.double4___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.double4___sub__(self, v)

    def __mul__(self, s):
        return _ZelosForMaya.double4___mul__(self, s)

    def __truediv__(self, *args):
        return _ZelosForMaya.double4___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.double4___neg__(self)

    def negate(self):
        return _ZelosForMaya.double4_negate(self)

    def negated(self):
        return _ZelosForMaya.double4_negated(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.double4_isEquivalent(self, *args)

    def length(self):
        return _ZelosForMaya.double4_length(self)

    def squaredLength(self):
        return _ZelosForMaya.double4_squaredLength(self)

    def normalize(self):
        return _ZelosForMaya.double4_normalize(self)

    def normalized(self):
        return _ZelosForMaya.double4_normalized(self)

    def min(self):
        return _ZelosForMaya.double4_min(self)

    def max(self):
        return _ZelosForMaya.double4_max(self)

    def absMax(self):
        return _ZelosForMaya.double4_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.double4_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.double4_maxIndex(self)

    def __repr__(self):
        return _ZelosForMaya.double4___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double4___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double4___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double4
    __del__ = lambda self: None
double4_swigregister = _ZelosForMaya.double4_swigregister
double4_swigregister(double4)

class vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector, name)
    __swig_setmethods__["x"] = _ZelosForMaya.vector_x_set
    __swig_getmethods__["x"] = _ZelosForMaya.vector_x_get
    if _newclass:
        x = _swig_property(_ZelosForMaya.vector_x_get, _ZelosForMaya.vector_x_set)
    __swig_setmethods__["y"] = _ZelosForMaya.vector_y_set
    __swig_getmethods__["y"] = _ZelosForMaya.vector_y_get
    if _newclass:
        y = _swig_property(_ZelosForMaya.vector_y_get, _ZelosForMaya.vector_y_set)
    __swig_setmethods__["z"] = _ZelosForMaya.vector_z_set
    __swig_getmethods__["z"] = _ZelosForMaya.vector_z_get
    if _newclass:
        z = _swig_property(_ZelosForMaya.vector_z_get, _ZelosForMaya.vector_z_set)

    def __init__(self, *args):
        this = _ZelosForMaya.new_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zeroize(self):
        return _ZelosForMaya.vector_zeroize(self)

    def __eq__(self, v):
        return _ZelosForMaya.vector___eq__(self, v)

    def __ne__(self, v):
        return _ZelosForMaya.vector___ne__(self, v)

    def __lt__(self, v):
        return _ZelosForMaya.vector___lt__(self, v)

    def __gt__(self, v):
        return _ZelosForMaya.vector___gt__(self, v)

    def __le__(self, v):
        return _ZelosForMaya.vector___le__(self, v)

    def __ge__(self, v):
        return _ZelosForMaya.vector___ge__(self, v)

    def __iadd__(self, v):
        return _ZelosForMaya.vector___iadd__(self, v)

    def __isub__(self, v):
        return _ZelosForMaya.vector___isub__(self, v)

    def __imul__(self, s):
        return _ZelosForMaya.vector___imul__(self, s)

    def __itruediv__(self, *args):
        return _ZelosForMaya.vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, v):
        return _ZelosForMaya.vector___add__(self, v)

    def __sub__(self, v):
        return _ZelosForMaya.vector___sub__(self, v)

    def __truediv__(self, *args):
        return _ZelosForMaya.vector___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _ZelosForMaya.vector___neg__(self)

    def negate(self):
        return _ZelosForMaya.vector_negate(self)

    def negated(self):
        return _ZelosForMaya.vector_negated(self)

    def reverse(self):
        return _ZelosForMaya.vector_reverse(self)

    def reversed(self):
        return _ZelosForMaya.vector_reversed(self)

    def __mul__(self, *args):
        return _ZelosForMaya.vector___mul__(self, *args)

    def __xor__(self, v):
        return _ZelosForMaya.vector___xor__(self, v)

    def isEquivalent(self, *args):
        return _ZelosForMaya.vector_isEquivalent(self, *args)

    def isParallel(self, *args):
        return _ZelosForMaya.vector_isParallel(self, *args)

    def length(self):
        return _ZelosForMaya.vector_length(self)

    def squaredLength(self):
        return _ZelosForMaya.vector_squaredLength(self)

    def normalize(self, accurate=False):
        return _ZelosForMaya.vector_normalize(self, accurate)

    def direction(self, accurate=False):
        return _ZelosForMaya.vector_direction(self, accurate)

    def limitLength(self, maxLength):
        return _ZelosForMaya.vector_limitLength(self, maxLength)

    def distanceTo(self, p):
        return _ZelosForMaya.vector_distanceTo(self, p)

    def squaredDistanceTo(self, p):
        return _ZelosForMaya.vector_squaredDistanceTo(self, p)

    def min(self):
        return _ZelosForMaya.vector_min(self)

    def max(self):
        return _ZelosForMaya.vector_max(self)

    def absMax(self):
        return _ZelosForMaya.vector_absMax(self)

    def minIndex(self):
        return _ZelosForMaya.vector_minIndex(self)

    def maxIndex(self):
        return _ZelosForMaya.vector_maxIndex(self)
    if _newclass:
        zero = staticmethod(_ZelosForMaya.vector_zero)
    else:
        zero = _ZelosForMaya.vector_zero
    if _newclass:
        one = staticmethod(_ZelosForMaya.vector_one)
    else:
        one = _ZelosForMaya.vector_one
    if _newclass:
        xPosAxis = staticmethod(_ZelosForMaya.vector_xPosAxis)
    else:
        xPosAxis = _ZelosForMaya.vector_xPosAxis
    if _newclass:
        yPosAxis = staticmethod(_ZelosForMaya.vector_yPosAxis)
    else:
        yPosAxis = _ZelosForMaya.vector_yPosAxis
    if _newclass:
        zPosAxis = staticmethod(_ZelosForMaya.vector_zPosAxis)
    else:
        zPosAxis = _ZelosForMaya.vector_zPosAxis
    if _newclass:
        xNegAxis = staticmethod(_ZelosForMaya.vector_xNegAxis)
    else:
        xNegAxis = _ZelosForMaya.vector_xNegAxis
    if _newclass:
        yNegAxis = staticmethod(_ZelosForMaya.vector_yNegAxis)
    else:
        yNegAxis = _ZelosForMaya.vector_yNegAxis
    if _newclass:
        zNegAxis = staticmethod(_ZelosForMaya.vector_zNegAxis)
    else:
        zNegAxis = _ZelosForMaya.vector_zNegAxis

    def __repr__(self):
        return _ZelosForMaya.vector___repr__(self)

    def __str__(self):
        return _ZelosForMaya.vector___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.vector___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.vector___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_vector
    __del__ = lambda self: None
vector_swigregister = _ZelosForMaya.vector_swigregister
vector_swigregister(vector)

def vector_zero():
    return _ZelosForMaya.vector_zero()
vector_zero = _ZelosForMaya.vector_zero

def vector_one():
    return _ZelosForMaya.vector_one()
vector_one = _ZelosForMaya.vector_one

def vector_xPosAxis():
    return _ZelosForMaya.vector_xPosAxis()
vector_xPosAxis = _ZelosForMaya.vector_xPosAxis

def vector_yPosAxis():
    return _ZelosForMaya.vector_yPosAxis()
vector_yPosAxis = _ZelosForMaya.vector_yPosAxis

def vector_zPosAxis():
    return _ZelosForMaya.vector_zPosAxis()
vector_zPosAxis = _ZelosForMaya.vector_zPosAxis

def vector_xNegAxis():
    return _ZelosForMaya.vector_xNegAxis()
vector_xNegAxis = _ZelosForMaya.vector_xNegAxis

def vector_yNegAxis():
    return _ZelosForMaya.vector_yNegAxis()
vector_yNegAxis = _ZelosForMaya.vector_yNegAxis

def vector_zNegAxis():
    return _ZelosForMaya.vector_zNegAxis()
vector_zNegAxis = _ZelosForMaya.vector_zNegAxis


point = vector

class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.matrix_set(self, *args)

    def get(self, c0, c1, c2):
        return _ZelosForMaya.matrix_get(self, c0, c1, c2)

    def column(self, i):
        return _ZelosForMaya.matrix_column(self, i)

    def zeroize(self):
        return _ZelosForMaya.matrix_zeroize(self)

    def __call__(self, *args):
        return _ZelosForMaya.matrix___call__(self, *args)

    def __eq__(self, m):
        return _ZelosForMaya.matrix___eq__(self, m)

    def __ne__(self, m):
        return _ZelosForMaya.matrix___ne__(self, m)

    def __iadd__(self, m):
        return _ZelosForMaya.matrix___iadd__(self, m)

    def __isub__(self, m):
        return _ZelosForMaya.matrix___isub__(self, m)

    def __imul__(self, *args):
        return _ZelosForMaya.matrix___imul__(self, *args)

    def __itruediv__(self, *args):
        return _ZelosForMaya.matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, m):
        return _ZelosForMaya.matrix___add__(self, m)

    def __sub__(self, m):
        return _ZelosForMaya.matrix___sub__(self, m)

    def transform(self, *args):
        return _ZelosForMaya.matrix_transform(self, *args)

    def transpose(self):
        return _ZelosForMaya.matrix_transpose(self)

    def transposed(self):
        return _ZelosForMaya.matrix_transposed(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.matrix_isEquivalent(self, *args)

    def isIdentity(self, *args):
        return _ZelosForMaya.matrix_isIdentity(self, *args)

    def isSingular(self, *args):
        return _ZelosForMaya.matrix_isSingular(self, *args)

    def isInvertible(self, *args):
        return _ZelosForMaya.matrix_isInvertible(self, *args)

    def isSymmetric(self, *args):
        return _ZelosForMaya.matrix_isSymmetric(self, *args)

    def isUnitary(self, *args):
        return _ZelosForMaya.matrix_isUnitary(self, *args)

    def isDiagonal(self, *args):
        return _ZelosForMaya.matrix_isDiagonal(self, *args)
    if _newclass:
        identity = staticmethod(_ZelosForMaya.matrix_identity)
    else:
        identity = _ZelosForMaya.matrix_identity

    def setToIdentity(self):
        return _ZelosForMaya.matrix_setToIdentity(self)

    def setToOuterProduct(self, p, q):
        return _ZelosForMaya.matrix_setToOuterProduct(self, p, q)

    def setToStar(self, w):
        return _ZelosForMaya.matrix_setToStar(self, w)

    def det3x3(self):
        return _ZelosForMaya.matrix_det3x3(self)

    def det(self):
        return _ZelosForMaya.matrix_det(self)

    def inversed3x3(self, doublePrecision=False):
        return _ZelosForMaya.matrix_inversed3x3(self, doublePrecision)

    def inverse(self, doublePrecision=False):
        return _ZelosForMaya.matrix_inverse(self, doublePrecision)

    def inversed(self, doublePrecision=False):
        return _ZelosForMaya.matrix_inversed(self, doublePrecision)

    def setTranslation(self, *args):
        return _ZelosForMaya.matrix_setTranslation(self, *args)

    def getTranslation(self, *args):
        return _ZelosForMaya.matrix_getTranslation(self, *args)

    def setEulerRotation(self, *args):
        return _ZelosForMaya.matrix_setEulerRotation(self, *args)

    def setRotation(self, rx, ry, rz, isRadian=False):
        return _ZelosForMaya.matrix_setRotation(self, rx, ry, rz, isRadian)

    def getRotation(self, rx, ry, rz):
        return _ZelosForMaya.matrix_getRotation(self, rx, ry, rz)

    def setScale(self, sx, sy, sz, preserveRotation=True):
        return _ZelosForMaya.matrix_setScale(self, sx, sy, sz, preserveRotation)

    def getScale(self, sx, sy, sz):
        return _ZelosForMaya.matrix_getScale(self, sx, sy, sz)

    def addScale(self, sx, sy, sz):
        return _ZelosForMaya.matrix_addScale(self, sx, sy, sz)

    def decompose(self, translation, rotation, scale):
        return _ZelosForMaya.matrix_decompose(self, translation, rotation, scale)

    def setTransform(self, translation, rotation, scale):
        return _ZelosForMaya.matrix_setTransform(self, translation, rotation, scale)

    def trace3x3(self):
        return _ZelosForMaya.matrix_trace3x3(self)

    def trace(self):
        return _ZelosForMaya.matrix_trace(self)

    def eigen3x3(self, eigenValues, eigenVectors, isSymmetric=True):
        return _ZelosForMaya.matrix_eigen3x3(self, eigenValues, eigenVectors, isSymmetric)

    def __repr__(self):
        return _ZelosForMaya.matrix___repr__(self)

    def __str__(self):
        return _ZelosForMaya.matrix___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_matrix
    __del__ = lambda self: None
matrix_swigregister = _ZelosForMaya.matrix_swigregister
matrix_swigregister(matrix)

def matrix_identity():
    return _ZelosForMaya.matrix_identity()
matrix_identity = _ZelosForMaya.matrix_identity

class boundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, boundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, boundingBox, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_boundingBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.boundingBox_reset(self)

    def set(self, corner1, corner2):
        return _ZelosForMaya.boundingBox_set(self, corner1, corner2)

    def __imul__(self, scale):
        return _ZelosForMaya.boundingBox___imul__(self, scale)

    def expand(self, *args):
        return _ZelosForMaya.boundingBox_expand(self, *args)

    def initialized(self):
        return _ZelosForMaya.boundingBox_initialized(self)

    def contains(self, point):
        return _ZelosForMaya.boundingBox_contains(self, point)

    def intersects(self, box):
        return _ZelosForMaya.boundingBox_intersects(self, box)

    def intersectsWithLineSegment(self, a, b):
        return _ZelosForMaya.boundingBox_intersectsWithLineSegment(self, a, b)

    def intersectsWithRay(self, *args):
        return _ZelosForMaya.boundingBox_intersectsWithRay(self, *args)

    def intersectsWithTriangle(self, a, b, c):
        return _ZelosForMaya.boundingBox_intersectsWithTriangle(self, a, b, c)

    def intersectsWithSphere(self, center, radius):
        return _ZelosForMaya.boundingBox_intersectsWithSphere(self, center, radius)

    def distanceFromOutside(self, p, asSquaredDist=False):
        return _ZelosForMaya.boundingBox_distanceFromOutside(self, p, asSquaredDist)

    def split(self, child1, child2):
        return _ZelosForMaya.boundingBox_split(self, child1, child2)

    def offset(self, displacement):
        return _ZelosForMaya.boundingBox_offset(self, displacement)

    def minPoint(self):
        return _ZelosForMaya.boundingBox_minPoint(self)

    def maxPoint(self):
        return _ZelosForMaya.boundingBox_maxPoint(self)

    def center(self):
        return _ZelosForMaya.boundingBox_center(self)

    def width(self, dimension):
        return _ZelosForMaya.boundingBox_width(self, dimension)

    def maxWidth(self):
        return _ZelosForMaya.boundingBox_maxWidth(self)

    def minWidth(self):
        return _ZelosForMaya.boundingBox_minWidth(self)

    def volume(self):
        return _ZelosForMaya.boundingBox_volume(self)

    def diagonalLength(self):
        return _ZelosForMaya.boundingBox_diagonalLength(self)

    def maxDimension(self):
        return _ZelosForMaya.boundingBox_maxDimension(self)

    def __repr__(self):
        return _ZelosForMaya.boundingBox___repr__(self)

    def __str__(self):
        return _ZelosForMaya.boundingBox___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_boundingBox
    __del__ = lambda self: None
boundingBox_swigregister = _ZelosForMaya.boundingBox_swigregister
boundingBox_swigregister(boundingBox)

class color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, color, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _ZelosForMaya.color_set(self, *args)

    def __eq__(self, v):
        return _ZelosForMaya.color___eq__(self, v)

    def __ne__(self, v):
        return _ZelosForMaya.color___ne__(self, v)

    def __iadd__(self, *args):
        return _ZelosForMaya.color___iadd__(self, *args)

    def __isub__(self, c):
        return _ZelosForMaya.color___isub__(self, c)

    def __imul__(self, scalar):
        return _ZelosForMaya.color___imul__(self, scalar)

    def __itruediv__(self, *args):
        return _ZelosForMaya.color___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _ZelosForMaya.color___neg__(self)

    def isEquivalent(self, *args):
        return _ZelosForMaya.color_isEquivalent(self, *args)

    def intensity(self):
        return _ZelosForMaya.color_intensity(self)

    def rgb2hsv(self):
        return _ZelosForMaya.color_rgb2hsv(self)

    def hsv2rgb(self):
        return _ZelosForMaya.color_hsv2rgb(self)
    if _newclass:
        black = staticmethod(_ZelosForMaya.color_black)
    else:
        black = _ZelosForMaya.color_black
    if _newclass:
        white = staticmethod(_ZelosForMaya.color_white)
    else:
        white = _ZelosForMaya.color_white
    if _newclass:
        red = staticmethod(_ZelosForMaya.color_red)
    else:
        red = _ZelosForMaya.color_red
    if _newclass:
        green = staticmethod(_ZelosForMaya.color_green)
    else:
        green = _ZelosForMaya.color_green
    if _newclass:
        blue = staticmethod(_ZelosForMaya.color_blue)
    else:
        blue = _ZelosForMaya.color_blue
    if _newclass:
        yellow = staticmethod(_ZelosForMaya.color_yellow)
    else:
        yellow = _ZelosForMaya.color_yellow
    if _newclass:
        magenta = staticmethod(_ZelosForMaya.color_magenta)
    else:
        magenta = _ZelosForMaya.color_magenta
    if _newclass:
        cyan = staticmethod(_ZelosForMaya.color_cyan)
    else:
        cyan = _ZelosForMaya.color_cyan
    if _newclass:
        orange = staticmethod(_ZelosForMaya.color_orange)
    else:
        orange = _ZelosForMaya.color_orange
    if _newclass:
        gray = staticmethod(_ZelosForMaya.color_gray)
    else:
        gray = _ZelosForMaya.color_gray

    def __repr__(self):
        return _ZelosForMaya.color___repr__(self)

    def __str__(self):
        return _ZelosForMaya.color___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.color___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.color___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_color
    __del__ = lambda self: None
color_swigregister = _ZelosForMaya.color_swigregister
color_swigregister(color)

def color_black():
    return _ZelosForMaya.color_black()
color_black = _ZelosForMaya.color_black

def color_white():
    return _ZelosForMaya.color_white()
color_white = _ZelosForMaya.color_white

def color_red():
    return _ZelosForMaya.color_red()
color_red = _ZelosForMaya.color_red

def color_green():
    return _ZelosForMaya.color_green()
color_green = _ZelosForMaya.color_green

def color_blue():
    return _ZelosForMaya.color_blue()
color_blue = _ZelosForMaya.color_blue

def color_yellow():
    return _ZelosForMaya.color_yellow()
color_yellow = _ZelosForMaya.color_yellow

def color_magenta():
    return _ZelosForMaya.color_magenta()
color_magenta = _ZelosForMaya.color_magenta

def color_cyan():
    return _ZelosForMaya.color_cyan()
color_cyan = _ZelosForMaya.color_cyan

def color_orange():
    return _ZelosForMaya.color_orange()
color_orange = _ZelosForMaya.color_orange

def color_gray():
    return _ZelosForMaya.color_gray()
color_gray = _ZelosForMaya.color_gray

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_intArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.intArray_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.intArray_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.intArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.intArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.intArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.intArray_length(self)

    def append(self, e):
        return _ZelosForMaya.intArray_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.intArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.intArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.intArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.intArray_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.intArray_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.intArray_fill(self, valueForAll)

    def inverse(self):
        return _ZelosForMaya.intArray_inverse(self)

    def shuffle(self, seed=0):
        return _ZelosForMaya.intArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.intArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.intArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.intArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.intArray_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.intArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.intArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.intArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.intArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_intArray
    __del__ = lambda self: None
intArray_swigregister = _ZelosForMaya.intArray_swigregister
intArray_swigregister(intArray)

class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_charArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.charArray_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.charArray_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.charArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.charArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.charArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.charArray_length(self)

    def append(self, e):
        return _ZelosForMaya.charArray_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.charArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.charArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.charArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.charArray_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.charArray_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.charArray_fill(self, valueForAll)

    def inverse(self):
        return _ZelosForMaya.charArray_inverse(self)

    def shuffle(self, seed=0):
        return _ZelosForMaya.charArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.charArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.charArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.charArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.charArray_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.charArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.charArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.charArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.charArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_charArray
    __del__ = lambda self: None
charArray_swigregister = _ZelosForMaya.charArray_swigregister
charArray_swigregister(charArray)

class int2Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int2Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int2Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int2Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.int2Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.int2Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.int2Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.int2Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.int2Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.int2Array_length(self)

    def append(self, e):
        return _ZelosForMaya.int2Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.int2Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.int2Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.int2Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.int2Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.int2Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.int2Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.int2Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.int2Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.int2Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.int2Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.int2Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.int2Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int2Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int2Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int2Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int2Array
    __del__ = lambda self: None
int2Array_swigregister = _ZelosForMaya.int2Array_swigregister
int2Array_swigregister(int2Array)

class int3Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int3Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int3Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int3Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.int3Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.int3Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.int3Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.int3Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.int3Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.int3Array_length(self)

    def append(self, e):
        return _ZelosForMaya.int3Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.int3Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.int3Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.int3Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.int3Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.int3Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.int3Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.int3Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.int3Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.int3Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.int3Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.int3Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.int3Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int3Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int3Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int3Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int3Array
    __del__ = lambda self: None
int3Array_swigregister = _ZelosForMaya.int3Array_swigregister
int3Array_swigregister(int3Array)

class int4Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int4Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int4Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_int4Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.int4Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.int4Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.int4Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.int4Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.int4Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.int4Array_length(self)

    def append(self, e):
        return _ZelosForMaya.int4Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.int4Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.int4Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.int4Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.int4Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.int4Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.int4Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.int4Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.int4Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.int4Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.int4Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.int4Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.int4Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.int4Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.int4Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.int4Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_int4Array
    __del__ = lambda self: None
int4Array_swigregister = _ZelosForMaya.int4Array_swigregister
int4Array_swigregister(int4Array)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_floatArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.floatArray_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.floatArray_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.floatArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.floatArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.floatArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.floatArray_length(self)

    def append(self, e):
        return _ZelosForMaya.floatArray_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.floatArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.floatArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.floatArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.floatArray_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.floatArray_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.floatArray_fill(self, valueForAll)

    def inverse(self):
        return _ZelosForMaya.floatArray_inverse(self)

    def shuffle(self, seed=0):
        return _ZelosForMaya.floatArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.floatArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.floatArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.floatArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.floatArray_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.floatArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.floatArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.floatArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.floatArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_floatArray
    __del__ = lambda self: None
floatArray_swigregister = _ZelosForMaya.floatArray_swigregister
floatArray_swigregister(floatArray)

class float2Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float2Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float2Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float2Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.float2Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.float2Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.float2Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.float2Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.float2Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.float2Array_length(self)

    def append(self, e):
        return _ZelosForMaya.float2Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.float2Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.float2Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.float2Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.float2Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.float2Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.float2Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.float2Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.float2Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.float2Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.float2Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.float2Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.float2Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float2Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float2Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float2Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float2Array
    __del__ = lambda self: None
float2Array_swigregister = _ZelosForMaya.float2Array_swigregister
float2Array_swigregister(float2Array)

class float3Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float3Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float3Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float3Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.float3Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.float3Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.float3Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.float3Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.float3Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.float3Array_length(self)

    def append(self, e):
        return _ZelosForMaya.float3Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.float3Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.float3Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.float3Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.float3Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.float3Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.float3Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.float3Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.float3Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.float3Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.float3Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.float3Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.float3Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float3Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float3Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float3Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float3Array
    __del__ = lambda self: None
float3Array_swigregister = _ZelosForMaya.float3Array_swigregister
float3Array_swigregister(float3Array)

class float4Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float4Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float4Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_float4Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.float4Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.float4Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.float4Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.float4Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.float4Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.float4Array_length(self)

    def append(self, e):
        return _ZelosForMaya.float4Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.float4Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.float4Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.float4Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.float4Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.float4Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.float4Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.float4Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.float4Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.float4Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.float4Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.float4Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.float4Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.float4Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.float4Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.float4Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_float4Array
    __del__ = lambda self: None
float4Array_swigregister = _ZelosForMaya.float4Array_swigregister
float4Array_swigregister(float4Array)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_doubleArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.doubleArray_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.doubleArray_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.doubleArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.doubleArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.doubleArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.doubleArray_length(self)

    def append(self, e):
        return _ZelosForMaya.doubleArray_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.doubleArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.doubleArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.doubleArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.doubleArray_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.doubleArray_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.doubleArray_fill(self, valueForAll)

    def inverse(self):
        return _ZelosForMaya.doubleArray_inverse(self)

    def shuffle(self, seed=0):
        return _ZelosForMaya.doubleArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.doubleArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.doubleArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.doubleArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.doubleArray_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.doubleArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.doubleArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.doubleArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.doubleArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_doubleArray
    __del__ = lambda self: None
doubleArray_swigregister = _ZelosForMaya.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

class double2Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double2Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double2Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double2Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.double2Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.double2Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.double2Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.double2Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.double2Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.double2Array_length(self)

    def append(self, e):
        return _ZelosForMaya.double2Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.double2Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.double2Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.double2Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.double2Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.double2Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.double2Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.double2Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.double2Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.double2Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.double2Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.double2Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.double2Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double2Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double2Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double2Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double2Array
    __del__ = lambda self: None
double2Array_swigregister = _ZelosForMaya.double2Array_swigregister
double2Array_swigregister(double2Array)

class double3Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double3Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double3Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double3Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.double3Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.double3Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.double3Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.double3Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.double3Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.double3Array_length(self)

    def append(self, e):
        return _ZelosForMaya.double3Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.double3Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.double3Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.double3Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.double3Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.double3Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.double3Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.double3Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.double3Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.double3Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.double3Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.double3Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.double3Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double3Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double3Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double3Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double3Array
    __del__ = lambda self: None
double3Array_swigregister = _ZelosForMaya.double3Array_swigregister
double3Array_swigregister(double3Array)

class double4Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double4Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double4Array, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_double4Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.double4Array_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.double4Array_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.double4Array_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.double4Array_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.double4Array_last(self, *args)

    def length(self):
        return _ZelosForMaya.double4Array_length(self)

    def append(self, e):
        return _ZelosForMaya.double4Array_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.double4Array_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.double4Array_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.double4Array_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.double4Array_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.double4Array_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.double4Array_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.double4Array_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.double4Array_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.double4Array_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.double4Array_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.double4Array_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.double4Array___repr__(self)

    def __str__(self):
        return _ZelosForMaya.double4Array___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.double4Array___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.double4Array___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_double4Array
    __del__ = lambda self: None
double4Array_swigregister = _ZelosForMaya.double4Array_swigregister
double4Array_swigregister(double4Array)

class stringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_stringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.stringArray_reset(self)

    def setLength(self, length):
        return _ZelosForMaya.stringArray_setLength(self, length)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.stringArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.stringArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.stringArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.stringArray_length(self)

    def append(self, *args):
        return _ZelosForMaya.stringArray_append(self, *args)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.stringArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.stringArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.stringArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.stringArray_deduplicateAndSort(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.stringArray_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.stringArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.stringArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.stringArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.stringArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.stringArray_checkIndex(self, i)

    def __repr__(self):
        return _ZelosForMaya.stringArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.stringArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.stringArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.stringArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_stringArray
    __del__ = lambda self: None
stringArray_swigregister = _ZelosForMaya.stringArray_swigregister
stringArray_swigregister(stringArray)

class vectorArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorArray, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_vectorArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.vectorArray_reset(self)

    def setLength(self, length, initializeAsZero=True):
        return _ZelosForMaya.vectorArray_setLength(self, length, initializeAsZero)

    def setLengthWithValue(self, length, valueForAll):
        return _ZelosForMaya.vectorArray_setLengthWithValue(self, length, valueForAll)

    def first(self, *args):
        return _ZelosForMaya.vectorArray_first(self, *args)

    def last(self, *args):
        return _ZelosForMaya.vectorArray_last(self, *args)

    def length(self):
        return _ZelosForMaya.vectorArray_length(self)

    def append(self, e):
        return _ZelosForMaya.vectorArray_append(self, e)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.vectorArray_remove(self, indicesToBeDeleted)

    def eliminateRepeatedElements(self):
        return _ZelosForMaya.vectorArray_eliminateRepeatedElements(self)

    def deduplicate(self):
        return _ZelosForMaya.vectorArray_deduplicate(self)

    def deduplicateAndSort(self):
        return _ZelosForMaya.vectorArray_deduplicateAndSort(self)

    def zeroize(self):
        return _ZelosForMaya.vectorArray_zeroize(self)

    def fill(self, valueForAll):
        return _ZelosForMaya.vectorArray_fill(self, valueForAll)

    def shuffle(self, seed=0):
        return _ZelosForMaya.vectorArray_shuffle(self, seed)

    def exchange(self, a):
        return _ZelosForMaya.vectorArray_exchange(self, a)

    def save(self, filePathName):
        return _ZelosForMaya.vectorArray_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.vectorArray_load(self, filePathName)

    def checkIndex(self, i):
        return _ZelosForMaya.vectorArray_checkIndex(self, i)

    def center(self):
        return _ZelosForMaya.vectorArray_center(self)

    def boundingBox(self, useOpenMP=True):
        return _ZelosForMaya.vectorArray_boundingBox(self, useOpenMP)

    def addPoints(self, numPoints, minPoint, maxPoint, seed=0):
        return _ZelosForMaya.vectorArray_addPoints(self, numPoints, minPoint, maxPoint, seed)

    def getCovarianceMatrix(self, covarianceMatrix):
        return _ZelosForMaya.vectorArray_getCovarianceMatrix(self, covarianceMatrix)

    def maxMagnitude(self):
        return _ZelosForMaya.vectorArray_maxMagnitude(self)

    def scale(self, v, useOpenMP=False):
        return _ZelosForMaya.vectorArray_scale(self, v, useOpenMP)

    def applyTransform(self, matrix, asVector, useOpenMP=True):
        return _ZelosForMaya.vectorArray_applyTransform(self, matrix, asVector, useOpenMP)

    def __repr__(self):
        return _ZelosForMaya.vectorArray___repr__(self)

    def __str__(self):
        return _ZelosForMaya.vectorArray___str__(self)

    def __getitem__(self, i):
        return _ZelosForMaya.vectorArray___getitem__(self, i)

    def __setitem__(self, i, v):
        return _ZelosForMaya.vectorArray___setitem__(self, i, v)
    __swig_destroy__ = _ZelosForMaya.delete_vectorArray
    __del__ = lambda self: None
vectorArray_swigregister = _ZelosForMaya.vectorArray_swigregister
vectorArray_swigregister(vectorArray)


pointArray = vectorArray


def assignGroups(groupIds, likelihoods, randomSeed=0):
    return _ZelosForMaya.assignGroups(groupIds, likelihoods, randomSeed)
assignGroups = _ZelosForMaya.assignGroups

def reverseConnections(vCounts, vConnects):
    return _ZelosForMaya.reverseConnections(vCounts, vConnects)
reverseConnections = _ZelosForMaya.reverseConnections

def computeVertexNormals(vertexPositions, vCounts, vConnects, vertexNormals):
    return _ZelosForMaya.computeVertexNormals(vertexPositions, vCounts, vConnects, vertexNormals)
computeVertexNormals = _ZelosForMaya.computeVertexNormals
class triMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, triMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, triMesh, name)
    __swig_setmethods__["p"] = _ZelosForMaya.triMesh_p_set
    __swig_getmethods__["p"] = _ZelosForMaya.triMesh_p_get
    if _newclass:
        p = _swig_property(_ZelosForMaya.triMesh_p_get, _ZelosForMaya.triMesh_p_set)
    __swig_setmethods__["v012"] = _ZelosForMaya.triMesh_v012_set
    __swig_getmethods__["v012"] = _ZelosForMaya.triMesh_v012_get
    if _newclass:
        v012 = _swig_property(_ZelosForMaya.triMesh_v012_get, _ZelosForMaya.triMesh_v012_set)
    __swig_setmethods__["uv"] = _ZelosForMaya.triMesh_uv_set
    __swig_getmethods__["uv"] = _ZelosForMaya.triMesh_uv_get
    if _newclass:
        uv = _swig_property(_ZelosForMaya.triMesh_uv_get, _ZelosForMaya.triMesh_uv_set)

    def __init__(self, *args):
        this = _ZelosForMaya.new_triMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.triMesh_reset(self)

    def numVertices(self):
        return _ZelosForMaya.triMesh_numVertices(self)

    def numTriangles(self):
        return _ZelosForMaya.triMesh_numTriangles(self)

    def numUVs(self):
        return _ZelosForMaya.triMesh_numUVs(self)

    def transform(self, *args):
        return _ZelosForMaya.triMesh_transform(self, *args)

    def center(self, triIdx):
        return _ZelosForMaya.triMesh_center(self, triIdx)

    def boundingBox(self):
        return _ZelosForMaya.triMesh_boundingBox(self)

    def reverse(self):
        return _ZelosForMaya.triMesh_reverse(self)

    def getPositions(self, triIndices, baryCoords, positions, useOpenMP=True):
        return _ZelosForMaya.triMesh_getPositions(self, triIndices, baryCoords, positions, useOpenMP)

    def getUVs(self, triIndices, baryCoords, uvs, useOpenMP=True):
        return _ZelosForMaya.triMesh_getUVs(self, triIndices, baryCoords, uvs, useOpenMP)

    def getNormals(self, triIndices, baryCoords, normals, useOpenMP=True):
        return _ZelosForMaya.triMesh_getNormals(self, triIndices, baryCoords, normals, useOpenMP)

    def getTriangleCenters(self, centers, useOpenMP=True):
        return _ZelosForMaya.triMesh_getTriangleCenters(self, centers, useOpenMP)

    def getVertexNormals(self, normals, useOpenMP=True):
        return _ZelosForMaya.triMesh_getVertexNormals(self, normals, useOpenMP)

    def getTriangleNormals(self, normals, useOpenMP=True):
        return _ZelosForMaya.triMesh_getTriangleNormals(self, normals, useOpenMP)

    def area(self, useOpenMP=True):
        return _ZelosForMaya.triMesh_area(self, useOpenMP)

    def getTriangleAreas(self, areas, useOpenMP=True):
        return _ZelosForMaya.triMesh_getTriangleAreas(self, areas, useOpenMP)

    def getMinMaxEdgeLength(self, min, max):
        return _ZelosForMaya.triMesh_getMinMaxEdgeLength(self, min, max)

    def getMinMaxUVEdgeLength(self, min, max):
        return _ZelosForMaya.triMesh_getMinMaxUVEdgeLength(self, min, max)

    def getTriangleCenterValue(self, densityMapFilePathName, values, channel=-1, useOpenMP=True):
        return _ZelosForMaya.triMesh_getTriangleCenterValue(self, densityMapFilePathName, values, channel, useOpenMP)

    def combine(self, mesh):
        return _ZelosForMaya.triMesh_combine(self, mesh)

    def deleteTriangles(self, indicesToBeDeleted):
        return _ZelosForMaya.triMesh_deleteTriangles(self, indicesToBeDeleted)

    def usedMemorySize(self, dataUnit):
        return _ZelosForMaya.triMesh_usedMemorySize(self, dataUnit)

    def dataType(self):
        return _ZelosForMaya.triMesh_dataType(self)

    def exchange(self, mesh):
        return _ZelosForMaya.triMesh_exchange(self, mesh)

    def save(self, filePathName):
        return _ZelosForMaya.triMesh_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.triMesh_load(self, filePathName)

    def __repr__(self):
        return _ZelosForMaya.triMesh___repr__(self)

    def __str__(self):
        return _ZelosForMaya.triMesh___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_triMesh
    __del__ = lambda self: None
triMesh_swigregister = _ZelosForMaya.triMesh_swigregister
triMesh_swigregister(triMesh)

class polyMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polyMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polyMesh, name)
    __swig_setmethods__["vertexPositions"] = _ZelosForMaya.polyMesh_vertexPositions_set
    __swig_getmethods__["vertexPositions"] = _ZelosForMaya.polyMesh_vertexPositions_get
    if _newclass:
        vertexPositions = _swig_property(_ZelosForMaya.polyMesh_vertexPositions_get, _ZelosForMaya.polyMesh_vertexPositions_set)
    __swig_setmethods__["polygonCounts"] = _ZelosForMaya.polyMesh_polygonCounts_set
    __swig_getmethods__["polygonCounts"] = _ZelosForMaya.polyMesh_polygonCounts_get
    if _newclass:
        polygonCounts = _swig_property(_ZelosForMaya.polyMesh_polygonCounts_get, _ZelosForMaya.polyMesh_polygonCounts_set)
    __swig_setmethods__["polygonConnects"] = _ZelosForMaya.polyMesh_polygonConnects_set
    __swig_getmethods__["polygonConnects"] = _ZelosForMaya.polyMesh_polygonConnects_get
    if _newclass:
        polygonConnects = _swig_property(_ZelosForMaya.polyMesh_polygonConnects_get, _ZelosForMaya.polyMesh_polygonConnects_set)
    __swig_setmethods__["boundingBox"] = _ZelosForMaya.polyMesh_boundingBox_set
    __swig_getmethods__["boundingBox"] = _ZelosForMaya.polyMesh_boundingBox_get
    if _newclass:
        boundingBox = _swig_property(_ZelosForMaya.polyMesh_boundingBox_get, _ZelosForMaya.polyMesh_boundingBox_set)
    __swig_setmethods__["vertexNormals"] = _ZelosForMaya.polyMesh_vertexNormals_set
    __swig_getmethods__["vertexNormals"] = _ZelosForMaya.polyMesh_vertexNormals_get
    if _newclass:
        vertexNormals = _swig_property(_ZelosForMaya.polyMesh_vertexNormals_get, _ZelosForMaya.polyMesh_vertexNormals_set)
    __swig_setmethods__["u"] = _ZelosForMaya.polyMesh_u_set
    __swig_getmethods__["u"] = _ZelosForMaya.polyMesh_u_get
    if _newclass:
        u = _swig_property(_ZelosForMaya.polyMesh_u_get, _ZelosForMaya.polyMesh_u_set)
    __swig_setmethods__["v"] = _ZelosForMaya.polyMesh_v_set
    __swig_getmethods__["v"] = _ZelosForMaya.polyMesh_v_get
    if _newclass:
        v = _swig_property(_ZelosForMaya.polyMesh_v_get, _ZelosForMaya.polyMesh_v_set)
    __swig_setmethods__["uvIndices"] = _ZelosForMaya.polyMesh_uvIndices_set
    __swig_getmethods__["uvIndices"] = _ZelosForMaya.polyMesh_uvIndices_get
    if _newclass:
        uvIndices = _swig_property(_ZelosForMaya.polyMesh_uvIndices_get, _ZelosForMaya.polyMesh_uvIndices_set)

    def __init__(self, *args):
        this = _ZelosForMaya.new_polyMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.polyMesh_reset(self)

    def numVertices(self):
        return _ZelosForMaya.polyMesh_numVertices(self)

    def numPolygons(self):
        return _ZelosForMaya.polyMesh_numPolygons(self)

    def numUVs(self):
        return _ZelosForMaya.polyMesh_numUVs(self)

    def empty(self):
        return _ZelosForMaya.polyMesh_empty(self)

    def hasVertexNormals(self):
        return _ZelosForMaya.polyMesh_hasVertexNormals(self)

    def hasBoundingBox(self):
        return _ZelosForMaya.polyMesh_hasBoundingBox(self)

    def transform(self, matrix, useOpenMP=False):
        return _ZelosForMaya.polyMesh_transform(self, matrix, useOpenMP)

    def append(self, other, uv=False):
        return _ZelosForMaya.polyMesh_append(self, other, uv)

    def computeVertexNormals(self):
        return _ZelosForMaya.polyMesh_computeVertexNormals(self)

    def computeBoundingBox(self):
        return _ZelosForMaya.polyMesh_computeBoundingBox(self)

    def reverse(self):
        return _ZelosForMaya.polyMesh_reverse(self)

    def convertTo(self, mesh):
        return _ZelosForMaya.polyMesh_convertTo(self, mesh)

    def dataType(self):
        return _ZelosForMaya.polyMesh_dataType(self)

    def save(self, filePathName):
        return _ZelosForMaya.polyMesh_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.polyMesh_load(self, filePathName)

    def drawVertices(self):
        return _ZelosForMaya.polyMesh_drawVertices(self)

    def drawWireframe(self):
        return _ZelosForMaya.polyMesh_drawWireframe(self)

    def drawSurface(self, withNormal=False):
        return _ZelosForMaya.polyMesh_drawSurface(self, withNormal)

    def __repr__(self):
        return _ZelosForMaya.polyMesh___repr__(self)

    def __str__(self):
        return _ZelosForMaya.polyMesh___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_polyMesh
    __del__ = lambda self: None
polyMesh_swigregister = _ZelosForMaya.polyMesh_swigregister
polyMesh_swigregister(polyMesh)

class image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.image_reset(self)

    def set(self, w, h, c):
        return _ZelosForMaya.image_set(self, w, h, c)

    def width(self):
        return _ZelosForMaya.image_width(self)

    def height(self):
        return _ZelosForMaya.image_height(self)

    def numChannels(self):
        return _ZelosForMaya.image_numChannels(self)

    def size(self):
        return _ZelosForMaya.image_size(self)

    def format(self):
        return _ZelosForMaya.image_format(self)

    def filePathName(self):
        return _ZelosForMaya.image_filePathName(self)

    def index(self, i, j, k):
        return _ZelosForMaya.image_index(self, i, j, k)

    def __call__(self, *args):
        return _ZelosForMaya.image___call__(self, *args)

    def setPixelColor(self, i, j, color, setAlpha):
        return _ZelosForMaya.image_setPixelColor(self, i, j, color, setAlpha)

    def color(self, i, j, getAlpha):
        return _ZelosForMaya.image_color(self, i, j, getAlpha)

    def intensity(self, *args):
        return _ZelosForMaya.image_intensity(self, *args)

    def fastValue(self, u, v, k=0):
        return _ZelosForMaya.image_fastValue(self, u, v, k)

    def fastColor(self, u, v):
        return _ZelosForMaya.image_fastColor(self, u, v)

    def min(self, channelIndex):
        return _ZelosForMaya.image_min(self, channelIndex)

    def max(self, channelIndex):
        return _ZelosForMaya.image_max(self, channelIndex)

    def average(self, channelsIndex):
        return _ZelosForMaya.image_average(self, channelsIndex)

    def histogram(self, counts, numSegments, channelIndex, min=0., max=1.):
        return _ZelosForMaya.image_histogram(self, counts, numSegments, channelIndex, min, max)

    def save(self, filePathName, imageFormat):
        return _ZelosForMaya.image_save(self, filePathName, imageFormat)

    def load(self, filePathName, skipIfSameFile=False):
        return _ZelosForMaya.image_load(self, filePathName, skipIfSameFile)

    def __repr__(self):
        return _ZelosForMaya.image___repr__(self)

    def __str__(self):
        return _ZelosForMaya.image___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_image
    __del__ = lambda self: None
image_swigregister = _ZelosForMaya.image_swigregister
image_swigregister(image)

class particles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, particles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, particles, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_particles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.particles_reset(self)

    def checkCompatible(self, ptc):
        return _ZelosForMaya.particles_checkCompatible(self, ptc)

    def numParticles(self):
        return _ZelosForMaya.particles_numParticles(self)

    def numAttributes(self):
        return _ZelosForMaya.particles_numAttributes(self)

    def dataType(self, i):
        return _ZelosForMaya.particles_dataType(self, i)

    def dataSize(self, i):
        return _ZelosForMaya.particles_dataSize(self, i)

    def attributeName(self, i):
        return _ZelosForMaya.particles_attributeName(self, i)

    def attributeIndex(self, name):
        return _ZelosForMaya.particles_attributeIndex(self, name)

    def addAttribute(self, name, zDataType):
        return _ZelosForMaya.particles_addAttribute(self, name, zDataType)

    def deleteAttribute(self, name):
        return _ZelosForMaya.particles_deleteAttribute(self, name)

    def addParticles(self, numToAdd):
        return _ZelosForMaya.particles_addParticles(self, numToAdd)

    def append(self, particles):
        return _ZelosForMaya.particles_append(self, particles)

    def remove(self, indicesToBeDeleted):
        return _ZelosForMaya.particles_remove(self, indicesToBeDeleted)

    def computeBoundingBox(self, *args):
        return _ZelosForMaya.particles_computeBoundingBox(self, *args)

    def groupId(self):
        return _ZelosForMaya.particles_groupId(self)

    def groupColor(self):
        return _ZelosForMaya.particles_groupColor(self)

    def boundingBox(self):
        return _ZelosForMaya.particles_boundingBox(self)

    def minMagnitude(self, attrName, useOpenMP=True):
        return _ZelosForMaya.particles_minMagnitude(self, attrName, useOpenMP)

    def maxMagnitude(self, attrName, useOpenMP=True):
        return _ZelosForMaya.particles_maxMagnitude(self, attrName, useOpenMP)

    def save(self, filePathName):
        return _ZelosForMaya.particles_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.particles_load(self, filePathName)

    def __repr__(self):
        return _ZelosForMaya.particles___repr__(self)

    def __str__(self):
        return _ZelosForMaya.particles___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_particles
    __del__ = lambda self: None
particles_swigregister = _ZelosForMaya.particles_swigregister
particles_swigregister(particles)

class vectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ZelosForMaya.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ZelosForMaya.vectorString___nonzero__(self)

    def __bool__(self):
        return _ZelosForMaya.vectorString___bool__(self)

    def __len__(self):
        return _ZelosForMaya.vectorString___len__(self)

    def __getslice__(self, i, j):
        return _ZelosForMaya.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ZelosForMaya.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ZelosForMaya.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ZelosForMaya.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ZelosForMaya.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ZelosForMaya.vectorString___setitem__(self, *args)

    def pop(self):
        return _ZelosForMaya.vectorString_pop(self)

    def append(self, x):
        return _ZelosForMaya.vectorString_append(self, x)

    def empty(self):
        return _ZelosForMaya.vectorString_empty(self)

    def size(self):
        return _ZelosForMaya.vectorString_size(self)

    def swap(self, v):
        return _ZelosForMaya.vectorString_swap(self, v)

    def begin(self):
        return _ZelosForMaya.vectorString_begin(self)

    def end(self):
        return _ZelosForMaya.vectorString_end(self)

    def rbegin(self):
        return _ZelosForMaya.vectorString_rbegin(self)

    def rend(self):
        return _ZelosForMaya.vectorString_rend(self)

    def clear(self):
        return _ZelosForMaya.vectorString_clear(self)

    def get_allocator(self):
        return _ZelosForMaya.vectorString_get_allocator(self)

    def pop_back(self):
        return _ZelosForMaya.vectorString_pop_back(self)

    def erase(self, *args):
        return _ZelosForMaya.vectorString_erase(self, *args)

    def __init__(self, *args):
        this = _ZelosForMaya.new_vectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ZelosForMaya.vectorString_push_back(self, x)

    def front(self):
        return _ZelosForMaya.vectorString_front(self)

    def back(self):
        return _ZelosForMaya.vectorString_back(self)

    def assign(self, n, x):
        return _ZelosForMaya.vectorString_assign(self, n, x)

    def resize(self, *args):
        return _ZelosForMaya.vectorString_resize(self, *args)

    def insert(self, *args):
        return _ZelosForMaya.vectorString_insert(self, *args)

    def reserve(self, n):
        return _ZelosForMaya.vectorString_reserve(self, n)

    def capacity(self):
        return _ZelosForMaya.vectorString_capacity(self)
    __swig_destroy__ = _ZelosForMaya.delete_vectorString
    __del__ = lambda self: None
vectorString_swigregister = _ZelosForMaya.vectorString_swigregister
vectorString_swigregister(vectorString)

class skeleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, skeleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, skeleton, name)

    def __init__(self):
        this = _ZelosForMaya.new_skeleton()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.skeleton_reset(self)

    def numJoints(self):
        return _ZelosForMaya.skeleton_numJoints(self)

    def numFrames(self):
        return _ZelosForMaya.skeleton_numFrames(self)

    def jointIndex(self, jointName):
        return _ZelosForMaya.skeleton_jointIndex(self, jointName)

    def getRoot(self):
        return _ZelosForMaya.skeleton_getRoot(self)

    def jointName(self, *args):
        return _ZelosForMaya.skeleton_jointName(self, *args)

    def childNum(self, *args):
        return _ZelosForMaya.skeleton_childNum(self, *args)

    def getParent(self, joint):
        return _ZelosForMaya.skeleton_getParent(self, joint)

    def childAt(self, joint, childIndex):
        return _ZelosForMaya.skeleton_childAt(self, joint, childIndex)

    def getChannels(self, joint):
        return _ZelosForMaya.skeleton_getChannels(self, joint)

    def getOffsets(self, joint):
        return _ZelosForMaya.skeleton_getOffsets(self, joint)

    def translation(self, *args):
        return _ZelosForMaya.skeleton_translation(self, *args)

    def orientation(self, *args):
        return _ZelosForMaya.skeleton_orientation(self, *args)

    def save(self, filePathName):
        return _ZelosForMaya.skeleton_save(self, filePathName)

    def load(self, filePathName):
        return _ZelosForMaya.skeleton_load(self, filePathName)

    def __repr__(self):
        return _ZelosForMaya.skeleton___repr__(self)

    def __str__(self):
        return _ZelosForMaya.skeleton___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_skeleton
    __del__ = lambda self: None
skeleton_swigregister = _ZelosForMaya.skeleton_swigregister
skeleton_swigregister(skeleton)

class alembicProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alembicProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alembicProperty, name)

    def __init__(self):
        this = _ZelosForMaya.new_alembicProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.alembicProperty_reset(self)

    def setAsTop(self, ownerObject):
        return _ZelosForMaya.alembicProperty_setAsTop(self, ownerObject)

    def getMetaData(self, keys, values):
        return _ZelosForMaya.alembicProperty_getMetaData(self, keys, values)

    def getChild(self, i, childProperty):
        return _ZelosForMaya.alembicProperty_getChild(self, i, childProperty)

    def ownerObject(self):
        return _ZelosForMaya.alembicProperty_ownerObject(self)

    def name(self):
        return _ZelosForMaya.alembicProperty_name(self)

    def typeId(self):
        return _ZelosForMaya.alembicProperty_typeId(self)

    def typeStr(self):
        return _ZelosForMaya.alembicProperty_typeStr(self)

    def numChildren(self):
        return _ZelosForMaya.alembicProperty_numChildren(self)

    def dataTypeId(self):
        return _ZelosForMaya.alembicProperty_dataTypeId(self)

    def dataTypeStr(self):
        return _ZelosForMaya.alembicProperty_dataTypeStr(self)

    def extent(self):
        return _ZelosForMaya.alembicProperty_extent(self)

    def valuesAsString(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valuesAsString(self, sampleIndex)

    def valueChar(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valueChar(self, sampleIndex)

    def valueInt(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valueInt(self, sampleIndex)

    def valueFloat(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valueFloat(self, sampleIndex)

    def valueDouble(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valueDouble(self, sampleIndex)

    def valueString(self, sampleIndex=0):
        return _ZelosForMaya.alembicProperty_valueString(self, sampleIndex)

    def getValue(self, *args):
        return _ZelosForMaya.alembicProperty_getValue(self, *args)

    def getValues(self, *args):
        return _ZelosForMaya.alembicProperty_getValues(self, *args)

    def __repr__(self):
        return _ZelosForMaya.alembicProperty___repr__(self)

    def __str__(self):
        return _ZelosForMaya.alembicProperty___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_alembicProperty
    __del__ = lambda self: None
alembicProperty_swigregister = _ZelosForMaya.alembicProperty_swigregister
alembicProperty_swigregister(alembicProperty)

class alembicObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alembicObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alembicObject, name)

    def __init__(self):
        this = _ZelosForMaya.new_alembicObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.alembicObject_reset(self)

    def getMetaData(self, keys, values):
        return _ZelosForMaya.alembicObject_getMetaData(self, keys, values)

    def getChild(self, i, childObject):
        return _ZelosForMaya.alembicObject_getChild(self, i, childObject)

    def getParent(self, parentObject):
        return _ZelosForMaya.alembicObject_getParent(self, parentObject)

    def topProperty(self):
        return _ZelosForMaya.alembicObject_topProperty(self)

    def name(self):
        return _ZelosForMaya.alembicObject_name(self)

    def fullPath(self):
        return _ZelosForMaya.alembicObject_fullPath(self)

    def typeId(self):
        return _ZelosForMaya.alembicObject_typeId(self)

    def typeStr(self):
        return _ZelosForMaya.alembicObject_typeStr(self)

    def numChildren(self):
        return _ZelosForMaya.alembicObject_numChildren(self)

    def isLeaf(self):
        return _ZelosForMaya.alembicObject_isLeaf(self)

    def timeSamplingTypeId(self):
        return _ZelosForMaya.alembicObject_timeSamplingTypeId(self)

    def timeSamplingTypeStr(self):
        return _ZelosForMaya.alembicObject_timeSamplingTypeStr(self)

    def numTimeSamples(self):
        return _ZelosForMaya.alembicObject_numTimeSamples(self)

    def isConstant(self):
        return _ZelosForMaya.alembicObject_isConstant(self)

    def minTime(self):
        return _ZelosForMaya.alembicObject_minTime(self)

    def maxTime(self):
        return _ZelosForMaya.alembicObject_maxTime(self)

    def timeStepSize(self):
        return _ZelosForMaya.alembicObject_timeStepSize(self)

    def minFrame(self):
        return _ZelosForMaya.alembicObject_minFrame(self)

    def maxFrame(self):
        return _ZelosForMaya.alembicObject_maxFrame(self)

    def getTransformations(self, t, r, s, frame=0):
        return _ZelosForMaya.alembicObject_getTransformations(self, t, r, s, frame)

    def getPolygonMeshInfo(self, numVertices, numPolygons, numUVs, frame=0):
        return _ZelosForMaya.alembicObject_getPolygonMeshInfo(self, numVertices, numPolygons, numUVs, frame)

    def getPolyMeshData(self, vPos, vVel, vCounts, vConnections, bBox, worldMat, uvs, uvIndices, frame=0):
        return _ZelosForMaya.alembicObject_getPolyMeshData(self, vPos, vVel, vCounts, vConnections, bBox, worldMat, uvs, uvIndices, frame)

    def __repr__(self):
        return _ZelosForMaya.alembicObject___repr__(self)

    def __str__(self):
        return _ZelosForMaya.alembicObject___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_alembicObject
    __del__ = lambda self: None
alembicObject_swigregister = _ZelosForMaya.alembicObject_swigregister
alembicObject_swigregister(alembicObject)

class alembicArchive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alembicArchive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alembicArchive, name)

    def __init__(self, *args):
        this = _ZelosForMaya.new_alembicArchive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ZelosForMaya.alembicArchive_reset(self)

    def open(self, filePathName):
        return _ZelosForMaya.alembicArchive_open(self, filePathName)

    def close(self):
        return _ZelosForMaya.alembicArchive_close(self)

    def getMetaData(self, keys, values):
        return _ZelosForMaya.alembicArchive_getMetaData(self, keys, values)

    def topObject(self):
        return _ZelosForMaya.alembicArchive_topObject(self)

    def archiveTypeStr(self):
        return _ZelosForMaya.alembicArchive_archiveTypeStr(self)

    def archiveType(self):
        return _ZelosForMaya.alembicArchive_archiveType(self)

    def filePathName(self):
        return _ZelosForMaya.alembicArchive_filePathName(self)

    def abcVersion(self):
        return _ZelosForMaya.alembicArchive_abcVersion(self)

    def abcVersionStr(self):
        return _ZelosForMaya.alembicArchive_abcVersionStr(self)

    def appName(self):
        return _ZelosForMaya.alembicArchive_appName(self)

    def writtenDate(self):
        return _ZelosForMaya.alembicArchive_writtenDate(self)

    def description(self):
        return _ZelosForMaya.alembicArchive_description(self)

    def timeSamplingTypeId(self):
        return _ZelosForMaya.alembicArchive_timeSamplingTypeId(self)

    def timeSamplingTypeStr(self):
        return _ZelosForMaya.alembicArchive_timeSamplingTypeStr(self)

    def numTimeSamples(self):
        return _ZelosForMaya.alembicArchive_numTimeSamples(self)

    def startTime(self):
        return _ZelosForMaya.alembicArchive_startTime(self)

    def endTime(self):
        return _ZelosForMaya.alembicArchive_endTime(self)

    def timeStepSize(self):
        return _ZelosForMaya.alembicArchive_timeStepSize(self)

    def __repr__(self):
        return _ZelosForMaya.alembicArchive___repr__(self)

    def __str__(self):
        return _ZelosForMaya.alembicArchive___str__(self)
    __swig_destroy__ = _ZelosForMaya.delete_alembicArchive
    __del__ = lambda self: None
alembicArchive_swigregister = _ZelosForMaya.alembicArchive_swigregister
alembicArchive_swigregister(alembicArchive)

# This file is compatible with both classic and new-style classes.


