// Copyright (c) 2005 - 2011 NVIDIA Corporation. All rights reserved.
// NVIDIA Corporation and its licensors retain all intellectual property and proprietary 
// rights in and to this software and related documentation and any modifictions thereto.
// Any use, reproduction, disclosure or distribution of this software and related 
// documentation without an express license agreement from NVIDIA Corporation 
// is strictly prohibited.

/*
    Copyright (C) 2007 Feeling Software Inc. ("Feeling")    All rights reserved.
    
	These coded instructions, statements and computer programs (collectively
	the "Data") contain unpublished information proprietary to Feeling Software
	which is protected by Canadian and US federal copyright law and by
	international treaties. The data may not be disclosed to third parties
	or copied or duplicated, in whole or in part, without prior written consent
	of Feeling.
*/

// nxDynCreateLayout.mel
//
// Author: Christian Laforte, Feeling Software Inc. (http://www.feelingsoftware.com)
//
// Much of this code was adapted from Maya's nxDynCreateLayout.mel. This was
// necessary to reduce possible interoperability issues.
//

//  Description:
//      This script contains code to create the layouts for the
//		dynamics option boxes (for Dynamics menus).
//
//  Input Arguments to nxDynCreateLayout():
//		string $parent  -- the layout parent
//		int $theCmd -- the command for which the layout is being created
//		int $isCreate -- create or add mode
//
//  Return Value:
//      None.
//
global int $nxDynIsCreate;
global string $__nxINST_OBJ_LIST_items[];


global proc nxPIcreateDynamicMenuItem( string $list[], string $attrName, string $default )
//
// Description: 
//
// This proc creates the dynamic menus for the particle instancer for each of the 
// instancer parameters (i.e. position, rotation, aim direction, etc).  The format
// of the command it creates is a follows:
//
//    optionMenuGrp -l "Position"      "PositionOM";
//    menuItem      -l "worldPosition" "PositionMenuItem1";
//    menuItem      -l "worldVelocity" "PositionMenuItem2";
//    ...
//
{
	int    $index = 1;
	string $miName;
	string $omName = $attrName + "OM";

    optionMenuGrp -l $attrName -cc ("nxPIupdateDynamicAttributeOptionVar " + $attrName) $omName;

	// Make sure that all attributes have a "None" menu item except
	// for "Position" which always needs to have a valid value.
	//
	if ( $attrName != "Position" ) 
	{
		$miName = $attrName + "MenuItem" + $index;

   		menuItem -l "None" $miName;

		$index++;
	}

	for ( $i = 0; $i < size( $list ); $i++ )
	{
		$miName = $attrName + "MenuItem" + $index;

    	menuItem -l $list[$i] $miName;
		$index++;
    }

	// Select the default item.
	//
    optionMenuGrp -e -value $default $omName;
}


global proc nxDynCreateLayout(string $parent, 
									string $theCmd, int $isCreate)
{
	global int $nxDynIsCreate;
	
	$nxDynIsCreate = $isCreate;

	string $procName = ("nxCreate"+$theCmd+"Layout");

	eval(($procName +" "+$parent));
}

global proc nxCreateParticleRenderCacheLayout( string $parent )
{ 
	text -align left -l " ";
	text -align left -l "Once created, this cache will be used until you disable it.";
	text -align left -l "See Solvers | Edit Oversampling and Cache.";
	text -l " ";

    textFieldGrp -l "Cache Directory"
        particleRenderCacheDirectory;

	//text -l " ";
 	text -align left -l "Directory is subdirectory of current project \"particles\" directory.";
	text -l " ";

    checkBoxGrp -l "Use Render Globals Range" 
		-ncb 1 -l1 ""
        cacheForRenderGlobalsRange;
	//text -l " ";
	text -align left -l "If you check this item, Maya will cache for the current start/end";
	text -align left -l "frames of the default render globals node. Otherwise, Maya will";
	text -align left -l "use the current playback range.";
	text -l " ";
	text -align left -l "Maya will play the scene through the range being cached.";
	text -align left -l "Hit ESC to interrupt the caching operation.";

	text -l " ";
	checkBoxGrp -l "Only Update particles"
		-ncb 1 -l1 ""
        onlyUpdateParticles;
	text -l " ";
 	radioButtonGrp -numberOfRadioButtons 2
 		-label "Particle systems to cache" 
		-labelArray2 "Selected" "All" 
		-select 2 cacheAllParticleSystems;
	text -l " ";
}


global proc nxDynVolumeFieldShapeOptionChoice( string $parent, string $field )
{
	setParent $parent;

    int     $choice = `optionMenuGrp -q -sl ($field+"VolumeFieldTypesOM")`;

    // 
    // None
	// Note - first entry in this enum counts as 1, not 0.
    if ($choice == 1)
    {
	   // Disable all volume control attributes
		if ($field != "volumeAxis")
			checkBoxGrp -e -enable false ($field+"VolumeExclusion");

		floatSliderGrp -e -enable false ($field+"VolumeOffsetX");
		floatSliderGrp -e -enable false ($field+"VolumeOffsetY");
		floatSliderGrp -e -enable false ($field+"VolumeOffsetZ");
		floatSliderGrp -e -enable false ($field+"VolumeSweep");
		floatSliderGrp -e -enable false ($field+"TorusSectionRadius");

		if ($field == "volumeAxis")
		{
			floatSliderGrp -e -enable false ($field+"AlongAxis");
			floatSliderGrp -e -enable false ($field+"AroundAxis");
			floatSliderGrp -e -enable false ($field+"AwayFromAxis");
			floatSliderGrp -e -enable false ($field+"AwayFromCenter");
			//floatSliderGrp -e -enable false ($field+"RandomSpread");
			floatSliderGrp -e -enable false ($field+"DirectionalSpeed");
		}
    }
	else
	{
		if ($field != "volumeAxis")
			checkBoxGrp -e -enable true ($field+"VolumeExclusion");

		floatSliderGrp -e -enable true ($field+"VolumeOffsetX");
		floatSliderGrp -e -enable true ($field+"VolumeOffsetY");
		floatSliderGrp -e -enable true ($field+"VolumeOffsetZ");
		floatSliderGrp -e -enable true ($field+"VolumeSweep");
		floatSliderGrp -e -enable false ($field+"TorusSectionRadius");

	    if ($choice == 2)
			floatSliderGrp -e -enable false ($field+"VolumeSweep");
		else
	    if ($choice == 6)
			floatSliderGrp -e -enable true ($field+"TorusSectionRadius");

		// Enable colume axis speeds according to type.
		//
		if ($field == "volumeAxis")
		{
			floatSliderGrp -e -enable true ($field+"AlongAxis");
			floatSliderGrp -e -enable true ($field+"AroundAxis");
			//floatSliderGrp -e -enable true ($field+"RandomSpread");
			floatSliderGrp -e -enable true ($field+"DirectionalSpeed");

			if ($choice == 2 || $choice == 3)
			{
				floatSliderGrp -e -enable false ($field+"AwayFromAxis");
				floatSliderGrp -e -enable true ($field+"AwayFromCenter");
			}
			else
			{
				floatSliderGrp -e -enable true ($field+"AwayFromAxis");
				floatSliderGrp -e -enable false ($field+"AwayFromCenter");
			}
		}
	}
}


proc nxCreateMaxDistanceControlLayout( string $parent, string $field )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

    separator;

 	checkBoxGrp -l "Use Max Distance" 
		-ann "If false, field ignores max distance and extends without limit (subject to volume)"
 		-ncb 1 -l1 "" 
 		-on1 ("dynMaxDistance "+$parent+" "+ $field + "MaxDistance 1")
 		-of1 ("dynMaxDistance "+$parent+" "+ $field + "MaxDistance 0")
 		($field+"MaxDistCBox");

 	floatSliderGrp -label "Max Distance"
		-ann "Maximum distance at which field has an effect (subject to volume)"
		-field true
		-min 0.0 -max 100.0
		-fmn 0 -fmx $dynMaxFloatField
		-pre 3-step 0.5
		($field+"MaxDistance");
}

proc nxCreateMagAttControlLayout( string $parent, string $field )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

	floatSliderGrp -label "Magnitude"
		-ann "Strength of field force"
		-field true
		-min -100.0 -max 100.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		($field+"Magnitude");

	floatSliderGrp -label "Attenuation"
		-ann "Makes field strength diminish with distance"
		-field true
		-min 0.0 -max 10.0
		-fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		($field+"Attenuation");
}

proc nxCreateVolumeFieldControlLayout( string $parent, string $field )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

    separator;

    //text -align left -l "Volume Control Attributes" 
    //    ($field+"VolumeText");

	// ATTENTION: to remove the help text from the field option boxes,
	// comment out the following two lines.
	//
    text -align center -l "Volume determines the region where the field affects particles/rigid bodies.";

    optionMenuGrp -l "Volume Shape"
		-ann "Determines (with max distance) where field affects objects. If None, only max distance is used."
		-cc ("nxDynVolumeFieldShapeOptionChoice " + $parent + " " + $field)
        ($field+"VolumeFieldTypesOM");
    menuItem -l "None" ($field+"VolumeNone");
    menuItem -l "Cube" ($field+"VolumeCube");
    menuItem -l "Sphere" ($field+"VolumeSphere");
    menuItem -l "Cylinder" ($field+"VolumeCylinder");
    menuItem -l "Cone" ($field+"VolumeCone");
    menuItem -l "Torus" ($field+"VolumeTorus");

	int $enabled = 0;

	if ($field != "volumeAxis")
	{
		checkBoxGrp -l "Volume Exclusion" 
			-ann "Affect objects outside the volume instead of inside"
			-enable $enabled
			-ncb 1 -l1 "" 
			($field+"VolumeExclusion");
	}

    floatSliderGrp -l "Volume Offset X"
		-ann "Move volume away from actual field location"
		-field true 
		-enable $enabled
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        ($field+"VolumeOffsetX");

    floatSliderGrp -l "Volume Offset Y"
		-ann "Move volume away from actual field location"
		-field true 
		-enable $enabled
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        ($field+"VolumeOffsetY");

    floatSliderGrp -l "Volume Offset Z"
		-ann "Move volume away from actual field location"
		-field true 
		-enable $enabled
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        ($field+"VolumeOffsetZ");

    floatSliderGrp -label "Volume Sweep"
		-ann "Change extent of volume, as in modelling"
		-field true 
		-enable $enabled
        -min 0 -max 360
        //-fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 3.6
        ($field+"VolumeSweep");

    floatSliderGrp -label "Section Radius"
		-ann "Change size of torus volume, as in modelling"
		-field true 
		-enable $enabled
        -min 0 -max 1.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        ($field+"TorusSectionRadius");

	// Make initial call to this routine to set up dimming.
	// For the volume axis field we delay doing this until
	// the main colume axis routine, when all the volume axis
	// controls are set up.
	//
	if ($field != "volumeAxis")
		nxDynVolumeFieldShapeOptionChoice( $parent, $field );
}

global proc nxCreateAirLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Air Field Name"
        airName;

    separator;

    //text -align left -l "Predefined Settings"
	//	airPresetsT;

    rowLayout
        -cat 1 "both" 20
        -cat 2 "both" 20
        -cat 3 "both" 20
        -cw 1 140
        -cw 2 140
        -cw 3 140
        -cal 1 "left"
        -nc 3
        airPresetsRow;

    button -l "Wind" -al "center"
		-ann "Set option values to simulate wind"
		-c "nxDynAirPresetsCB 1"
        airWind;
    button -l "Wake" -al "center"
		-ann "Set option values to simulate the wake of a moving object"
		-c "nxDynAirPresetsCB 2"
        airWake;
    button -l "Fan" -al "center"
		-ann "Set option values to simulate a fan"
		-c "nxDynAirPresetsCB 3"
        airFan;

    setParent ..;

    separator airSep2;

    // Attribute Widgets
    //

	// Create our own widgets here because we want different help strings
	//
	string $field = "air";
	floatSliderGrp -label "Magnitude"
		-ann "Strength of air current. Particles will come to match this speed."
		-field true
		-min -100.0 -max 100.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		($field+"Magnitude");

	floatSliderGrp -label "Attenuation"
		-ann "Makes magnitude diminish with distance"
		-field true
		-min 0.0 -max 10.0
		-fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		($field+"Attenuation");

	string $dirAnnString = "Direction of the air flow";
    floatSliderGrp -l "Direction X"
		-ann  $dirAnnString
		-field true 
        -min -1 -max 1
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        airDirectionX;

    floatSliderGrp -l "Direction Y"
		-ann  $dirAnnString
		-field true 
        -min -1 -max 1
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        airDirectionY;

    floatSliderGrp -l "Direction Z"
		-ann  $dirAnnString
		-field true 
        -min -1 -max 1
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        airDirectionZ;

    floatSliderGrp -l "Speed"
		-ann "How fast particles come to match the speed of the air current"
		-field true 
        -min 0 -max 100
        -fmn 0 -fmx $dynMaxFloatField
        -pre 3 -step 1.0
        airSpeed;

    floatSliderGrp -l "Inherit Velocity"
		-ann "Amount of field's own velocity to add to the air flow"
		-field true 
        -min 0 -max 1
        -fmn 0 -fmx $dynMaxFloatField
        -pre 3 -step 0.1
        airInheritVelocity;

    checkBoxGrp -l "Inherit Rotation" 
		-ncb 1 -l1 ""
		-ann "If true, and air field is rotating, air flow undergoes that same rotation"
        airInheritRotation;

    checkBoxGrp -l "Component Only" 
		-ann "If true, apply force only in the air flow direction"
		-ncb 1 -l1 ""
        airComponent;

    separator;

    //text  -align left -l "Spread" 
    //    airSpreadText;

    checkBoxGrp -l "Enable Spread" 
		-ann "Toggle spread on and off"
		-ncb 1 -l1 ""
		-on1 "nxDynAirEnableSpreadCB 1"
		-of1 "nxDynAirEnableSpreadCB 0"
        airEnableSpread;

    floatSliderGrp -l "Spread"
		-ann "Angle from the direction setting within which objects are affected"
		-field true
        -min 0 -max 1
        -pre 3 -step 0.1
        airSpread;

	nxCreateMaxDistanceControlLayout( $parent, "air" );
	nxCreateVolumeFieldControlLayout( $parent, "air" );
}

global proc nxCreateDragLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Drag Name Widget
    //
    textFieldGrp -l "Drag Field Name"
        dragName;

	nxCreateMagAttControlLayout( $parent, "drag" );

	checkBoxGrp -l "Use Direction" 
		-ann "Act only in a particular direction"
		-ncb 1 -l1 "" 
		dragUseDirection;

    string $dirAnnString = "Act in this direction";
	floatSliderGrp -label "X Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		dragDirectionX;

	floatSliderGrp -label "Y Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		dragDirectionY;

 	floatSliderGrp -label "Z Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		dragDirectionZ;

	nxCreateMaxDistanceControlLayout( $parent, "drag" );
	nxCreateVolumeFieldControlLayout( $parent, "drag" );
}


global proc nxCreateGravityLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Gravity Field Name"
        gravityName;

	nxCreateMagAttControlLayout( $parent, "gravity" );

	string $dirAnnString = "Make objects fall in this direction";
	floatSliderGrp -label "X Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		gravityDirectionX;

	floatSliderGrp -label "Y Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		gravityDirectionY;

 	floatSliderGrp -label "Z Direction"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		gravityDirectionZ;

	nxCreateMaxDistanceControlLayout( $parent, "gravity" );
	nxCreateVolumeFieldControlLayout( $parent, "gravity" );

}

global proc nxCreateNewtonLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Newton Field Name"
        newtonName;

	nxCreateMagAttControlLayout( $parent, "newton" );

    floatSliderGrp -l "Min Distance"
		-ann "Field will not act inside this distance. Use this to avoid wild motion for objects very near field location."
		-field true
		-min 0 -max 100
		-fmn 0 -fmx $dynMaxFloatField
		-pre 3-step 0.5
		newtonMinDistance;

	nxCreateMaxDistanceControlLayout( $parent, "newton" );
	nxCreateVolumeFieldControlLayout( $parent, "newton" );
}

global proc nxCreateRadialLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Radial Field Name"
        radialName;

	nxCreateMagAttControlLayout( $parent, "radial" );

	floatSliderGrp -label "Radial Type"
		-ann "If 0, attenuation will decrease magnitude smoothly to 0 at max distance"
		-field true
		-min 0.0 -max 1.0
		radialType;

	nxCreateMaxDistanceControlLayout( $parent, "radial" );
	nxCreateVolumeFieldControlLayout( $parent, "radial" );
}

global proc nxCreateTurbulenceLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Turbulence Field Name"
        turbulenceName;

	nxCreateMagAttControlLayout( $parent, "turbulence" );

	floatSliderGrp -label "Frequency"
		-ann "Greater value causes more frequent irregularities in the motion"
		-field true
		-min 0.0 -max 100.0
		-fmn 0 -fmx $dynMaxFloatField
		-pre 3-step 0.5
		turbulenceFrequency;

	floatSliderGrp -label "Phase X"
		-ann "Influences disruption along the x axis"
		-field true
		-min -50.0 -max 50.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3-step 0.5
		turbulencePhaseX;

	floatSliderGrp -label "Phase Y"
		-ann "Influences disruption along the y axis"
		-field true
		-min -50.0 -max 50.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3-step 0.5
		turbulencePhaseY;

	floatSliderGrp -label "Phase Z"
		-ann "Influences disruption along the z axis"
		-field true
		-min -50.0 -max 50.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		turbulencePhaseZ;

	intSliderGrp -label "Noise Level"
		-ann "Determines number of noise lookups, and thus the amount of irregularity"
		-field true
		-min 0 -max 50
		-fmx $dynMaxFloatField
		//-pre 3 -step 1.0
		turbulenceNoiseLevel;

	floatSliderGrp -label "Noise Ratio"
		-ann "Determines weighting of successive noise lookups"
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		turbulenceNoiseRatio;

	nxCreateMaxDistanceControlLayout( $parent, "turbulence" );
	nxCreateVolumeFieldControlLayout( $parent, "turbulence" );
}

global proc nxCreateUniformLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Uniform Field Name"
        uniformName;

	nxCreateMagAttControlLayout( $parent, "uniform" );

	string $dirAnnString = "Make objects move in this direction";

	floatSliderGrp -label "Direction X"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		uniformDirectionX;

	floatSliderGrp -label "Direction Y"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		uniformDirectionY;

	floatSliderGrp -label "Direction Z"
		-ann $dirAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		uniformDirectionZ;

	nxCreateMaxDistanceControlLayout( $parent, "uniform" );
	nxCreateVolumeFieldControlLayout( $parent, "uniform" );

}

global proc nxCreateVortexLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Vortex Field Name"
        vortexName;

	nxCreateMagAttControlLayout( $parent, "vortex" );

	string $axisAnnString = "Make objects revolve around this axis";
	floatSliderGrp -label "Axis X"
		-ann $axisAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		vortexAxisX;

	floatSliderGrp -label "Axis Y"
		-ann $axisAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		vortexAxisY;

	floatSliderGrp -label "Axis Z"
		-ann $axisAnnString
		-field true
		-min -1.0 -max 1.0
		-fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
		vortexAxisZ;

    separator;

	nxCreateMaxDistanceControlLayout( $parent, "vortex" );
	nxCreateVolumeFieldControlLayout( $parent, "vortex" );

}


global proc nxCreateVolumeAxisLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Name Widget
    //
    textFieldGrp -l "Volume Axis Field Name"
        volumeAxisName;

	nxCreateMagAttControlLayout( $parent, "volumeAxis" );

	nxCreateMaxDistanceControlLayout( $parent, "volumeAxis" );
	nxCreateVolumeFieldControlLayout( $parent, "volumeAxis" );

	separator;

 	checkBoxGrp -l "Invert Attenuation" 
		-ann "If true and attenuation is greater than 0.0, field effect increases with distance."
 		-ncb 1 -l1 "" 
		-enable 1
 		volumeAxisInvertAttenuation;

    floatSliderGrp -label "Away From Center"
		-ann "Make particles move directly away from volume center point"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisAwayFromCenter;

    floatSliderGrp -label "Away From Axis"
		-ann "Make particles move directly away from volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisAwayFromAxis;

    floatSliderGrp -label "Along Axis"
		-ann "Make particles move along volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisAlongAxis;

    floatSliderGrp -label "Around Axis"
		-ann "Make particles rotate around volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisAroundAxis;

    //floatSliderGrp -label "Random Direction"
	//	-ann "Adds to particle motion a component of this length in random direction"
	//	-field true 
    //   -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    volumeAxisRandomSpread;

    floatSliderGrp -label "Directional Speed"
		-ann "Adds to particle motion a component of this length in directionX/Y/Z"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisDirectionalSpeed;

    floatSliderGrp -label "DirectionX"
		-ann "Push particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisDirectionX;

    floatSliderGrp -label "DirectionY"
		-ann "Emit particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisDirectionY;

    floatSliderGrp -label "DirectionZ"
		-ann "Emit particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisDirectionZ;

    floatSliderGrp -label "Turbulence"
		-ann "Simulate an animated turbulent wind field"
		-field true 
        -min 0 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulence;

    floatSliderGrp -label "Turbulence Speed"
		-ann "Rate of change of turbulence over time."
		-field true 
        -min 0 -max 1
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceSpeed;

    floatSliderGrp -label "Turbulence Frequency X"
		-ann "Repeats in X of turbulence function"
		-field true 
        -min 0 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceFrequencyX;

    floatSliderGrp -label "Turbulence Frequency Y"
		-ann "Repeats in Y of turbulence function"
		-field true 
        -min 0 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceFrequencyY;

    floatSliderGrp -label "Turbulence Frequency Z"
		-ann "Repeats in Z of turbulence function"
		-field true 
        -min 0 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceFrequencyZ;

    floatSliderGrp -label "Turbulence Offset X"
		-ann "Translation in X of turbulence function"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceOffsetX;

    floatSliderGrp -label "Turbulence Offset Y"
		-ann "Translation in Y of turbulence function"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceOffsetY;

    floatSliderGrp -label "Turbulence Offset Z"
		-ann "Translation in Z of turbulence function"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisTurbulenceOffsetZ;

    floatSliderGrp -label "Detail Turbulence"
		-ann "The relative intensity of a second higher frequency turbulence."
		-field true 
        -min 0 -max 1
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        volumeAxisDetailTurbulence;


	// initialize the dimming
	//
	nxDynVolumeFieldShapeOptionChoice( $parent, "volumeAxis" );
}

global proc nxCreateEmitterLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;
	global int $nxDynIsCreate;

	setParent $parent;
	
    // Emitter Name Widget
    //
    textFieldGrp -l "Emitter Name"
        emitterName;

	// Basic Emitter Attributes Layout
	//
    frameLayout -l "Basic Emitter Attributes"
        -bv true -lv true -cll true -cl false -mh 4
        emitterBasicFL;
    columnLayout emitterBasicCL;

    // Emitter Types Option Menu
    // 
    optionMenuGrp -l "Emitter Type"
		-cc ("nxDynEmitterOptionChoice " + $parent)
        emitterTypesOM;
    menuItem -l "Omni" emitterOmniPoint;
    menuItem -l "Directional" emitterDirPoint;

	if (!$nxDynIsCreate)
	{
    	menuItem -l "Surface" emitterSurface;
    	menuItem -l "Curve" emitterCurve;

		// If user is switching to add emitter, and previously
		// the user had set the emitterTypesOM to 5 (volume),
		// then it must be set to something valid, so set to omni.
		//
		if (`optionVar -exists emitterTypesOM`  && 
			(`optionVar -query emitterTypesOM` == 5))
		{
			optionVar -intValue emitterTypesOM 1;
		}
	}
	else
	{
	    menuItem -l "Volume" emitterVolume;

		// If user is switching to create emitter, and previously
		// the user had set the emitterTypesOM to 3 (surface) or
		// 4 (curve) in
		// add emitter mode, then it must be reset to something
		// valid, so set it to omni.
		//
		if (`optionVar -exists emitterTypesOM`  && 
			((`optionVar -query emitterTypesOM` == 3) ||
			 (`optionVar -query emitterTypesOM` == 4)))
		{
			optionVar -intValue emitterTypesOM 1;
		}
	}

    floatSliderGrp -l "Rate (Particles/Sec)"
		-ann "Number of particles to create per second"
		-field true 
        -min 0 -max 500
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 10
        emitterRate;

	checkBoxGrp -l "Scale Rate By Object Size" 
		-ann "If false, scaling object doesn't change number of particles emitted"
		-ncb 1 -l1 "" 
		emitterScaleRateByObjectSize;

	checkBoxGrp -l "Need Parent UV (NURBS)" 
		-ann "Record parent (u,v) data. Must also add parentU/parentV to particle shape. NURBS surfaces only."
		-ncb 1 -l1 "" 
		emitterNeedParentUV;

    optionMenuGrp -l "Cycle Emission"
		-ann "Restart random stream for this emitter each frame or after some number of particles"
		-cc ("nxDynEmitterCycleOptionChoice " + $parent)
       emitterCycleOM;
    menuItem -l "None (timeRandom off)" emitterCycleNone;
    menuItem -l "Frame (timeRandom on)" emitterCycleFrame;
    // menuItem -l "By Particle Count" emitterCycleCount;

	intSliderGrp -l "Cycle Interval"
		-ann "Number of frames/particles between restarts of random stream"
		-field true 
        -min 1 -max 100
        -fmx $dynMaxFloatField
		//-pre 3 -step 0.5
        emitterCycleInterval;

    setParent ..; 
    setParent ..; 


	// Direction Layout
	//
    frameLayout -l "Distance/Direction Attributes"
        -bv true -lv true -cll true -cl true -mh 4
        emitterDirectionFL;
    columnLayout emitterDirectionCL;

    floatSliderGrp -l "Max Distance"
		-ann "Emit particles in a sphere bounded by this distance (does not apply to volumes)"
		-field true 
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		-cc nxEmitterMaxDistCB
        emitterMaxDistance;

    floatSliderGrp -l "Min Distance"
		-ann "Emit particles in a sphere bounded by this distance (does not apply to volumes)"
		-field true 
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		-cc nxEmitterMinDistCB
        emitterMinDistance;

    floatSliderGrp -label "DirectionX"
		-ann "Emit particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterDirectionX;

    floatSliderGrp -label "DirectionY"
		-ann "Emit particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterDirectionY;

    floatSliderGrp -label "DirectionZ"
		-ann "Emit particles in this direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterDirectionZ;

    floatSliderGrp -l "Spread"
		-ann "Randomize the directions of particles"
		-field true 
        -min 0 -max 1
		-pre 3 -step 0.1
        emitterSpread;

	setParent ..;
	setParent ..;

    // Basic Emission Speed
    //
    frameLayout -l "Basic Emission Speed Attributes"
        -bv true -lv true -cll true -cl false -mh 4
        emitterSpeedFL;
    columnLayout emitterSpeedCL;

    floatSliderGrp -l "Speed"
		-ann "Make particles move faster. Does not apply to volume emitters"
		-field true
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        emitterSpeed;

    floatSliderGrp -l "Speed Random"
		-ann "Randomize the speeds of particles up to plus or minus one-half this value"
		-field true
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        emitterSpeedRandomRange;

    floatSliderGrp -l "Tangent Speed"
		-ann "Makes particles move randomly along curve or surface"
		-field true
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        emitterTangentSpeed;

    floatSliderGrp -l "Normal Speed"
		-ann "Makes particles move directly away from curve or surface"
		-field true
        -min 0 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        emitterNormalSpeed;

    setParent ..; 
    setParent ..; 

	// Volume Emitter Attributes Layout
	//
	int $collapse = 0;

    frameLayout -l "Volume Emitter Attributes"
        -bv true -lv true -cll true -cl $collapse -mh 4
        emitterVolumeFL;
    columnLayout emitterVolumeCL;

	text -align left -l "Set emitter type to Volume to enable" emitterVolumeEnablePrompt;

    optionMenuGrp -l "Volume Shape"
		-ann "Determines where particles are created (for volume type emitter, only)"
		-cc ("nxSetDimmingForVolumeEmitterAttributes " + $parent)
        emitterVolumeShapeOM;
    menuItem -l "Cube" emitterCube;
    menuItem -l "Sphere" emitterSphere;
    menuItem -l "Cylinder" emitterCylinder;
    menuItem -l "Cone" emitterCone;
    menuItem -l "Torus" emitterTorus;

    floatSliderGrp -label "Volume Offset X"
		-ann "Move volume away from actual emitter location"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterVolumeOffsetX;

    floatSliderGrp -label "Volume Offset Y"
		-ann "Move volume away from actual emitter location"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterVolumeOffsetY;

    floatSliderGrp -label "Volume Offset Z"
		-ann "Move volume away from actual emitter location"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterVolumeOffsetZ;

    floatSliderGrp -label "Volume Sweep"
		-ann "Change extent of volume, as in modelling"
		-field true 
        -min 0 -max 360
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 3.6
        emitterVolumeSweep;

    floatSliderGrp -label "Section Radius"
		-ann "Change size of torus volume, as in modelling"
		-field true 
        -min 0 -max 1.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        emitterTorusSectionRadius;

	string $os = `about -os`;
	if ($os == "irix") {
		// On Irix, the text of the label does not fit without reformatting
		// so give it a slightly nonstandard layout.
		//
		checkBoxGrp -l "Die on Emission Volume Exit"
			-cw2 175 200
			-ncb 1 -l1 "" 
			emitterDieOnExit;
	} else {
		checkBoxGrp -l "Die on Emission Volume Exit"
			-ncb 1 -l1 "" 
			emitterDieOnExit;
	}

	checkBoxGrp -e -ann "If true, particles die on exiting volume. After creating emitter, this attribute can be found in the particle's attribute editor under Emission Attributes."
		emitterDieOnExit;
	
    setParent ..; 
    setParent ..; 


	// Volume Speed Attributes Layout
	//
    frameLayout -l "Volume Speed Attributes"
        -bv true -lv true -cll true -cl $collapse -mh 4
        emitterVolumeSpeedFL;
    columnLayout emitterVolumeSpeedCL;

	text -align left -l "Set emitter type to Volume to enable" emitterVolumeSpeedEnablePrompt;

    floatSliderGrp -label "Away From Center"
		-ann "Make particles move directly away from volume center point"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterAwayFromCenter;

    floatSliderGrp -label "Away From Axis"
		-ann "Make particles move directly away from volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterAwayFromAxis;

    floatSliderGrp -label "Along Axis"
		-ann "Make particles move along volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterAlongAxis;

    floatSliderGrp -label "Around Axis"
		-ann "Make particles rotate around volume axis"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterAroundAxis;

    floatSliderGrp -label "Random Direction"
		-ann "Adds to particle motion a component of this length in random direction"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterRandomSpread;

    floatSliderGrp -label "Directional Speed"
		-ann "Adds to particle motion a component of this length in directionX/Y/Z"
		-field true 
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        emitterDirectionalSpeed;

	checkBoxGrp -l "Scale Speed By Size" 
		-ann "If true, scaling volume changes particle speed"
		-ncb 1 -l1 "" 
		emitterScaleSpeedBySize;

    setParent ..; 
    setParent ..; 
}


global proc nxCreateCollisionLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

	setParent $parent;
	
    // Drag Name Widget
    //
	floatSliderGrp -label "Resilience"
		-field true
		-min 0.0 -max 1.0
		-fmn $dynMinFloatField
		-fmx $dynMaxFloatField
		-pre 3  -step 0.1
		collisionResilience;

	floatSliderGrp -label "Friction"
		-field true
		-min 0.0 -max 1.0
		-fmn $dynMinFloatField
		-fmx $dynMaxFloatField
		-pre 3  -step 0.1
		collisionFriction;

}


global proc nxCreateGoalLayout( string $parent )
{
	setParent $parent;
	
	floatSliderGrp -label "Goal Weight"
		-field true
		-min 0.0 -max 1.0
		-pre 3  -step 0.1
		goalWeight;

    checkBoxGrp -label "Use Transform as Goal" 
		-ncb 1 -l1 ""
        goalUseTransform;
}


global proc nxCreateRigidLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

	setParent $parent;
	
    // Rigid Body Name Widget
    //
    textFieldGrp -l "Rigid Body Name"
        rigidName;

    // Rigid Body Attributes Layout
    //
    frameLayout -l "Rigid Body Attributes"
        -bv true -lv true -cll true -cl false -mh 4
        rigidBodyAttrsF;
    columnLayout rigidBodyAttrsCL;

    // Rigid Body Attributes Widgets
    //
    checkBoxGrp -l ""
        -ncb 1
        -l1 "Active"
        rigidActiveCollision;
    //-l2 "Particle Collision"

    floatSliderGrp -l "Mass"
		-field true
        -min 0 -max 100
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidMass;

    floatSliderGrp -l "Density"
		-field true
        -min 0 -max 100
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidDensity;

	// OverrideMassOrDensity Radio Buttons
    //
    optionMenuGrp -l "Override Mass or Density" rigidOverrideMassOrDensity;
    	menuItem -l "None" overrideMassOrDensityNone;
    	menuItem -l "Mass" overrideMassOrDensityMass;
    	menuItem -l "Density" overrideMassOrDensityDensity;

    checkBoxGrp -l "Set Center of Mass"
        -ncb 1
        -l1 ""
		-onc "nxDynRigidComCB 1"
		-ofc "nxDynRigidComCB 0"
        rigidComCBox;

    floatSliderGrp -label "Center of Mass: X" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidComX;

    floatSliderGrp -label "Y"
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidComY;

    floatSliderGrp -label "Z"
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidComZ;

    floatSliderGrp -l "Static Friction"
		-field true
        -min 0.0 -max 1.0
		-pre 3 -step 0.1
        rigidStatFriction;

    floatSliderGrp -l "Dynamic Friction"
		-field true
        -min 0.0 -max 1.0
		-pre 3 -step 0.1
        rigidDynFriction;

    floatSliderGrp -l "Bounciness"
		-field true
        -min 0.0 -max 2.0
		-pre 3 -step 0.1
        rigidBounciness;

    floatSliderGrp -l "Damping"
		-field true
        -min -2.0 -max 2.0
		-pre 3 -step 0.1
        rigidDamping;

    floatSliderGrp -l "Angular Damping"
		-field true
        -min -2.0 -max 2.0
		-pre 3 -step 0.1
        rigidAngularDamping;

    //floatSliderGrp -label "Impulse: X" 
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulseX;

    //floatSliderGrp -label "Y"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulseY;

    //floatSliderGrp -label "Z"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulseZ;

    //floatSliderGrp -label "Impulse Position: X" 
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulsePosX;

    //floatSliderGrp -label "Y"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulsePosY;

    //floatSliderGrp -label "Z"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidImpulsePosZ;

    //floatSliderGrp -label "Spin Impulse: X" 
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidSpinImpulseX;

    //floatSliderGrp -label "Y"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidSpinImpulseY;

    //floatSliderGrp -label "Z"
	//	-field true
    //    -min -10 -max 10
    //    -fmn $dynMinFloatField -fmx $dynMaxFloatField
	//	-pre 3 -step 0.5
    //    rigidSpinImpulseZ;

	setParent ..;
	setParent ..;

    frameLayout -l "Initial Settings"
        -bv true -lv true -cll true -cl true -mh 4
        rigidInitialSettingsF;
    columnLayout rigidInitialSettingsCL;
    checkBoxGrp -l "Set Initial Position"
        -ncb 1
        -l1 ""
		-onc "nxDynRigidPositionCB 1"
		-ofc "nxDynRigidPositionCB 0"
        rigidPosCBox;

    floatSliderGrp -label "Initial Position: X" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidPosX;

    floatSliderGrp -label "Y" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidPosY;

    floatSliderGrp -label "Z" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidPosZ;

    checkBoxGrp -l "Set Initial Orientation"
        -ncb 1
        -l1 ""
		-onc "nxDynRigidOrientCB 1"
		-ofc "nxDynRigidOrientCB 0"
        rigidOrCBox;

    floatSliderGrp -label "Initial Orientation: X" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidOrX;

    floatSliderGrp -label "Y" 
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidOrY;

    floatSliderGrp -label "Z"
		-field true
        -min -10 -max 10
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidOrZ;

    floatSliderGrp -l "Initial Velocity: X"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidInitVelocityX;

    floatSliderGrp -l "Y"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidInitVelocityY;

    floatSliderGrp -l "Z"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidInitVelocityZ;

    floatSliderGrp -l "Initial Spin: X"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidAngVelocityX;

    floatSliderGrp -l "Y"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidAngVelocityY;

    floatSliderGrp -l "Z"
		-field true
        -min -10.0 -max 10.0
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.5
        rigidAngVelocityZ;

    setParent ..;
    setParent ..;

    frameLayout -l "Performance Attributes"
        -bv true -lv true -cll true -cl true -mh 4
        rigidPerfAttrsF;
    columnLayout rigidPerfAttrsF;

    // Collision Types Radio Buttons
    //
    //optionMenuGrp -l "Stand In" rigidStandInType;
    //	menuItem -l "None" standInNone;
    //	menuItem -l "Cube" standInCube;
    //	menuItem -l "Sphere" standInSphere;

    //intFieldGrp -l "Tessellation Factor"
    //    -nf 1
    //    rigidTesselation;

    //intFieldGrp -l "Collision Layer"
    //    -nf 1
    //    rigidLayer;

	//separator;

    //checkBoxGrp -l "Cache Data"
    //    -ncb 1
    //    -l1 ""
    //    rigidCacheCBox;

}

global proc nxCreateRigidConstraintLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

	setParent $parent;
	
    // Rigid Constraint Name Widget
    //
    textFieldGrp -label "Rigid Constraint Name" -text ""
        rigidConstraintName;

    separator;

    
    frameLayout -l "Rigid Constraint Attributes"
		-bv true -lv true -cll true -cl false -mh 4;
 	columnLayout;
 	   
//    optionMenuGrp -l "Constraint Type" -cc nxDynRigidConstraintType rigidConstraintType;
//   	menuItem -l "none" rigidConstraintTypeNone;
//   	menuItem -l "pin" rigidConstraintTypePin;
//   	menuItem -l "nail" rigidConstraintTypeNail;
//   	menuItem -l "directional Hinge" rigidConstraintTypeDirectionalHinge;
//   	menuItem -l "hinge" rigidConstraintTypeHinge;
//   	menuItem -l "multispring" rigidConstraintTypeMultispring;
//   	menuItem -l "barrier" rigidConstraintTypeBarrier;


 	checkBoxGrp -l "Constrain"
		-ncb 1 -l1 "" 
		rigidConstraintConstrainCBox;

    checkBoxGrp -l "Interpenetrate"
        -ncb 1
        -l1 ""
        rigidConstraintInterCBox;
        
    //checkBoxGrp -l "Show Axis"
    //    -ncb 1
    //    -l1 ""
    //    rigidConstraintShowAxisCBox;
        
    checkBoxGrp -l "World Space Frames"
        -ncb 1
        -l1 ""
        rigidConstraintInWorldspace;

	separator;
	
	optionMenuGrp -l "Transform" -cc nxDynRigidConstraintTransformCB rigidConstraintTransformType;
	   	menuItem -l "automatic" rigidConstraintTransformAutomatic;
	   	menuItem -l "user-specified" rigidConstraintTransformUser;

 	floatFieldGrp -numberOfFields 3 -label "Position1" 
 		-value1 0.0 -value2 0.0 -value3 0.0 rigidConstraintPos1;
 		
  	floatFieldGrp -numberOfFields 3 -label "Orientation1" 
 		-value1 0.0 -value2 0.0 -value3 0.0 rigidConstraintOrient1;   
 		
 	separator;
 	checkBoxGrp -l "Same Position"
		-ncb 1 -l1 "" -cc nxDynRigidConstraintSamePos rigidConstraintSamePosCBox;	
  	floatFieldGrp -numberOfFields 3 -label "Position2" 
 		-value1 0.0 -value2 0.0 -value3 0.0 rigidConstraintPos2;
 		
  	checkBoxGrp -l "Same Orientation"
		-ncb 1 -l1 "" -cc nxDynRigidConstraintSameOrient rigidConstraintSameOrientCBox;	
  	floatFieldGrp -numberOfFields 3 -label "Orientation2" 
 		-value1 0.0 -value2 0.0 -value3 0.0 rigidConstraintOrient2;
 		
 	//separator;
    //optionMenuGrp -l "Affects Other Frame"
	//	-cc nxDynRigidConstraintAffectsOtherFrame
    //    rigidConstraintAffectsOtherFrame;
   	//menuItem -l "none" rigidConstraintAffectsOtherFrameNone;
   	//menuItem -l "override" rigidConstraintAffectsOtherFrameOverride;   	
    //menuItem -l "relative" rigidConstraintAffectsOtherFrameRelative;  		 		  	    	 						
    
    setParent ..;   
    setParent ..;   

    
    // Force and Torque 
    //
    frameLayout -l "Force and Torque"
        -bv true -lv true -cll true -cl true -mh 4;
 	columnLayout;
 	
 	//floatFieldGrp -numberOfFields 3 -label "Force" rigidConstraintForce;
 	
  	checkBoxGrp -l "Breakable Force"
		-cc nxDynRigidConstraintBreakableForce -ncb 1 -l1 "" rigidConstraintBreakableForceCBox;	
	floatSliderGrp -label "Max Force"
		-field true
		-min 0.0 -max 2000.0
		-pre 3 -step 0.1
		rigidConstraintMaxForce;
	
	checkBoxGrp -l "Breakable Torque"
		-cc nxDynRigidConstraintBreakableTorque -ncb 1 -l1 "" rigidConstraintBreakableTorqueCBox;	
	floatSliderGrp -label "Max Torque"
		-field true
		-min 0.0 -max 2000.0
		-pre 3 -step 0.1
		rigidConstraintMaxTorque;		
				 	
    setParent ..;   
    setParent ..;  
    
    // Degrees of Freedom and Limits 
    //
    frameLayout -l "Degrees of Freedom and Limits"
        -bv true -lv true -cll true -cl false -mh 4;
 	columnLayout;
 	
    optionMenuGrp -l "Motion X"
		-cc nxDynRigidConstraintMotion
        rigidConstraintMotionX;
   	menuItem -l "locked" rigidConstraintMotionXLocked;
   	menuItem -l "limited" rigidConstraintMotionXLimited;
   	menuItem -l "free" rigidConstraintMotionXFree;

    optionMenuGrp -l "Motion Y"
		-cc nxDynRigidConstraintMotion
        rigidConstraintMotionY;
   	menuItem -l "locked" rigidConstraintMotionYLocked;
   	menuItem -l "limited" rigidConstraintMotionYLimited;
   	menuItem -l "free" rigidConstraintMotionYFree;
   	
   	optionMenuGrp -l "Motion Z"
		-cc nxDynRigidConstraintMotion
        rigidConstraintMotionZ;
   	menuItem -l "locked" rigidConstraintMotionZLocked;
   	menuItem -l "limited" rigidConstraintMotionZLimited;
   	menuItem -l "free" rigidConstraintMotionZFree;
   	
   	   	   	
	floatSliderGrp -label "Linear Limit Value"
		-field true
		-min 0.0 -max 100.0
		-pre 3 -step 0.1
		rigidConstraintLinearLimitValue;	
 
 	floatSliderGrp -label "Linear Limit Restitution"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintLinearLimitRestitution;
		
	floatSliderGrp -label "Linear Limit Spring"
		-field true
		-min 0.0 -max 1000.0
		-pre 3 -step 0.1
		rigidConstraintLinearLimitSpring;
		
	floatSliderGrp -label "Linear Limit Damping"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintLinearLimitDamping;
		
	separator;
	
	optionMenuGrp -l "Motion Twist"
		-cc nxDynRigidConstraintMotionTwist
        rigidConstraintMotionTwist;
   	menuItem -l "locked" rigidConstraintMotionTwistLocked;	
   	menuItem -l "limited" rigidConstraintMotionTwistLimited;
   	menuItem -l "free" rigidConstraintMotionTwistFree;
   	
   	floatSliderGrp -label "Twist Low Limit Value"
		-field true
		-min -180.0 -max 180.0
		-pre 3 -step 0.1
		rigidConstraintTwistLowLimitValue;	
 
   	floatSliderGrp -label "Twist Low Limit Restitution"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintTwistLowLimitRestitution;	
	
	floatSliderGrp -label "Twist Low Limit Spring"
		-field true
		-min 0.0 -max 100.0
		-pre 3 -step 0.1
		rigidConstraintTwistLowLimitSpring;	
		
	floatSliderGrp -label "Twist Low Limit Damping"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintTwistLowLimitDamping;		

   	floatSliderGrp -label "Twist High Limit Value"
		-field true
		-min -180.0 -max 180.0
		-pre 3 -step 0.1
		rigidConstraintTwistHighLimitValue;	
 
   	floatSliderGrp -label "Twist High Limit Restitution"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintTwistHighLimitRestitution;	
	
	floatSliderGrp -label "Twist High Limit Spring"
		-field true
		-min 0.0 -max 100.0
		-pre 3 -step 0.1
		rigidConstraintTwistHighLimitSpring;	
		
	floatSliderGrp -label "Twist High Limit Damping"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintTwistHighLimitDamping;	
		
	separator;
	
	optionMenuGrp -l "Motion Swing1"
		-cc nxDynRigidConstraintMotionSwing1
        rigidConstraintMotionSwing1;
   	menuItem -l "locked" rigidConstraintMotionSwing1Locked;	
   	menuItem -l "limited" rigidConstraintMotionSwing1Limited;
   	menuItem -l "free" rigidConstraintMotionSwing1Free;
   	
   	floatSliderGrp -label "Swing1 Limit Value"
		-field true
		-min -180.0 -max 180.0
		-pre 3 -step 0.1
		rigidConstraintSwing1LimitValue;	
 
   	floatSliderGrp -label "Swing1 Limit Restitution"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintSwing1LimitRestitution;	
	
	floatSliderGrp -label "Swing1 Limit Spring"
		-field true
		-min 0.0 -max 100.0
		-pre 3 -step 0.1
		rigidConstraintSwing1LimitSpring;	
		
	floatSliderGrp -label "Swing1 Limit Damping"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintSwing1LimitDamping;			

	separator;
	
	optionMenuGrp -l "Motion Swing2"
		-cc nxDynRigidConstraintMotionSwing2
        rigidConstraintMotionSwing2;
   	menuItem -l "locked" rigidConstraintMotionSwing2Locked;	
   	menuItem -l "limited" rigidConstraintMotionSwing2Limited;
   	menuItem -l "free" rigidConstraintMotionSwing2Free;
   	
   	floatSliderGrp -label "Swing2 Limit Value"
		-field true
		-min -180.0 -max 180.0
		-pre 3 -step 0.1
		rigidConstraintSwing2LimitValue;	
 
   	floatSliderGrp -label "Swing2 Limit Restitution"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintSwing2LimitRestitution;	
	
	floatSliderGrp -label "Swing2 Limit Spring"
		-field true
		-min 0.0 -max 100.0
		-pre 3 -step 0.1
		rigidConstraintSwing2LimitSpring;	
		
	floatSliderGrp -label "Swing2 Limit Damping"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		rigidConstraintSwing2LimitDamping;			
									
    setParent ..;   
    setParent ..;  
    
	    
}

global proc nxCreateSoftLayout( string $parent )
{

	setParent $parent;
	
    // Name Widget
    //

	// How to make soft Body
    optionMenuGrp -l "Creation Options" -cc nxSoftCBoxCB softCreationOption;
    	menuItem -l "Make Soft" softConvert;
    	menuItem -l "Duplicate, Make Copy Soft" softDuplicate;
    	menuItem -l "Duplicate, Make Original Soft" softConvertAndDuplicate;

	checkBoxGrp -label "Duplicate Input Graph" 
		-numberOfCheckBoxes 1 -label1 "" 
		softHistory;

	checkBoxGrp -l "Hide Non-Soft Object" 
		-ncb 1 -l1 "" 
		softHide;

	checkBoxGrp -l "Make Non-Soft a Goal" 
		-ncb 1 -l1 "" 
		-onc "nxSoftGoalCB 1"
		-ofc "nxSoftGoalCB 0"
		softGoal;

	floatSliderGrp -label "Weight"
		-field true
		-min 0.0 -max 1.0
		-pre 3 -step 0.1
		softWeight;
}


global proc nxCreateConstrainLayout( string $parent )
{
    global float $dynMaxFloatField;
	global float $dynMinFloatField;

	setParent $parent;
	
    // Constrain Name Widget
    //
    textFieldGrp -l "Constraint Name"
        constrainName;

    separator constrainTypeSep;

    optionMenuGrp -l "Constraint Type:"
		-cc nxDynConstraintTypeCB
        constrainTypesOM;
   	menuItem -l "Nail" constrainNail;
   	menuItem -l "Pin" constrainPin;
   	menuItem -l "Hinge" constrainHinge;
   	menuItem -l "Spring" constrainSpring;
   	menuItem -l "Barrier" constrainBarrier;

    // Constrain Interpenetrate Checkbox
    //
    checkBoxGrp -l "Interpenetrate"
        -ncb 1
        -l1 ""
        constrainInterCB;

    separator constrainPosSep;

    checkBoxGrp -l "Set Initial Position"
        -ncb 1
        -l1 ""
		-onc "nxDynConstraintPositionCB 1"
		-ofc "nxDynConstraintPositionCB 0"
        constrainPosCBox;

    text -l "Initial Position" constrainPosT;

    // Constrain Position Sliders
    //
    floatSliderGrp -label "X "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainPosX;

    floatSliderGrp -label "Y "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainPosY;

    floatSliderGrp -label "Z "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainPosZ;

    text -l "Initial Orientation" constrainOrientT;

    // Constrain Orientation Sliders
    //
    floatSliderGrp -label "X "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainOrientX;

    floatSliderGrp -label "Y "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainOrientY;

    floatSliderGrp -label "Z "
		-field true
        -min -100 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 1
        constrainOrientZ;

    // Spring Attribute Sliders
    //
    frameLayout -l "Spring Attributes"
        -bv true -lv true -cll true -cl true -mh 4
        constraintSpringFL;
    columnLayout constraintSpringCL;

    floatSliderGrp -label "Stiffness"
		-field true
        -min 0 -max 10
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        constrainSpringStiffness;

    floatSliderGrp -label "Damping"
		-field true
        -min 0 -max 5
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        constrainSpringDamping;

    checkBoxGrp -l "Set Spring Rest Length"
        -ncb 1
        -l1 ""
		-onc "nxDynConstrainSpringRestLengthCB 1"
		-ofc "nxDynConstrainSpringRestLengthCB 0"
        constrainSpringRestLengthCBox;

    floatSliderGrp -label "Rest Length"
		-field true
        -min 0 -max 100
        -fmn $dynMinFloatField -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        constrainSpringRestLength;

    setParent ..;
    setParent ..;

}


global proc nxCreateSpringLayout( string $parent )
{
    // These globals contain the lowest min and highest max for the
    // dynamics float fields.
    //
    global float $dynMaxFloatField;
    global float $dynMinFloatField;

	setParent $parent;

	columnLayout -adj true 
		-columnAttach "both" 5 
		-columnOffset "both" 5; 
	
    // Name Widget
    //
    textFieldGrp -l "Spring Name"
        springName;

	frameLayout -l "Spring Methods" -labelAlign "bottom"
		-collapsable true -collapse false;
	columnLayout;

    checkBoxGrp -l "Add to Existing Spring" 
		-ncb 1 -l1 ""
		-on1 "nxSpringAddCB 1"
		-of1 "nxSpringAddCB 0"
        springAdd;

    checkBoxGrp -l "Don't Duplicate Springs" 
		-ncb 1 -l1 "" 
        springNoDuplicate;

    checkBoxGrp -l "Set Exclusive" 
		-ncb 1 -l1 ""
        springExclusive;

    optionMenuGrp -l "Creation Method:"
		-cc ("nxDynSpringOptionChoiceCB " + $parent)
        springMethodsOM;
    menuItem -l "MinMax" springMinMax;
    menuItem -l "All" springAll;
    menuItem -l "Wireframe" springWirefram;

    floatSliderGrp -l "Min Distance"
		-field true
        -min 0 -max 100
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		-cc nxSpringMinDistCB
        springMinDistance;

    floatSliderGrp -l "Max Distance"
		-field true
        -min 0 -max 100
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.5
		-cc nxSpringMaxDistCB
        springMaxDistance;

    intFieldGrp -l "Wire Walk Length"
        -nf 1
        springWireWalkLength;

	setParent ..;
	setParent ..;

	frameLayout -l "Spring Attributes" -labelAlign "bottom"
		-collapsable true -collapse false;
	columnLayout;

    checkBoxGrp -l "Use Per-Spring Stiffness"
		-ncb 1 -l1 ""
		-on1 "nxSpringUseStiffnessPSCB 1"
		-of1 "nxSpringUseStiffnessPSCB 0"
        springUseStiffnessPS;

    checkBoxGrp -l "Use Per-Spring Damping" 
		-ncb 1 -l1 ""
		-on1 "nxSpringUseDampingPSCB 1 "
		-of1 "nxSpringUseDampingPSCB 0"
        springUseDampingPS;

    checkBoxGrp -l "Use Per-Spring RestLength" 
		-ncb 1 -l1 ""
		-on1 "nxSpringUseRestLengthPSCB 1"
		-of1 "nxSpringUseRestLengthPSCB 0"
        springUseRestLengthPS;

    floatSliderGrp -label "Stiffness"
		-field true
        -min 0 -max 20
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        springStiffness;

    floatSliderGrp -l "Damping"
		-field true
        -min 0 -max 20
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        springDamp;

    floatSliderGrp -l "Rest Length"
		-field true
        -min 0 -max 20
        -fmn 0 -fmx $dynMaxFloatField
		-pre 3 -step 0.1
        springRestLength;

    floatSliderGrp -l "End1 Weight"
		-field true
        -min 0 -max 1
		-pre 3 -step 0.1
        springStartForceWeight;

    floatSliderGrp -l "End2 Weight"
		-field true
        -min 0 -max 1
		-pre 3 -step 0.1
        springEndForceWeight;
	setParent ..;
	setParent ..;
	setParent ..;
	setParent ..;
}


global proc string nxGetSelectedParticle()
{
	string $selectedParticle = "";
	string $relativeList[];
	string $selectionList[] = `ls -sl`;

	int $listCount = size( $selectionList );

	for ( $i = 0; $i < $listCount; $i++ )
	{
    	string $typeList[] = `ls -st $selectionList[$i]`;

    	if ( $typeList[1] == "particle" )
		{
			$selectedParticle = $typeList[0];
			break;
		}
    	else if ( $typeList[1] == "transform" )
		{
		    $relativeList = `listRelatives -fullPath $selectionList[$i]`;

			for ( $j = 0; $j < size( $relativeList ); $j++ )
			{
			    $typeList = `ls -st $relativeList[$j]`;

    			if ( $typeList[1] == "particle" )
				{
					$selectedParticle = $typeList[0];
					break;
				}
			}
		}
	}

	return $selectedParticle;
}


// ===================   INTERNAL CONTROL CALLBACKS ===============
//
//
global proc nxDynAirEnableSpreadCB(int $isSpreadOn)
{
    if ($isSpreadOn)
        floatSliderGrp -e -enable true airSpread;
    else
        floatSliderGrp -e -enable false airSpread;
}

global proc nxDynAirPresetsCB(int $whichPreset)
{
    if ($whichPreset == 1)
    {
		// Wind
		//
        floatSliderGrp -e -v 0.0 airInheritVelocity;
        checkBoxGrp -e -v1 1 airInheritRotation;
        checkBoxGrp -e -v1 0 airComponent;
        checkBoxGrp -e -v1 0 airEnableSpread;
        floatSliderGrp -e -enable false airSpread;
        floatSliderGrp -e -v 0.5 airSpeed;
		floatSliderGrp -e -v 5.0 airMagnitude;
        checkBoxGrp -e -v1 1 airMaxDistCBox;
		floatSliderGrp -e -v 20.0 -enable true airMaxDistance;
    }
    else if ($whichPreset == 2)
    {
		// Wake
		//
        floatSliderGrp -e -v 1.0 airInheritVelocity;
        checkBoxGrp -e -v1 0 airInheritRotation;
        checkBoxGrp -e -v1 1 airComponent;
        checkBoxGrp -e -v1 0 airEnableSpread;
        floatSliderGrp -e -enable false airSpread;
        floatSliderGrp -e -v 0.5 airSpeed;
        floatSliderGrp -e -v 0.0 airMagnitude;
        checkBoxGrp -e -v1 1 airMaxDistCBox;
		floatSliderGrp -e -v 2.0 -enable true airMaxDistance;
    }
    else if ($whichPreset == 3)
    {
		// Fan
		//
        floatSliderGrp -e -v 1.0 airInheritVelocity;
        checkBoxGrp -e -v1 1 airInheritRotation;
        checkBoxGrp -e -v1 0 airComponent;
        checkBoxGrp -e -v1 1 airEnableSpread;
        floatSliderGrp -e -enable true airSpread;
        floatSliderGrp -e -v 0.5 airSpread;
        floatSliderGrp -e -v 0.5 airSpeed;
        floatSliderGrp -e -v 5.0 airMagnitude;
        checkBoxGrp -e -v1 1 airMaxDistCBox;
		floatSliderGrp -e -v 20.0 -enable true airMaxDistance;
	}
}

global proc nxDynEmitterCycleOptionChoice(string $parent)
{
	setParent $parent;
    int     $choice = `optionMenuGrp -q -sl emitterCycleOM`;

	if ($choice == 1)  // no cycling
	{
		intSliderGrp -e -enable false emitterCycleInterval;
	}
	else
	{
		intSliderGrp -e -enable true emitterCycleInterval;
	}
}

global proc nxSetDimmingForVolumeEmitterAttributes( string $parent )
{
	global int $nxDynIsCreate;

	setParent $parent;

    int     $type = `optionMenuGrp -q -sl emitterTypesOM`;
	
	// If we are doing create, then emitterTypesOM has values 1,2,3,
	// and value 3 is volume.  
	//
	if (($nxDynIsCreate) && ($type == 3))
		$type = 5;

	if ($type != 5)
	{
		// Non-volume type. Disable all volume controls.
		//
		optionMenuGrp -e -enable false emitterVolumeShapeOM;
		floatSliderGrp  -e -enable false emitterVolumeOffsetX;
		floatSliderGrp  -e -enable false emitterVolumeOffsetY;
		floatSliderGrp  -e -enable false emitterVolumeOffsetZ;
		floatSliderGrp  -e -enable false emitterVolumeSweep;
		floatSliderGrp  -e -enable false emitterTorusSectionRadius;
		floatSliderGrp  -e -enable false emitterAwayFromCenter;
		floatSliderGrp  -e -enable false emitterAwayFromAxis;
		floatSliderGrp  -e -enable false emitterAlongAxis;
		floatSliderGrp  -e -enable false emitterAroundAxis;
		floatSliderGrp  -e -enable false emitterRandomSpread;
		floatSliderGrp  -e -enable false emitterDirectionalSpeed;
		checkBoxGrp  -e -enable false emitterDieOnExit;
		checkBoxGrp  -e -enable false emitterScaleSpeedBySize;

		text -e -enable true emitterVolumeEnablePrompt;
		text -e -enable true emitterVolumeSpeedEnablePrompt;
	}
	else
	{	
		// Volume type.
		// Set all volume controls to defaults, first
		//
		optionMenuGrp -e -enable true emitterVolumeShapeOM;
		floatSliderGrp  -e -enable true emitterVolumeOffsetX;
		floatSliderGrp  -e -enable true emitterVolumeOffsetY;
		floatSliderGrp  -e -enable true emitterVolumeOffsetZ;
		floatSliderGrp  -e -enable true emitterVolumeSweep;
		floatSliderGrp  -e -enable false emitterTorusSectionRadius;
		floatSliderGrp  -e -enable true emitterAwayFromCenter;
		floatSliderGrp  -e -enable true emitterAwayFromAxis;
		floatSliderGrp  -e -enable true emitterAlongAxis;
		floatSliderGrp  -e -enable true emitterAroundAxis;
		floatSliderGrp  -e -enable true emitterRandomSpread;
		floatSliderGrp  -e -enable true emitterDirectionalSpeed;
		checkBoxGrp  -e -enable true emitterDieOnExit;
		checkBoxGrp  -e -enable true emitterScaleSpeedBySize;
		text -e -enable false emitterVolumeEnablePrompt;
		text -e -enable false emitterVolumeSpeedEnablePrompt;

	    int     $volShape = `optionMenuGrp -q -sl emitterVolumeShapeOM`;

		// Now disable selected ones as necessary
		//
		if ($volShape == 1)  // cube
		{
			floatSliderGrp  -e -enable false emitterAwayFromAxis;
			floatSliderGrp  -e -enable false emitterVolumeSweep;
		}
		else
		if ($volShape == 2)  // sphere
		{
			floatSliderGrp  -e -enable false emitterAwayFromAxis;
		}
		else
		if ($volShape == 3)  // cylinder
		{
			floatSliderGrp  -e -enable false emitterAwayFromCenter;
		}
		else
		if ($volShape == 4)  // cone
		{
			floatSliderGrp  -e -enable false emitterAwayFromCenter;
		}
		else
		if ($volShape == 5)  // torus
		{
			floatSliderGrp  -e -enable false emitterAwayFromCenter;
			floatSliderGrp  -e -enable true emitterTorusSectionRadius;
		}
	}
}

global proc nxDynEmitterOptionChoice(string $parent)
{
	setParent $parent;
	global int $nxDynIsCreate;

    int     $choice = `optionMenuGrp -q -sl emitterTypesOM`;

	// If we are doing create, then emitterTypesOM has values 1,2,3,
	// and value 3 is volume.  
	//
	if (($nxDynIsCreate) && ($choice == 3))
		$choice = 5;

	floatSliderGrp -e -enable true emitterSpeed;

    // Omni Point
    //
    if ($choice == 1)
    {
	   checkBoxGrp -e -enable false emitterNeedParentUV;
	   checkBoxGrp -e -enable false emitterScaleRateByObjectSize;
	   floatSliderGrp -e -enable true emitterMinDistance;
	   floatSliderGrp -e -enable true emitterMaxDistance;
	   floatSliderGrp -e -enable false emitterDirectionX;
	   floatSliderGrp -e -enable false emitterDirectionY;
	   floatSliderGrp -e -enable false emitterDirectionZ;
	   floatSliderGrp -e -enable false emitterSpread;
	   floatSliderGrp -e -enable false emitterNormalSpeed;
	   floatSliderGrp -e -enable false emitterTangentSpeed;
    }
    // Directional Point
    //
    else if ($choice == 2)
    {
	   checkBoxGrp -e -enable false emitterNeedParentUV;
	   checkBoxGrp -e -enable false emitterScaleRateByObjectSize;
	   floatSliderGrp -e -enable true emitterMinDistance;
	   floatSliderGrp -e -enable true emitterMaxDistance;
	   floatSliderGrp -e -enable true emitterDirectionX;
	   floatSliderGrp -e -enable true emitterDirectionY;
	   floatSliderGrp -e -enable true emitterDirectionZ;
	   floatSliderGrp -e -enable true emitterSpread;
	   floatSliderGrp -e -enable false emitterNormalSpeed;
	   floatSliderGrp -e -enable false emitterTangentSpeed;
    }
    // Surface
    //
    else if ($choice == 3)
    {
	   checkBoxGrp -e -enable true emitterNeedParentUV;
	   checkBoxGrp -e -enable true emitterScaleRateByObjectSize;
	   floatSliderGrp -e -enable true emitterMinDistance;
	   floatSliderGrp -e -enable true emitterMaxDistance;
	   floatSliderGrp -e -enable false emitterDirectionX;
	   floatSliderGrp -e -enable false emitterDirectionY;
	   floatSliderGrp -e -enable false emitterDirectionZ;
	   floatSliderGrp -e -enable false emitterSpread;
	   floatSliderGrp -e -enable true emitterNormalSpeed;
	   floatSliderGrp -e -enable true emitterTangentSpeed;
    }
    // Curve
    //
    else if ($choice == 4)
    {
	   checkBoxGrp -e -enable false emitterNeedParentUV;
	   checkBoxGrp -e -enable true emitterScaleRateByObjectSize;
	   floatSliderGrp -e -enable true emitterMinDistance;
	   floatSliderGrp -e -enable true emitterMaxDistance;
	   floatSliderGrp -e -enable true emitterDirectionX;
	   floatSliderGrp -e -enable true emitterDirectionY;
	   floatSliderGrp -e -enable true emitterDirectionZ;
	   floatSliderGrp -e -enable true emitterSpread;
	   floatSliderGrp -e -enable true emitterNormalSpeed;
	   floatSliderGrp -e -enable true emitterTangentSpeed;
    }
	// Volume
	//
    else if ($choice == 5)
    {
	   floatSliderGrp -e -enable false emitterSpeed;
	   checkBoxGrp -e -enable false emitterNeedParentUV;
	   checkBoxGrp -e -enable true emitterScaleRateByObjectSize;
	   floatSliderGrp -e -enable false emitterMinDistance;
	   floatSliderGrp -e -enable false emitterMaxDistance;
	   floatSliderGrp -e -enable true emitterDirectionX;
	   floatSliderGrp -e -enable true emitterDirectionY;
	   floatSliderGrp -e -enable true emitterDirectionZ;
	   floatSliderGrp -e -enable false emitterSpread;
	   floatSliderGrp -e -enable false emitterNormalSpeed;
	   floatSliderGrp -e -enable false emitterTangentSpeed;
    }

	nxSetDimmingForVolumeEmitterAttributes( $parent );
}

global proc nxEmitterMaxDistCB()
{

    // If the user sets max distance less than min distance,
    // reset min distance to be the same as max distance.
    //
    float $minDist = `floatSliderGrp -q -v  emitterMinDistance`;
    float $maxDist = `floatSliderGrp -q -v  emitterMaxDistance`;

    if ($maxDist < $minDist)
    {
        floatSliderGrp -e -v $maxDist emitterMinDistance;
    }
}

global proc nxEmitterMinDistCB()
{
    // If the user sets min distance greater than max distance,
    // reset max distance to be the same as min distance.
    //
    float $minDist = `floatSliderGrp -q -v  emitterMinDistance`;
    float $maxDist = `floatSliderGrp -q -v  emitterMaxDistance`;

    if ($minDist > $maxDist)
    {
        floatSliderGrp -e -v $minDist emitterMaxDistance;
    }
}

global proc nxDynRigidPositionCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true rigidPosX;
		floatSliderGrp -e -enable true rigidPosY;
		floatSliderGrp -e -enable true rigidPosZ;
	}
	else
	{
		floatSliderGrp -e -enable false rigidPosX;
		floatSliderGrp -e -enable false rigidPosY;
		floatSliderGrp -e -enable false rigidPosZ;
	}
}


global proc nxDynRigidOrientCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true rigidOrX;
		floatSliderGrp -e -enable true rigidOrY;
		floatSliderGrp -e -enable true rigidOrZ;
	}
	else
	{
		floatSliderGrp -e -enable false rigidOrX;
		floatSliderGrp -e -enable false rigidOrY;
		floatSliderGrp -e -enable false rigidOrZ;
	}
}


global proc nxDynRigidComCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true rigidComX;
		floatSliderGrp -e -enable true rigidComY;
		floatSliderGrp -e -enable true rigidComZ;
	}
	else
	{
		floatSliderGrp -e -enable false rigidComX;
		floatSliderGrp -e -enable false rigidComY;
		floatSliderGrp -e -enable false rigidComZ;
	}
}


global proc nxDynRigidConstraintEnableInterpenetrate(int $enable)
{
    if ($enable)
	{
		checkBoxGrp -e -enable true rigidConstraintInterCBox;
	}
    else
	{
		checkBoxGrp -e -enable false rigidConstraintInterCBox;
	}
}

//global proc nxDynRigidConstraintEnableTriadVisisble(int $enable)
//{
//    if ($enable)
//	{
//		checkBoxGrp -e -enable true rigidConstraintShowAxisCBox;
//	}
//    else
//	{
//		checkBoxGrp -e -enable false rigidConstraintShowAxisCBox;
//	}
//}


global proc nxDynRigidConstraintType()
{
    int $option = `optionMenuGrp -q -sl rigidConstraintType`;

    switch ($option) {
		// None
		//
        case 1:
            break;
		// Pin
		//
        case 2:
            //nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(1);
			//nxDynRigidConstraintOrientationCB(0);
            break;

		// Nail
		//
        case 3:            
			//nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(0);
			//nxDynRigidConstraintOrientationCB(0);
            break;
		
		// Directional Hinge
		//
        case 4:            
			//nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(1);
			//nxDynRigidConstraintOrientationCB(1);
            break;

		// Hinge
		//
        case 5:
            //nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(1);
			//nxDynRigidConstraintOrientationCB(1);
            break;

		// Multispring
		//
        case 6:
            //nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(1);
			//nxDynRigidConstraintOrientationCB(0);
            break;

		// Barrier
		//
        case 7:
            //nxDynRigidConstraintEnableSpring(0);
            nxDynRigidConstraintEnableInterpenetrate(0);
			//nxDynRigidConstraintOrientationCB(1);
            break;
        default:
            break;
    }
}

//global proc nxDynRigidConstraintAffectsOtherFrame()
//{
//}

global proc nxDynRigidConstraintMotion()
{
	int $choiceX = `optionMenuGrp -q -sl rigidConstraintMotionX`;
	int $choiceY = `optionMenuGrp -q -sl rigidConstraintMotionY`;
	int $choiceZ = `optionMenuGrp -q -sl rigidConstraintMotionZ`;
	
	if($choiceX > 1 || $choiceY > 1 || $choiceZ > 1){
		floatSliderGrp -e -en 1 rigidConstraintLinearLimitValue;
		floatSliderGrp -e -en 1 rigidConstraintLinearLimitRestitution;
		floatSliderGrp -e -en 1 rigidConstraintLinearLimitSpring;	
		floatSliderGrp -e -en 1 rigidConstraintLinearLimitDamping;

	}else{
		floatSliderGrp -e -en 0 rigidConstraintLinearLimitValue;
		floatSliderGrp -e -en 0 rigidConstraintLinearLimitRestitution;
		floatSliderGrp -e -en 0 rigidConstraintLinearLimitSpring;	
		floatSliderGrp -e -en 0 rigidConstraintLinearLimitDamping;
	}
}


global proc nxDynRigidConstraintMotionTwist()
{

	int $choice = `optionMenuGrp -q -sl rigidConstraintMotionTwist`;
	if($choice > 1){
		floatSliderGrp -e -en 1 rigidConstraintTwistLowLimitValue;
		floatSliderGrp -e -en 1 rigidConstraintTwistLowLimitRestitution;
		floatSliderGrp -e -en 1 rigidConstraintTwistLowLimitSpring;	
		floatSliderGrp -e -en 1 rigidConstraintTwistLowLimitDamping;	
		floatSliderGrp -e -en 1 rigidConstraintTwistHighLimitValue;
		floatSliderGrp -e -en 1 rigidConstraintTwistHighLimitRestitution;
		floatSliderGrp -e -en 1 rigidConstraintTwistHighLimitSpring;	
		floatSliderGrp -e -en 1 rigidConstraintTwistHighLimitDamping;	
	}else{
		floatSliderGrp -e -en 0 rigidConstraintTwistLowLimitValue;
		floatSliderGrp -e -en 0 rigidConstraintTwistLowLimitRestitution;
		floatSliderGrp -e -en 0 rigidConstraintTwistLowLimitSpring;	
		floatSliderGrp -e -en 0 rigidConstraintTwistLowLimitDamping;	
		floatSliderGrp -e -en 0 rigidConstraintTwistHighLimitValue;
		floatSliderGrp -e -en 0 rigidConstraintTwistHighLimitRestitution;
		floatSliderGrp -e -en 0 rigidConstraintTwistHighLimitSpring;	
		floatSliderGrp -e -en 0 rigidConstraintTwistHighLimitDamping;
			
	}
		
}

global proc nxDynRigidConstraintMotionSwing1()
{
	int $choice = `optionMenuGrp -q -sl rigidConstraintMotionSwing1`;
	if($choice > 1){
		floatSliderGrp -e -en 1 rigidConstraintSwing1LimitValue;
		floatSliderGrp -e -en 1 rigidConstraintSwing1LimitRestitution;
		floatSliderGrp -e -en 1 rigidConstraintSwing1LimitSpring;	
		floatSliderGrp -e -en 1 rigidConstraintSwing1LimitDamping;
	}else{
		floatSliderGrp -e -en 0 rigidConstraintSwing1LimitValue;
		floatSliderGrp -e -en 0 rigidConstraintSwing1LimitRestitution;
		floatSliderGrp -e -en 0 rigidConstraintSwing1LimitSpring;	
		floatSliderGrp -e -en 0 rigidConstraintSwing1LimitDamping;
	}
}

global proc nxDynRigidConstraintMotionSwing2()
{
	int $choice = `optionMenuGrp -q -sl rigidConstraintMotionSwing2`;
	if($choice > 1){
		floatSliderGrp -e -en 1 rigidConstraintSwing2LimitValue;
		floatSliderGrp -e -en 1 rigidConstraintSwing2LimitRestitution;
		floatSliderGrp -e -en 1 rigidConstraintSwing2LimitSpring;	
		floatSliderGrp -e -en 1 rigidConstraintSwing2LimitDamping;
	}else{
		floatSliderGrp -e -en 0 rigidConstraintSwing2LimitValue;
		floatSliderGrp -e -en 0 rigidConstraintSwing2LimitRestitution;
		floatSliderGrp -e -en 0 rigidConstraintSwing2LimitSpring;	
		floatSliderGrp -e -en 0 rigidConstraintSwing2LimitDamping;
	}

}

global proc nxDynRigidConstraintBreakableForce(){
	int $choice = `checkBoxGrp -q -v1 rigidConstraintBreakableForceCBox`;
	if($choice > 0){
		floatSliderGrp -e -en 1 rigidConstraintMaxForce;

	}else{
		floatSliderGrp -e -en 0 rigidConstraintMaxForce;

	}
}

global proc nxDynRigidConstraintBreakableTorque(){
	int $choice = `checkBoxGrp -q -v1 rigidConstraintBreakableTorqueCBox`;
	if($choice > 0){
		floatSliderGrp -e -en 1 rigidConstraintMaxTorque;

	}else{
		floatSliderGrp -e -en 0 rigidConstraintMaxTorque;

	}
}

global proc nxDynRigidConstraintSamePos(){
	int $choice = `checkBoxGrp -q -v1 rigidConstraintSamePosCBox`;
	if($choice > 0){
		floatFieldGrp -e -en 0 rigidConstraintPos2;

	}else{
		floatFieldGrp -e -en 1 rigidConstraintPos2;

	}
}

global proc nxDynRigidConstraintSameOrient(){
	int $choice = `checkBoxGrp -q -v1 rigidConstraintSameOrientCBox`;
	if($choice > 0){
		floatFieldGrp -e -en 0 rigidConstraintOrient2;

	}else{
		floatFieldGrp -e -en 1 rigidConstraintOrient2;

	}
}


global proc nxDynRigidConstraintEnableSpring( int $enable)
{
    if ($enable)
	{
		floatSliderGrp -e -enable true rigidConstraintSpringStiffness;
		floatSliderGrp -e -enable true rigidConstraintSpringDamping;
		checkBoxGrp    -e -enable true rigidConstraintSpringRestLengthCBox;

		if (`optionVar -q rigidConstraintSpringRestLengthCBox`)
			floatSliderGrp -e -enable true rigidConstraintSpringRestLength;
		else
			floatSliderGrp -e -enable false rigidConstraintSpringRestLength;
	}
    else
	{
		floatSliderGrp -e -enable false rigidConstraintSpringStiffness;
		floatSliderGrp -e -enable false rigidConstraintSpringDamping;
		floatSliderGrp -e -enable false rigidConstraintSpringRestLength;
		checkBoxGrp -e -enable false rigidConstraintSpringRestLengthCBox;
	}
}


global proc nxDynRigidConstraintOrientationCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true rigidConstraintOrientX;
		floatSliderGrp -e -enable true rigidConstraintOrientY;
		floatSliderGrp -e -enable true rigidConstraintOrientZ;
	}
	else
	{
		floatSliderGrp -e -enable false rigidConstraintOrientX;
		floatSliderGrp -e -enable false rigidConstraintOrientY;
		floatSliderGrp -e -enable false rigidConstraintOrientZ;
	}
}

global proc nxDynRigidConstraintTransformCB()
{
	int $type = `optionMenuGrp -q -sl rigidConstraintTransformType`;

	if ($type == 2) // user-specified
	{
		floatFieldGrp -e -enable true rigidConstraintPos1;
		checkBoxGrp -e -enable true rigidConstraintSamePosCBox;
		
		floatFieldGrp -e -enable true rigidConstraintOrient1;
		checkBoxGrp -e -enable true rigidConstraintSameOrientCBox;
		
	}
	else	// "center"
	{
		floatFieldGrp -e -enable false rigidConstraintPos1;
		checkBoxGrp -e -enable false rigidConstraintSamePosCBox;
		
		floatFieldGrp -e -enable false rigidConstraintOrient1;
		checkBoxGrp -e -enable false rigidConstraintSameOrientCBox;
	}
}

global proc nxDynRigidConstraintSpringRestLengthCB(int $isOn)
{
	if ($isOn)
		floatSliderGrp -e -enable true rigidConstraintSpringRestLength;
	else
		floatSliderGrp -e -enable false rigidConstraintSpringRestLength;
}



global proc nxDynConstraintEnableInterpenetrate(int $enable)
{
    if ($enable)
	{
		checkBoxGrp -e -enable true constraintInterCB;
	}
    else
	{
		checkBoxGrp -e -enable false constraintInterCB;
	}
}

global proc nxDynConstraintEnableSpring( int $enable)
{
    if ($enable)
	{
		floatSliderGrp -e -enable true constrainSpringStiffness;
		floatSliderGrp -e -enable true constrainSpringDamping;
		checkBoxGrp    -e -enable true constrainSpringRestLengthCBox;

		if (`optionVar -q constrainSpringRestLengthCBox`)
			floatSliderGrp -e -enable true constrainSpringRestLength;
		else
			floatSliderGrp -e -enable false constrainSpringRestLength;
	}
    else
	{
		floatSliderGrp -e -enable false constrainSpringStiffness;
		floatSliderGrp -e -enable false constrainSpringDamping;
		floatSliderGrp -e -enable false constrainSpringRestLength;
		checkBoxGrp -e -enable false constrainSpringRestLengthCBox;
	}
}


global proc nxDynConstraintOrientationCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true constrainOrientX;
		floatSliderGrp -e -enable true constrainOrientY;
		floatSliderGrp -e -enable true constrainOrientZ;
	}
	else
	{
		floatSliderGrp -e -enable false constrainOrientX;
		floatSliderGrp -e -enable false constrainOrientY;
		floatSliderGrp -e -enable false constrainOrientZ;
	}
}

global proc nxDynConstraintTypeCB()
{
    int     $option = `optionMenuGrp -q -sl constrainTypesOM`;

    switch ($option) {
		// Nail
		//
        case 1:
            nxDynConstraintEnableSpring(0);
            nxDynConstraintEnableInterpenetrate(0);
			nxDynConstraintOrientationCB(0);
            break;

		// Pin
		//
        case 2:
            nxDynConstraintEnableSpring(0);
            nxDynConstraintEnableInterpenetrate(1);
			nxDynConstraintOrientationCB(0);
            break;
		
		// Hinge
		//
        case 3:
            nxDynConstraintEnableSpring(0);
            nxDynConstraintEnableInterpenetrate(1);
			nxDynConstraintOrientationCB(1);
            break;

		// Spring
		//
        case 4:
            nxDynConstraintEnableSpring(1);
            nxDynConstraintEnableInterpenetrate(1);
			nxDynConstraintOrientationCB(0);
            break;

		// Barrier
		//
        case 5:
            nxDynConstraintEnableSpring(0);
            nxDynConstraintEnableInterpenetrate(0);
			nxDynConstraintOrientationCB(1);
            break;
        default:
            break;
    }
}

global proc nxDynConstraintPositionCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable true constrainPosX;
		floatSliderGrp -e -enable true constrainPosY;
		floatSliderGrp -e -enable true constrainPosZ;
	}
	else
	{
		floatSliderGrp -e -enable false constrainPosX;
		floatSliderGrp -e -enable false constrainPosY;
		floatSliderGrp -e -enable false constrainPosZ;
	}
}


global proc nxDynConstrainSpringRestLengthCB(int $isOn)
{
	if ($isOn)
		floatSliderGrp -e -enable true constrainSpringRestLength;
	else
		floatSliderGrp -e -enable false constrainSpringRestLength;
}


global proc nxSoftGoalCB(int $isOn)
//
// Description:
//   set the goal slider control enabled iff the weight option
// box is checked.
{
	if ($isOn)
		floatSliderGrp -e -enable true softWeight;
	else
		floatSliderGrp -e -enable false softWeight;

	// nxSoftCBoxCB();
}



global proc nxSoftCBoxCB()
//
// Description:
//   enable/disable the option box choices which are revelant only
// for the duplicate creation options.
{
	int $isDup = `optionMenuGrp -q -sl softCreationOption`;

	if ($isDup != 1)
	{
		// One of the duplicate choices is on, so enable
		// the duplicate options.
		
		checkBoxGrp -e -enable true softHide;
		checkBoxGrp -e -enable true softGoal;
		checkBoxGrp -e -enable true softHistory;
	}
	else
	{
		// Convert in place; turn duplicate options off.
		//
		checkBoxGrp -e -enable false softHide;
		checkBoxGrp -e -enable false softGoal;
		checkBoxGrp -e -enable false softHistory;
	}
}


global proc nxDynSpringOptionChoiceCB(string $parent)
{
	setParent $parent;

    int     $choice = `optionMenuGrp -q -sl springMethodsOM`;

	if ($choice == 1)
	{
		floatSliderGrp -e -enable true springMinDistance;
		floatSliderGrp -e -enable true springMaxDistance;
	}
	else
	{
		floatSliderGrp -e -enable false springMinDistance;
		floatSliderGrp -e -enable false springMaxDistance;
	}
	if ($choice == 3)
	{
		checkBoxGrp -e -enable false springExclusive;
	}
	else
	{
		checkBoxGrp -e -enable true springExclusive;
	}
}


global proc nxSpringAddCB(int $isOn)
{
	// If the user is adding springs to an existing spring object, don't
	// allow to "edit" the attribute values.
	//
	if ($isOn)
	{
    	checkBoxGrp -e -enable false springUseStiffnessPS;
    	checkBoxGrp -e -enable false springUseDampingPS;
    	checkBoxGrp -e -enable false springUseRestLengthPS;

		floatSliderGrp -e -enable false springStiffness;
		floatSliderGrp -e -enable false springDamp;
		floatSliderGrp -e -enable false springRestLength;
        floatSliderGrp -e -enable false springStartForceWeight;
        floatSliderGrp -e -enable false springEndForceWeight;
	}
	else
	{
    	checkBoxGrp -e -enable true springUseStiffnessPS;
    	checkBoxGrp -e -enable true springUseDampingPS;
    	checkBoxGrp -e -enable true springUseRestLengthPS;

        floatSliderGrp -e -enable true springStartForceWeight;
        floatSliderGrp -e -enable true springEndForceWeight;

		if (`checkBoxGrp -q -v1 springUseStiffnessPS`)
			floatSliderGrp -e -enable false springStiffness;
		else
			floatSliderGrp -e -enable true springStiffness;

		if (`checkBoxGrp -q -v1 springUseDampingPS`)
			floatSliderGrp -e -enable false springDamp;
		else
			floatSliderGrp -e -enable true springDamp;

		if (`checkBoxGrp -q -v1 springUseRestLengthPS`)
			floatSliderGrp -e -enable false springRestLength;
		else
			floatSliderGrp -e -enable true springRestLength;
	}
}


global proc nxSpringUseStiffnessPSCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable false springStiffness;
	}
	else
	{
		floatSliderGrp -e -enable true springStiffness;
	}
}

global proc nxSpringUseDampingPSCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable false springDamp;
	}
	else
	{
		floatSliderGrp -e -enable true springDamp;
	}
}

global proc nxSpringUseRestLengthPSCB(int $isOn)
{
	if ($isOn)
	{
		floatSliderGrp -e -enable false springRestLength;
	}
	else
	{
		floatSliderGrp -e -enable true springRestLength;
	}
}


global proc nxSpringMaxDistCB()
{
    // If the user sets max distance less than min distance,
    // reset min distance to be the same as max distance.
    //
    float $minDist = `floatSliderGrp -q -v  springMinDistance`;
    float $maxDist = `floatSliderGrp -q -v  springMaxDistance`;

    if ($maxDist < $minDist)
    {
        floatSliderGrp -e -v $maxDist springMinDistance;
    }
}


global proc nxSpringMinDistCB()
{
    // If the user sets min distance greater than max distance,
    // reset max distance to be the same as min distance.
    //
    float $minDist = `floatSliderGrp -q -v  springMinDistance`;
    float $maxDist = `floatSliderGrp -q -v  springMaxDistance`;

    if ($minDist > $maxDist)
    {
        floatSliderGrp -e -v $minDist springMaxDistance;
    }
}

// ===================   UTILITY PROCS ===============
//
//

global proc nxPIwatchCycleOption()
{
	if ((`optionMenuGrp -q -exists PIautoCycleOM` == 0) ||
		(`optionMenuGrp -q -exists  ObjectIndexOM` == 0))
		return;

	string $cycleValue = `optionMenuGrp -q -v PIautoCycleOM`;
	if( $cycleValue == "None" )
	{
		optionMenuGrp -e -enable 1 ObjectIndexOM;
		optionMenuGrp -e -enable 0 CycleStartObjectOM;
		optionMenuGrp -e -enable 0 AgeOM;
		optionMenuGrp -e -enable 0 PIautoCycleStepUnitsOM;
		floatSliderGrp -e -enable 0 PIautoCycleStepSize;
	}
	else
	{
		optionMenuGrp -e -enable 0 ObjectIndexOM;
		optionMenuGrp -e -enable 1 CycleStartObjectOM;
		optionMenuGrp -e -enable 1 AgeOM;
		optionMenuGrp -e -enable 1 PIautoCycleStepUnitsOM;
		floatSliderGrp -e -enable 1 PIautoCycleStepSize;
	}
}

global proc nxPIcreateDynamicAttrOptionMenus() 
{
	string $particleName = `optionMenuGrp -q -v PIparticleObjectOM`; 

	if ( size( $particleName ) > 0 ) 
	{
		string $vectorList[];
		string $doubleList[];

    	int $displayAll = `checkBoxGrp -q -v1 PIdisplayAllTypes`;

		if ( $displayAll == 0 )
		{
			$vectorList = listParticleAttrs( $particleName, "vectorArray", 0 );
			$doubleList = listParticleAttrs( $particleName, "doubleArray", 0 );
		}
		else
		{
			$vectorList = listParticleAttrs( $particleName, "vectorArray", 1 );
			$doubleList = listParticleAttrs( $particleName, "doubleArray", 1 );
		}

	separator -style "out" PIparticleInstancerGeneralSeparator;
	frameLayout
		-collapse 0
		-collapsable 0
		-borderVisible 0
		-label "General Options"
		PIparticleInstancerGeneralFrame;
		columnLayout PIparticleInstancerGeneralFrameColumn;
		nxPIcreateDynamicMenuItem( $vectorList, "Position",     "worldPosition" );
		nxPIcreateDynamicMenuItem( $vectorList, "Scale",        "None" );
		nxPIcreateDynamicMenuItem( $vectorList, "Shear",        "None" );
		nxPIcreateDynamicMenuItem( $doubleList, "Visibility", 	  "None" );
		nxPIcreateDynamicMenuItem( $doubleList, "ObjectIndex",	  "None" );

		setParent ..;
		setParent ..;
	
		separator -style "out" PIparticleInstancerRotationSeparator;
		frameLayout
			-collapse 0
			-collapsable 0
			-borderVisible 0
			-label "Rotation Options"
			PIparticleInstancerRotationFrame;
			columnLayout PIparticleInstancerRotationFrameColumn;
			nxPIcreateDynamicMenuItem( $doubleList, "RotationType",   "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "Rotation",     "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "AimDirection", "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "AimPosition",  "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "AimAxis",      "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "AimUpAxis",    "None" );
			nxPIcreateDynamicMenuItem( $vectorList, "AimWorldUp",   "None" );
	
		setParent ..;
		setParent ..;
	
		separator -style "out" PIparticleInstancerCycleSeparator;
		frameLayout
			-collapse 0
			-collapsable 0
			-borderVisible 0
			-label "Cycle Options"
			PIdynParticleInstancerCycleFrame;
			columnLayout PIdynParticleInstancerCycleFrameColumn;
			nxPIcreateDynamicMenuItem( $doubleList, "CycleStartObject", "None" );
			nxPIcreateDynamicMenuItem( $doubleList, "Age", 			  "age" );
	
		setParent ..;
		setParent ..;
	}

	nxPIwatchCycleOption();
}


global proc int nxPIcreateParticleObjectList() 
{
	int    $i;
    string $particleList[] = `ls -typ particle`;
	int    $count          = size( $particleList );


    if ( $count == 0 )
    {
    	menuItem -l "No Particle Shapes Found" PInoParticleShapes;
    }
    else
    {
		for ( $i = 0; $i < $count; $i++ )
		{
	    	menuItem -l $particleList[$i] $particleList[$i];
	    }
	}

	return $count;
}


global proc __nxINST_OBJ_LIST_fillItemList()
{
    global string $__nxINST_OBJ_LIST_items[];
    int $selectedIndices[] = `textScrollList -q -selectIndexedItem PIselectObjectList`;
    textScrollList -e -visible 0 PIselectObjectList;
    textScrollList -e -removeAll PIselectObjectList;

    int $i;
    if( size($__nxINST_OBJ_LIST_items) == 0 )
    {
        textScrollList -e -append " " -width 380 PIselectObjectList;
    }
    else
    {
        for( $i = 0; $i < size($__nxINST_OBJ_LIST_items); $i ++ )
        {
            string $newText = ($i + ": " + $__nxINST_OBJ_LIST_items[$i]);
            textScrollList -e -append $newText -width 380 PIselectObjectList;
        }
    }

    int $firstSelected = $selectedIndices[0];
    if( $firstSelected > `textScrollList -q -numberOfRows PIselectObjectList` )
    {
        int $selectThis = $firstSelected - `textScrollList -q -numberOfRows PIselectObjectList`;
        textScrollList -e -showIndexedItem $selectThis PIselectObjectList;
    }
    textScrollList -e -visible 1 PIselectObjectList;
}

global proc __nxINST_OBJ_LIST_addItemsFromList( string $list[] )
{
    global string $__nxINST_OBJ_LIST_items[];

    int $i;
    for( $i = 0; $i < size($list); $i ++ )
    {
		if( isValidInstancedObject( $list[$i] ) == 1 )
		{
	        int $found = 0;
	        int $j;
	        for( $j = 0; $j < size($__nxINST_OBJ_LIST_items); $j ++ )
	        {
	            if( $list[$i] == $__nxINST_OBJ_LIST_items[$j] )
	            {
	                $found = 1;
	            }
	        }
	        if( $found == 0 )
	        {
	            $__nxINST_OBJ_LIST_items[size($__nxINST_OBJ_LIST_items)] = $list[$i];
	        }
		}
    }

    __nxINST_OBJ_LIST_fillItemList();
}

global proc __nxINST_OBJ_LIST_addItemsFromSelectionList()
{
    global string $__nxINST_OBJ_LIST_items[];

    string $selectedItems[] = `ls -sl`;
    __nxINST_OBJ_LIST_addItemsFromList( $selectedItems );
}

global proc nxCreateParticleInstancerLayout( string $parent )
{
	setParent $parent;

    textFieldGrp -l "Particle Instancer Name" particleInstancerName;

    optionMenuGrp -l "Rotation Units" PIrotationUnitsOM;

   		menuItem -l "Degrees"   PIdegreesRotationUnits;
   		menuItem -l "Radians"   PIradiansRotationUnits;

    optionMenuGrp -l "Rotation Order" PIrotationOrderOM;

   		menuItem -l "XYZ" PIxyzRotationOrder;
   		menuItem -l "XZY" PIxzyRotationOrder;
   		menuItem -l "YXZ" PIyxzRotationOrder;
   		menuItem -l "YZX" PIyzxRotationOrder;
   		menuItem -l "ZXY" PIzxyRotationOrder;
   		menuItem -l "ZYX" PIzyxRotationOrder;

    optionMenuGrp -l "Level Of Detail" PIlevelOfDetailOM;

   		menuItem -l "Geometry"      PIgeometryLevelOfDetail;
   		menuItem -l "BoundingBox"   PIboundingBoxLevelOfDetail;
   		menuItem -l "BoundingBoxes" PIboundingBoxesLevelOfDetail;

    // Cycle Types 
    // 
    optionMenuGrp -l "Cycle" -cc "nxPIwatchCycleOption()" PIautoCycleOM;

	    menuItem -l "None" 		 PIautoCycleNone;
		menuItem -l "Sequential" PIautoCycleSequential;

	// Cycle Step Units option menu.
	//
    optionMenuGrp -l "Cycle Step Units" PIautoCycleStepUnitsOM;

	    menuItem -l "Frames"  PIautoCycleStepFrames;
		menuItem -l "Seconds" PIautoCycleStepSeconds;

    // Cycle Step Size float/slider.
    //
    floatSliderGrp -l "Cycle Step Size"
		-field true 
		-min 0 -max 10
        -fmn 0 -fmx 10000
		-pre 1 -step 0.5
        PIautoCycleStepSize;

    separator particleInstancerSep1;

    global string $__nxINST_OBJ_LIST_items[];
    clear($__nxINST_OBJ_LIST_items);

    rowColumnLayout
        -columnWidth 1 400
        -numberOfColumns 1
        -columnAttach 1 "both" 0
        mainLayout;

    text
        -label "Instanced Objects"
        mainListLabel;

    textScrollList
        -width 390
        -height 94
        -allowMultiSelection true
        -removeAll
        -annotation "List of the instanced objects and their indices into the instancer."
        PIselectObjectList;

    rowColumnLayout
        -numberOfColumns 4
        -columnWidth 1 100
        -columnWidth 2 100
        -columnWidth 3 100
        -columnWidth 4 100
        -columnAlign 1 "center"
        -columnAlign 2 "center"
        -columnAlign 3 "center"
        -columnAlign 4 "center"
        -columnAttach 1 "both" 0
        -columnAttach 2 "both" 0
        -columnAttach 3 "both" 0
        -columnAttach 4 "both" 0
        -rowAttach 1 "top" 2
        -rowAttach 2 "top" 2
        -rowAttach 3 "top" 2
        -rowAttach 4 "top" 2
        existingItemButtonLayout;

    button
        -label "Add Selection"
        -width 90
        -command "__nxINST_OBJ_LIST_addItemsFromSelectionList()"
        -annotation "Add selected object(s) to the list."
        addItemsButton;

    button
        -label "Remove Items"
        -width 90
        -command "__nxINST_OBJ_LIST_removeSelectedItems()"
        -annotation "Remove the highlighted item(s) from the list."
        removeItemsButton;

    button
        -label "Move Up"
        -width 90
        -command "__nxINST_OBJ_LIST_moveSelectedItemsUp()"
        -annotation "Move highlighted item(s) higher in the list."
        moveItemsUpButton;


    button
        -label "Move Down"
        -width 90
        -command "__nxINST_OBJ_LIST_moveSelectedItemsDown()"
        -annotation "Move highlighted item(s) lower in the list."
        moveItemsDownButton;

	__nxINST_OBJ_LIST_addItemsFromSelectionList();

	setParent ..;
	setParent ..;

    separator particleInstancerSep2;

    checkBoxGrp -l "Allow All Data Types" 
		-ncb 1 -v1 0 -l1 ""
		-cc ("nxPIparticleOptionChanged " + $parent)
        PIdisplayAllTypes;

    // Particle Object Dynamic Option Menu.
    //
    optionMenuGrp -l "Particle Object To Instance" 
		-cc ("nxPIparticleOptionChanged " + $parent) PIparticleObjectOM;

	// We only want to create the dynamic attribute list if we have 
	// a valid particle shape.
	//
	if ( nxPIcreateParticleObjectList() > 0 )
	{
		nxPIcreateDynamicAttrOptionMenus();
	}

    setParent ..;
}


global proc nxPIeditDynamicMenuItem( string $list[], string $attrName, int $validHeadSize )
{
	int    $index = 1;
	string $miName;
	string $omName = $attrName + "OM";

    optionMenuGrp -e -l $attrName $omName;

    string $omList[] = `optionMenuGrp -q -itemListShort $omName`;

	int $currentSize = size( $omList ); 
	int $listSize    = size( $list ); 

	setParent  $omName;
    string $menuParent = `setParent -q`;
	string $parent = `setParent -m ($menuParent + "|OptionMenu")`;

	// Make sure that all attributes have a "None" menu item except
	// for "Position" which always needs to have a valid value.
	//
	int $offset = 0;
	if ( $attrName != "Position" ) 
	{
	    $listSize += 1;
		$offset = 1;
	}

	if ( $listSize > $currentSize )
	{
		//
		// Add more entries if needed.
		//
		for ( $i = $currentSize; $i < $listSize; $i++ )
		{
			$index  = $i + 1;
			$miName = $attrName + "MenuItem" + $index;
   			menuItem -l $list[$i] $miName;
		}
	}
	else if ( $listSize < $currentSize )
	{
		//
		// Remove extra entries.
		//
		for ( $i = $listSize; $i < $currentSize; $i++ )
		{
		    deleteUI $omList[$i];
		}
	}

	$index = $validHeadSize+$offset+1;
	int $listIndex = $validHeadSize;
	
    for ( $i = $validHeadSize + $offset; $i < $listSize; $i++ )
    {
        $miName = $attrName + "MenuItem" + $index;

        menuItem -e -l $list[$listIndex] $miName;
        $index++;
        $listIndex++;
    }
}


global proc nxPIeditDynamicAttrOptionMenus() 
{
	string $particleName = `optionMenuGrp -q -v PIparticleObjectOM`; 

	if ( size( $particleName ) > 0 )
    {
		string $vectorList[];
		string $doubleList[];

    	int $displayAll = `checkBoxGrp -q -v1 PIdisplayAllTypes`;

		if ( $displayAll == 0 )
		{
			$vectorList = listParticleAttrs( $particleName, "vectorArray", 0 );
			$doubleList = listParticleAttrs( $particleName, "doubleArray", 0 );
		}
		else
		{
			$vectorList = listParticleAttrs( $particleName, "vectorArray", 1 );
			$doubleList = listParticleAttrs( $particleName, "doubleArray", 1 );
		}

		nxPIeditDynamicMenuItem( $vectorList, "Position", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "Scale", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "Shear", 9 );
		nxPIeditDynamicMenuItem( $doubleList, "Visibility", 4 );
		nxPIeditDynamicMenuItem( $doubleList, "ObjectIndex", 4 );
		nxPIeditDynamicMenuItem( $doubleList, "RotationType", 4 );
		nxPIeditDynamicMenuItem( $vectorList, "Rotation", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "AimDirection", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "AimPosition", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "AimAxis", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "AimUpAxis", 9 );
		nxPIeditDynamicMenuItem( $vectorList, "AimWorldUp", 9 );
		nxPIeditDynamicMenuItem( $doubleList, "CycleStartObject", 4 );
		nxPIeditDynamicMenuItem( $doubleList, "Age", 4 );
    }
}


global proc nxPIupdateDynamicAttributeOptionVar( string $name )
{
    string $omName = $name + "OM";

    if ( `optionMenuGrp -q -exists $omName` == 1 )
    {
        optionVar -stringValue $omName `optionMenuGrp -q -v $omName`;
    }
}



global proc nxPIcreateSelectedObjectList() 
{
	int    $i;
    string $transformList[] = `ls -typ transform`;
	
	for ( $i = 0; $i < size( $transformList ); $i++ )
	{
    	textScrollList -e -a $transformList[$i] PIselectObjectList;
	}
}


global proc nxPIparticleOptionChanged( string $parent ) 
{
	setParent $parent;
	string    $particleList[] = `ls -typ particle`;

	// We only want to create the dynamic attribute list if we have 
	// a valid particle shape.
	//
	if ( size( $particleList ) > 0 )
	{
		nxPIeditDynamicAttrOptionMenus();
	}

	// Update the values of the selected menu item.  We need to do this
	// because the indices may have changed if the number of attributes
	// is not the same for each particle shape.
	//
	setAllDynamicAttributeOptionMenuGrp();
}


global proc __nxINST_OBJ_LIST_setItemList( string $list[] )
{
    global string $__nxINST_OBJ_LIST_items[];
    $__nxINST_OBJ_LIST_items = $list;
    __nxINST_OBJ_LIST_fillItemList();
}

global proc __nxINST_OBJ_LIST_removeSelectedItems()
{
    global string $__nxINST_OBJ_LIST_items[];

    int $selectedIndices[] = `textScrollList -q -selectIndexedItem PIselectObjectList`;
    if( size($selectedIndices) == 0 )
        return;

    int $i;
    int $j;
    string $temp[];
    for( $i = 0; $i < size($__nxINST_OBJ_LIST_items); $i ++ )
    {
        int $found = 0;
        for( $j = 0; $j < size($selectedIndices); $j ++ )
        {
            if( $selectedIndices[$j] == $i+1 )
                $found = 1;
        }

        if( $found == 0 )
        {
            $temp[size($temp)] = $__nxINST_OBJ_LIST_items[$i];
        }
    }
    $__nxINST_OBJ_LIST_items = $temp;

    __nxINST_OBJ_LIST_fillItemList();
}

global proc __nxINST_OBJ_LIST_moveSelectedItemsUp()
{
    global string $__nxINST_OBJ_LIST_items[];
    int $selectedIndices[] = `textScrollList -q -selectIndexedItem PIselectObjectList`;
    if( size($selectedIndices) == 0 )
        return;

    int $newSelectedIndices[] = $selectedIndices;

    int $i;
    for( $i = 0; $i < size($selectedIndices); $i ++ )
    {
        int $si = $selectedIndices[$i] - 1;
        if( $si > $i )
        {
            string $temp = $__nxINST_OBJ_LIST_items[$si];
            $__nxINST_OBJ_LIST_items[$si] = $__nxINST_OBJ_LIST_items[$si-1];
            $__nxINST_OBJ_LIST_items[$si-1] = $temp;
            $newSelectedIndices[$i] = $si;
        }
    }

    __nxINST_OBJ_LIST_fillItemList();
    for( $i = 0; $i < size($newSelectedIndices); $i ++ )
    {
        textScrollList -e -selectIndexedItem $newSelectedIndices[$i] PIselectObjectList;
    }

    int $firstSelected = $newSelectedIndices[0];
    if( $firstSelected > `textScrollList -q -numberOfRows PIselectObjectList` )
    {
        int $selectThis = $firstSelected - `textScrollList -q -numberOfRows PIselectObjectList` + 1;
        textScrollList -e -showIndexedItem $selectThis  PIselectObjectList;
    }
}


global proc __nxINST_OBJ_LIST_moveSelectedItemsDown()
{
    global string $__nxINST_OBJ_LIST_items[];
    int $selectedIndices[] = `textScrollList -q -selectIndexedItem PIselectObjectList`;
    if( size($selectedIndices) == 0 )
        return;

    int $newSelectedIndices[] = $selectedIndices;

    int $i;
    for( $i = size($selectedIndices) - 1; $i >= 0 ; $i -- )
    {
        int $si = $selectedIndices[$i] - 1;
        int $ni = size($__nxINST_OBJ_LIST_items) - ( size($selectedIndices) - $i );
        if( $si < $ni )
        {
            string $temp = $__nxINST_OBJ_LIST_items[$si];
            $__nxINST_OBJ_LIST_items[$si] = $__nxINST_OBJ_LIST_items[$si+1];
            $__nxINST_OBJ_LIST_items[$si+1] = $temp;
            $newSelectedIndices[$i] = $si+2;
        }
    }

    __nxINST_OBJ_LIST_fillItemList();
    for( $i = 0; $i < size($newSelectedIndices); $i ++ )
    {
        textScrollList -e -selectIndexedItem $newSelectedIndices[$i] PIselectObjectList;
    }

    int $firstSelected = $newSelectedIndices[size($newSelectedIndices)-1];
    if( $firstSelected > `textScrollList -q -numberOfRows PIselectObjectList` )
    {
        int $selectThis = $firstSelected - `textScrollList -q -numberOfRows PIselectObjectList` + 1;
        textScrollList -e -showIndexedItem $selectThis PIselectObjectList;
    }
}


