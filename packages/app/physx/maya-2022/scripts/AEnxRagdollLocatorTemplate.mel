// Copyright (c) 2005 - 2011 NVIDIA Corporation. All rights reserved.
// NVIDIA Corporation and its licensors retain all intellectual property and proprietary 
// rights in and to this software and related documentation and any modifictions thereto.
// Any use, reproduction, disclosure or distribution of this software and related 
// documentation without an express license agreement from NVIDIA Corporation 
// is strictly prohibited.

// AEnxRagdollLocatorTemplate.mel
//
// Atrribute Editor template for ragdoll helper node: nxRagdollLocator 
// Allow users to manage lists of source shape meshes & joints to form the ragdoll.
// Performs regeneration of ragdoll from the entire skeleton or selected/unselected joints
//

// All global GUI variables used by RagdollLocator
global string $gAEnxRagdollLocatorNodeName;
global string $gSourceShapeMeshList;
global string $gnxRagdollLocatorJointList;
global string $gJointOutlinerWindow;
global string $gShapeOutlinerWindow;
global string $gRBIndicatorLabel = "  (RB)";
global string $gRagdollShapeType;
global string $gRagdollSimulationType;
global string $gRagdollInflate;
global string $gRagdollWeight;
global string $gRagdollUseBonePointsChkBox;
global string $gRagdollRedistributeMassButton = "gRagdollRedistributeMassButton";
// Defaults last used in generate ragdoll
global int $gRagdollShapeTypeValue = 1; // 1:convex hull, 2:capsule
global int $gRagdollSimulationTypeValue = 1; // 1:dynamic, 2:kinematic 
global float $gRagdollInflateValue = 0;
global float $gRagdollWeightValue = 0.2;
global int $gRagdollUseBonePoints = 1; // 1:on, 0:off 

global int $gRagdollLocator_General_Rig_Type = 0;
global int $gRagdollUntil = 0;
global int $gRagdollFrame = 0;

global int $gRagdollScending = 0;

global string $gRagdollLocator_CurRigidBody;
global string $gRagdollLocator_SelectedRigidBodies[];
global string $gRagdollLocator_AllRigidBodies[];
global string $gRagdollLocator_CurShape;

global int $gRagdollLocator_UpdateRig_Simulation_Type = 1;
global int $gRagdollLocator_UpdateRig_EditMode_Type = 1;
global int $gRagdollLocator_UpdateRig_Regen_Type = 1;

global proc AEnxRagdollLocator_InitParams()
{
	global string $gRagdollLocator_CurRigidBody;
	global string $gRagdollLocator_SelectedRigidBodies[];
	global string $gRagdollLocator_AllRigidBodies[];
	global string $gRagdollLocator_CurShape;

	$gRagdollLocator_CurRigidBody = "";
	clear $gRagdollLocator_SelectedRigidBodies;
	clear $gRagdollLocator_AllRigidBodies;
	$gRagdollLocator_CurShape = "";
}

global proc AEnxRagdollLocatorOverallMassChanged( string $nodeName )
{
	global string $gRagdollRedistributeMassButton;
	if(`button -exists $gRagdollRedistributeMassButton` == false)
	{
		print ($gRagdollRedistributeMassButton + " not exist\n");
		return;
	}

	float $overallMass = `getAttr ($nodeName + ".overallMass")`;

	if ( $overallMass <= 0.0 )
	{
		button -edit -enable false $gRagdollRedistributeMassButton;
	}
	else
	{
		button -edit -enable true $gRagdollRedistributeMassButton;
	}
}

global proc AEnxRagdollLocatorTemplateRedistributeMassButtonClick()
{
	global string $gAEnxRagdollLocatorNodeName;

	NvSolverRagdollRedistributeMass $gAEnxRagdollLocatorNodeName;
}

global proc AEnxRagdollLocatorRedistributeMassNew( string $nodeName )
{
	global string $gRagdollRedistributeMassButton;
	string $buffer[];
	tokenize($nodeName, ".", $buffer);

	setUITemplate -pst attributeEditorTemplate;	
		rowLayout -numberOfColumns 2;
			text - l ""; 
			button -label "Redistribute Mass" -align "center" 
				   -command "AEnxRagdollLocatorTemplateRedistributeMassButtonClick()"
				   $gRagdollRedistributeMassButton;
		setParent ..;
	setUITemplate -ppt;

	float $overallMass = `getAttr ($buffer[0] + ".overallMass")`;
	if ( $overallMass <= 0.0 )
	{
		button -edit -enable false $gRagdollRedistributeMassButton;
	}
}

global proc AEnxRagdollLocatorRedistributeMassReplace( string $nodeName )
{
	global string $gRagdollRedistributeMassButton;
	string $buffer[];
	tokenize($nodeName, ".", $buffer);

	float $overallMass = `getAttr ($buffer[0] + ".overallMass")`;
	if ( $overallMass <= 0.0 )
	{
		button -edit -enable false $gRagdollRedistributeMassButton;
	}
	else
	{
		button -edit -enable true $gRagdollRedistributeMassButton;
	}
}

global proc AEnxRagdollLocatoruseExistingMassChanged( string $nodeName )
{
	int $useExistingMass = `getAttr ($nodeName + ".useExistingMass")`;
	if ( $useExistingMass == 0 ) // unchecked
	{
		editorTemplate -dimControl $nodeName "overallMass" false;
	}
	else // checked
	{
		editorTemplate -dimControl $nodeName "overallMass" true;
		
		// update overall mass value
		string $jointList[] = `listConnections -source true -type "joint" $nodeName`;		
		float $totalMass = 0.0;
		for ( $joint in $jointList )
		{
			string $rbList[] = `listConnections -source true -type "nxRigidBody" $joint`;
			if ( size( $rbList ) != 0 )
			{
				float $currMass = `getAttr ($rbList[0] + ".mass")`;
				$totalMass = $totalMass + $currMass;
			}
		}

		setAttr ($nodeName + ".overallMass") $totalMass;
		refreshAE;
	}
}

global proc AEnxRagdollLocator_GetAllRigidbodies()
{
	global string $gRagdollLocator_AllRigidBodies[];
	clear $gRagdollLocator_AllRigidBodies;

	string $joints[];
	AEnxSortJointWithPathDepth($joints);
	int $size = size($joints);
	int $i;
	for ($i = 0; $i < $size; $i++)
	{
		$jointChildList = `listRelatives -fullPath -children -type "nxRigidBody" $joints[$i]`;
		if(size($jointChildList) > 0)
		{
			string $buffer[];
			clear $buffer;
			string $item = $jointChildList[0];
			tokenize $item "|" $buffer;
			int $bufferLength = `size $buffer`;
			$gRagdollLocator_AllRigidBodies[$i] = $buffer[$bufferLength-1];
		}

		//print ("$joints : " + $joints[$i] + "\n");
		//print ("RigidBodies : " + $gRagdollLocator_AllRigidBodies[$i] + "\n");
	};
}
	

global proc AEnxRagdollLocator_simulationType_Config()
{
	global int $gRagdollLocator_General_Rig_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".simulationType") $gRagdollLocator_General_Rig_Type;
	};
}

global proc AEnxRagdollLocator_RigType_radioButton_Dynamic_onCommand()
{
	//print ("AEnxRagdollLocator_RigType_radioButton_Dynamic_onCommand\n");

	global int $gRagdollLocator_General_Rig_Type;
	$gRagdollLocator_General_Rig_Type = 1; 

	AEnxRagdollLocator_simulationType_Config;

	refreshEditorTemplates;
}

global proc AEnxRagdollLocator_RigType_radioButton_Kinematic_onCommand()
{
	//print ("AEnxRagdollLocator_RigType_radioButton_Kinematic_onCommand\n");

	global int $gRagdollLocator_General_Rig_Type;
	$gRagdollLocator_General_Rig_Type = 0; 

	AEnxRagdollLocator_simulationType_Config;

	refreshEditorTemplates;
}

global proc AEnxRagdollLocator_switchToDynamic_Config()
{
	global int $gRagdollUntil;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".switchToDynamic") $gRagdollUntil;
	};
}

global proc AEnxRagdollLocator_UntilFrame_checkBox_changeCommand()
{
	//print ("AEnxRagdollLocator_UntilFrame_checkBox_changeCommand\n");

	global int $gRagdollUntil;
	$gRagdollUntil = `checkBox -q -value "AEnxRagdollLocator_UntilFrame_checkBox"`;

	intField -e -enable $gRagdollUntil
		"AEnxRagdollLocator_UntilFrame_intField";
	intSlider -e -enable $gRagdollUntil
		"AEnxRagdollLocator_UntilFrame_intSlider";

	AEnxRagdollLocator_switchToDynamic_Config;
}

global proc AEnxRagdollLocator_switchAtFrame_Config()
{
	global int $gRagdollFrame;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".switchAtFrame") $gRagdollFrame;
	};
}

global proc AEnxRagdollLocator_UntilFrame_intSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_UntilFrame_intSlider_dragCommand\n");

	global int $gRagdollFrame;
	$gRagdollFrame = `intSlider -q -value "AEnxRagdollLocator_UntilFrame_intSlider"`;

	intField -e -value $gRagdollFrame "AEnxRagdollLocator_UntilFrame_intField";

	AEnxRagdollLocator_switchAtFrame_Config;
}

global proc AEnxRagdollLocator_UntilFrame_intField_changeCommand()
{
	//print ("AEnxRagdollLocator_UntilFrame_intField_changeCommand\n");

	global int $gRagdollFrame;
	$gRagdollFrame = `intField -q -value "AEnxRagdollLocator_UntilFrame_intField"`;

	intSlider -e -value $gRagdollFrame "AEnxRagdollLocator_UntilFrame_intSlider";

	AEnxRagdollLocator_switchAtFrame_Config;
}

global proc AEnxRagdollLocatorRigTypeNew(string $plug)
{
	//print ("AEnxRagdollLocatorRigTypeNew\n");

	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "both" "both";
		text -label "";
		radioCollection;
		radioButton -label "Dynamic"
			-onCommand "AEnxRagdollLocator_RigType_radioButton_Dynamic_onCommand" 
			"AEnxRagdollLocator_RigType_radioButton_Dynamic";
		radioButton -label "Kinematic" 
			-onCommand "AEnxRagdollLocator_RigType_radioButton_Kinematic_onCommand"
			"AEnxRagdollLocator_RigType_radioButton_Kinematic";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "both" "both" "left" "left";
		text -label "";
		checkBox -label "Until Frame"
			-changeCommand "AEnxRagdollLocator_UntilFrame_checkBox_changeCommand"
			"AEnxRagdollLocator_UntilFrame_checkBox";
		intField -minValue 0 -maxValue 1000
			-changeCommand "AEnxRagdollLocator_UntilFrame_intField_changeCommand"
			"AEnxRagdollLocator_UntilFrame_intField";
		text -label "";
		intSlider -min 0 -max 1000
			-dragCommand "AEnxRagdollLocator_UntilFrame_intSlider_dragCommand"
			"AEnxRagdollLocator_UntilFrame_intSlider";
		setParent..;
	setUITemplate -ppt;

	AEnxRagdollLocatorRigTypeReplace($plug);
}

global proc AEnxRagdollLocatorRigTypeReplace(string $plug)
{
	//print ("AEnxRagdollLocatorRigTypeReplace\n");

	global int $gRagdollLocator_General_Rig_Type;
	global int $gRagdollUntil;
	global int $gRagdollFrame;

	$gRagdollLocator_General_Rig_Type = 0;  // kinematic
	$gRagdollUntil = 0;
	$gRagdollFrame = 0;

	string $joints[];
	AEnxSortJointWithPathDepth($joints);
	if(`size $joints` > 0)
	{
		string $item = $joints[0];
		string $jointChildList[] = `listRelatives -fullPath -children -type "nxRigidBody" $item`;
		if(`size $jointChildList` > 0)
		{
			string $buffer[];
			clear $buffer;
			string $joint = $jointChildList[0];
			tokenize($joint, "|", $buffer);
			int $bufferLength = `size $buffer`;
			string $rigidbody = $buffer[$bufferLength-1];

			$gRagdollLocator_General_Rig_Type = `getAttr ($rigidbody + ".simulationType")`;
			$gRagdollUntil = `getAttr ($rigidbody + ".switchToDynamic")`;
			$gRagdollFrame = `getAttr ($rigidbody + ".switchAtFrame")`;
		}
	}

	if($gRagdollLocator_General_Rig_Type)
	{
		radioButton -e -select "AEnxRagdollLocator_RigType_radioButton_Dynamic";
	}
	else
	{
		radioButton -e -select "AEnxRagdollLocator_RigType_radioButton_Kinematic";
	}
	checkBox -e -value $gRagdollUntil
		"AEnxRagdollLocator_UntilFrame_checkBox";
	intField -e -enable $gRagdollUntil -value $gRagdollFrame
		"AEnxRagdollLocator_UntilFrame_intField";
	intSlider -e -enable $gRagdollUntil -value $gRagdollFrame
		"AEnxRagdollLocator_UntilFrame_intSlider";
}

global proc AEnxRagdollLocator_DisplayIcon_checkBox_changeCommand()
{
	//print ("AEnxRagdollLocator_DisplayIcon_checkBox_changeCommand\n");

	int $gRagdollDisplayIcon = `checkBox -q -value "AEnxRagdollLocator_DisplayIcon_checkBox"`;

	floatField -e -enable $gRagdollDisplayIcon
		"AEnxRagdollLocator_IconSize_floatField";
	floatSlider -e -enable $gRagdollDisplayIcon
		"AEnxRagdollLocator_IconSize_floatSlider";

	NvSolverSetDisplayRagdollLocators $gRagdollDisplayIcon;
}

global proc AEnxRagdollLocator_IconSize_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_IconSize_floatSlider_dragCommand\n");

	float $gRagdollIconSize = `floatSlider -q -value "AEnxRagdollLocator_IconSize_floatSlider"`;

	floatField -e -value $gRagdollIconSize "AEnxRagdollLocator_IconSize_floatField";

	NvSolverSetRagdollIconSize $gRagdollIconSize;
}

global proc AEnxRagdollLocator_IconSize_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_IconSize_floatField_changeCommand\n");

	float $gRagdollIconSize = `floatField -q -value "AEnxRagdollLocator_IconSize_floatField"`;

	floatSlider -e -value $gRagdollIconSize "AEnxRagdollLocator_IconSize_floatSlider";

	NvSolverSetRagdollIconSize $gRagdollIconSize;
}

global proc AEnxRagdollLocator_DisplayBones_checkBox_changeCommand()
{
	//print ("AEnxRagdollLocator_DisplayBones_checkBox_changeCommand\n");

	int $gRagdollDisplayBones = `checkBox -q -value "AEnxRagdollLocator_DisplayBones_checkBox"`;

	NvSolverSetDisplayRigidBody $gRagdollDisplayBones;
}

global proc AEnxRagdollLocator_DisplayContraints_checkBox_changeCommand()
{
	//print ("AEnxRagdollLocator_DisplayContraints_checkBox_changeCommand\n");

	int $gRagdollDisplayContraints = `checkBox -q -value "AEnxRagdollLocator_DisplayContraints_checkBox"`;

	floatField -e -enable $gRagdollDisplayContraints
		"AEnxRagdollLocator_Scaling_floatField";
	floatSlider -e -enable $gRagdollDisplayContraints
		"AEnxRagdollLocator_Scaling_floatSlider";

	NvSolverSetDisplayConstraints $gRagdollDisplayContraints;
}

global proc AEnxRagdollLocator_Scaling_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_Scaling_floatSlider_dragCommand\n");

	float $gRagdollScaling = `floatSlider -q -value "AEnxRagdollLocator_Scaling_floatSlider"`;

	floatField -e -value $gRagdollScaling "AEnxRagdollLocator_Scaling_floatField";

	NvSolverSetConstraintsScaling $gRagdollScaling;
}

global proc AEnxRagdollLocator_Scaling_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_Scaling_floatField_changeCommand\n");

	float $gRagdollScaling = `floatField -q -value "AEnxRagdollLocator_Scaling_floatField"`;

	floatSlider -e -value $gRagdollScaling "AEnxRagdollLocator_Scaling_floatSlider";

	NvSolverSetConstraintsScaling $gRagdollScaling;
}

global proc AEnxRagdollLocatorDisplayNew(string $plug)
{
	//print ("AEnxRagdollLocatorDisplayNew\n");

	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 2 -columnWidth2 1 100 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Display Icon"
			-changeCommand "AEnxRagdollLocator_DisplayIcon_checkBox_changeCommand"
			"AEnxRagdollLocator_DisplayIcon_checkBox";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Icon Size";
		floatField -minValue 0 -maxValue 10 -precision 2
			-changeCommand "AEnxRagdollLocator_IconSize_floatField_changeCommand"
			"AEnxRagdollLocator_IconSize_floatField";
		text -label "";
		floatSlider -min 0 -max 10
			-dragCommand "AEnxRagdollLocator_IconSize_floatSlider_dragCommand"
			"AEnxRagdollLocator_IconSize_floatSlider";
		setParent..;

		rowLayout -numberOfColumns 2 -columnWidth2 1 100 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Display Bones"
			-changeCommand "AEnxRagdollLocator_DisplayBones_checkBox_changeCommand"
			"AEnxRagdollLocator_DisplayBones_checkBox";
		setParent..;

		rowLayout -numberOfColumns 2 -columnWidth2 1 100 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Display Contraints"
			-changeCommand "AEnxRagdollLocator_DisplayContraints_checkBox_changeCommand"
			"AEnxRagdollLocator_DisplayContraints_checkBox";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Scaling";
		floatField -minValue 0 -maxValue 100 -precision 2
			-changeCommand "AEnxRagdollLocator_Scaling_floatField_changeCommand"
			"AEnxRagdollLocator_Scaling_floatField";
		text -label "%";
		floatSlider -min 0 -max 100
			-dragCommand "AEnxRagdollLocator_Scaling_floatSlider_dragCommand"
			"AEnxRagdollLocator_Scaling_floatSlider";
		setParent..;

		/*
		rowLayout -numberOfColumns 2 -columnWidth2 1 200 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Display by Simulation Set";
		setParent..;

		rowLayout -numberOfColumns 2 -columnWidth2 1 100 -columnAttach2 "both" "both";
		text -label "";
		optionMenu -changeCommand "print #1";
		menuItem -label "All";
		menuItem -label "Selected";
		setParent..;

		rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "both" "both";
		text -label "";
		radioCollection;
		radioButton -label "All";
		radioButton -label "Selected";
		setParent..;
		*/
	setUITemplate -ppt;

	AEnxRagdollLocatorDisplayReplace($plug);
}

global proc AEnxRagdollLocatorDisplayReplace(string $plug)
{
	//print ("AEnxRagdollLocatorDisplayReplace\n");

	int $gRagdollDisplayIcon = `NvSolverIsDisplayRagdollLocators`;
	float $gRagdollIconSize = `NvSolverGetRagdollIconSize`;
	int $gRagdollDisplayBones = `NvSolverIsDisplayRigidBody`;
	int $gRagdollDisplayContraints = `NvSolverIsDisplayConstraints`;
	float $gRagdollScaling = `NvSolverGetConstraintsScaling`;

	checkBox -e -value $gRagdollDisplayIcon
		"AEnxRagdollLocator_DisplayIcon_checkBox";

	floatField -e -value $gRagdollIconSize
		"AEnxRagdollLocator_IconSize_floatField";
	floatSlider -e -value $gRagdollIconSize
		"AEnxRagdollLocator_IconSize_floatSlider";

	checkBox -e -value $gRagdollDisplayBones
		"AEnxRagdollLocator_DisplayBones_checkBox";

	checkBox -e -value $gRagdollDisplayContraints
		"AEnxRagdollLocator_DisplayContraints_checkBox";

	floatField -e -value $gRagdollScaling
		"AEnxRagdollLocator_Scaling_floatField";
	floatSlider -e -value $gRagdollScaling
		"AEnxRagdollLocator_Scaling_floatSlider";
}

global proc string[] AEnxRagdollLocator_getRigidBodyShapeParent( string $rigidBody )
{
	int $count=0;
	string $shapeMeshTransform[];
	if ( $rigidBody == "" )
		return $shapeMeshTransform;

	string $physicsShapes[] = `listConnections -destination off -source on -type "physicsShape" -shapes on ($rigidBody+".physicsShapes")`;

	// if there's no connecting ps, check hierarchy for shapes in single/group transforms
	if ( size($physicsShapes) == 0 )
	{
		//print( $rigidBody + " has no physics shapes with mesh to base the new shape on. Use Add > Shape > Around Object, to select the shape mesh.\n" );
		// a. check for shapes in single transform
		$shapeMeshTransform = `listRelatives -fullPath -parent -type transform $rigidBody`;
		if ( size($shapeMeshTransform) == 0 )
			return $shapeMeshTransform;

		// take the first transform found.
		$shapeUnderRBParent = `listRelatives -fullPath -children -type mesh $shapeMeshTransform[0]`;
		// return transform if mesh is found, else check if RB's in a group transform 
		if ( size($shapeUnderRBParent) > 0 )
			return $shapeMeshTransform;
		
		// b. check if there are shapes under the transform in a group
		$groupTransforms = `listRelatives -fullPath -children -type transform $shapeMeshTransform[0]`;
		if ( size($groupTransforms) == 0 )
			return $groupTransforms;

		$count=0;
		for( $transform in $groupTransforms )
		{
			$shapeUnderRBParent = `listRelatives -fullPath -children -type mesh $transform`;
			if( size($shapeUnderRBParent) >0 )
			{
				$shapeMeshTransform[$count] = $transform;
				$count++;
			}
		}
		return $shapeMeshTransform;
	}

	// if there are connected shape mesh, return the list of connected shape mesh's parent transform
	$count=0;
	for( $physicsShape in $physicsShapes )
	{
		//$shapeMeshTmp = `listConnections -destination off -source on -type "mesh" -shapes on ($physicsShape+".inMesh")`;
		$shapeMeshTmp = `listConnections -destination off -source on -type "mesh" ($physicsShape+".inMesh")`;
		if( size($shapeMeshTmp) == 1 )
		{
			if( !stringArrayContains($shapeMeshTmp[0], $shapeMeshTransform) )
			{
				$shapeMeshTransform[$count] = $shapeMeshTmp[0];
				$count++;
			}
		}
	}

	return $shapeMeshTransform;
}

global proc AEnxRagdollLocator_createPhysicsShapeUsingJoints( string $rigidbody, string $shapeMeshTrans, int $shapeType )
{
	//print ("AEnxRagdollLocator_createPhysicsShapeUsingJoints\n");

	// Create physics shape only if there are children joints
	string $childJoints[] = `listRelatives -fullPath -children -type joint $shapeMeshTrans`;
	if( size( $childJoints ) == 0 )
		print "No child joints, no physics shape will be created.\n";
	else
	{
		// if $shapeType = 4 (convexhull), prompt that with no mesh, convex hull cannot be computed. 
		// and capsule will be created instead
		if( $shapeType == 4 )
		{
			print "There's no shape mesh under joint, convex hull cannot be computed. Create capsule instead.\n";
			$shapeType =3 ;
		}

		// Create a physics shape for each child joint found.
		for( $childJoint in $childJoints  )
		{
			$newShape = nxRigidBodyCreatePhysicsShapes($rigidbody, $shapeType);
			textScrollList -edit -append $newShape "AEnxRagdollLocator_ShapeSetup_textScrollList";

			string $physShapeparent[] = `listRelatives -fullPath -parent -type transform $newShape`;
			// instead of doing the math ourselves, we parent the physics shape to the mesh that we selected
			// so that it gets the correct transformation
			parent -relative $physShapeparent[0] $shapeMeshTrans; // parent to selected mesh's transform first

			// then making use of the -absolute flag in the parent command, we parent it back to the rigidbody
			// but keep the current transformation. the math will be done by the command itself to change the local transformation
			// COOL!
			//parent -absolute $physShapeparent[0] $rigidbody; // parent back to rigidbody but keep the transformation
			parent $physShapeparent[0] $rigidbody; // parent back to rigidbody but keep the transformation

			// Update physics shape type
			setAttr ($newShape+".shapeType") $shapeType;

			// set point 1 & 2, radius & size:
			// Set Point 1 to 0.0, 0.0, 0.0, with no extra translation required
			setAttr ($newShape+".point1X") 0.0;
			setAttr ($newShape+".point1Y") 0.0;
			setAttr ($newShape+".point1Z") 0.0;

			// Connect Point 2 to the child joint's translate
			connectAttr ( $childJoint + ".translate" ) ($newShape+".point2") ;
			//setAttr ($newShape+".point2X") `getAttr ( $childJoint + ".translateX" )`;
			//setAttr ($newShape+".point2Y") `getAttr ( $childJoint + ".translateY" )`;
			//setAttr ($newShape+".point2Z") `getAttr ( $childJoint + ".translateZ" )`;

			// Set Radius to parent joint's radius x2 
			float $radius = `getAttr ( $childJoint + ".radius" )`;
			// [yilun] apparently maya joint's radius is in fact diameter, hence there's no need to double the radius size.
			// using the diameter as physics shape's radius ensures that the physics shape encompass the entire bone.
			setAttr ($newShape+".radius") $radius;

			// Set size xyz to parent joitn's radius x2
			//setAttr ($newShape+".sizeX") ( `getAttr ( $childJoint + ".translateX" )` + ( $radius * 2 ) );
			setAttr ($newShape+".sizeX") ( $radius * 2 );
			setAttr ($newShape+".sizeY") ( $radius * 2 );
			setAttr ($newShape+".sizeZ") ( $radius * 2 );
		}
	}
}

global proc string AEnxRagdollLocator_ShapeSetup_renamePhysicsShape( string $physicsShape )
{
	// 1. Get the name of the connected rigid body
	$rb = `listConnections -d on -s off -type "nxRigidBody" ($physicsShape+".outPhysicsShape")`;

	// 2. Get physics shape's parent transform
	$psParent = `listRelatives -fullPath -parent $physicsShape`;

	// 3. Format: <Parent Name> + RigidBody + Shape<#> 
	$newName = ( $rb[0] + "Shape#" );

	// 4. Rename physics shape & it's parent Transform
	$newPSName = `rename $physicsShape $newName`;
	rename $psParent[0] ( $newPSName + "Transform" );

	return $newPSName;
}

global proc AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( string $rigidbody, string $shapeMeshTrans, int $shapeType )
{
	$newShape = nxRigidBodyCreatePhysicsShapes($rigidbody, $shapeType);
	if( `textScrollList -exists "AEnxRagdollLocator_ShapeSetup_textScrollList"` )
		textScrollList -edit -append $newShape "AEnxRagdollLocator_ShapeSetup_textScrollList";

	string $physShapeparent[] = `listRelatives -fullPath -parent -type transform $newShape`;
	string $shapeMeshName[] = `listRelatives -fullPath -children -type mesh -noIntermediate $shapeMeshTrans`;

	// instead of doing the math ourselves, we parent the physics shape to the mesh that we selected
	// so that it gets the correct transformation
	parent -relative $physShapeparent[0] $shapeMeshTrans; // parent to selected mesh's transform first
	$physShapeparent = `listRelatives -fullPath -parent -type transform $newShape`;

	// then making use of the -absolute flag in the parent command, we parent it back to the rigidbody
	// but keep the current transformation. the math will be done by the command itself to change the local transformation
	// COOL!
	parent -absolute $physShapeparent[0] $rigidbody; // parent back to rigidbody but keep the transformation

	// Compute physics shape's properties based on a given mesh
	//select -r $newShape $shapeMeshName[0];
	computePhysicsShapeFromMeshCmd -psn $newShape -m $shapeMeshName[0] -st $shapeType;

	// Rename generated physics shape
	AEnxRagdollLocator_ShapeSetup_renamePhysicsShape( $newShape );

	global string $gAEnxRagdollLocatorNodeName;
	select $gAEnxRagdollLocatorNodeName;
}

global proc AEnxRagdollLocator_ShapeSetup_createShapesAroundSelf( string $rigidBody, int $shapeType )
{
	// Search for the shape mesh from a. to c. combinations
	string $shapeMeshParents[] = AEnxRagdollLocator_getRigidBodyShapeParent( $rigidBody );

	// If there are no connecting shape meshes to the existing physicshape or no existing physicsshape
	if( size($shapeMeshParents) == 0 ) 
	{
		// if there's no connected shape mesh, check if there's a joint under RB's parent transform
		$rbTransform = `listRelatives -fullPath -parent $rigidBody`;
		string $parentType = `nodeType -apiType $rbTransform[0]`;
		$childJoint = `listRelatives -fullPath -children -type joint $rbTransform[0]`;

		// if there's a parent & child joint, create physics shape
		if(( $parentType == "kJoint" ) && ( size($childJoint) > 0 ) )
			AEnxRagdollLocator_createPhysicsShapeUsingJoints( $rigidBody, $rbTransform[0], $shapeType );
		else
		{
			print( $rigidBody + " has no physics shapes with mesh to base the new shape on. Use Add > Shape > Around Object, to select the shape mesh.\n" );
			return;
		}
	}

	for($shapeMeshTransform in $shapeMeshParents)
	{
		// If parent transform of rigidbody is a joint & has no child mesh
		// create the shape using size & point properties calculated from the parent & child joints
		string $parentType = `nodeType -apiType $shapeMeshTransform`;
		string $shapeMeshName[] = `listRelatives -fullPath -children -type mesh -noIntermediate $shapeMeshTransform`;

		if(( `gmatch $parentType "kJoint"` == 1 ) && ( size( $shapeMeshName ) == 0) )
			AEnxRagdollLocator_createPhysicsShapeUsingJoints( $rigidBody, $shapeMeshTransform, $shapeType );
		else // else create physics shape using the mesh
			AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( $rigidBody, $shapeMeshTransform, $shapeType );
	}	
}

global proc AEnxRagdollLocator_CreateAttachToChildShape( string $rigidbody, string $shapeMeshTrans[], int $shapeType )
{
	$newShape = nxRigidBodyCreatePhysicsShapes($rigidbody, $shapeType);
	if( `textScrollList -exists "AEnxRagdollLocator_ShapeSetup_textScrollList"` )
		textScrollList -edit -append $newShape "AEnxRagdollLocator_ShapeSetup_textScrollList";

	string $physShapeparent[] = `listRelatives -fullPath -parent -type transform $newShape`;
	string $shapeMeshName[] = `listRelatives -fullPath -children -type mesh -noIntermediate $shapeMeshTrans[size($shapeMeshTrans) - 1]`;

	//print( "PhysicsShape: " + $physShapeparent[0] + ", mesh name: " + $shapeMeshName[0] + "\n" );
	parent -relative $physShapeparent[0] $shapeMeshTrans[size($shapeMeshTrans) - 1];

	// Compute physics shape's properties based on a given mesh
	//select -r $newShape $shapeMeshName[0];
	computePhysicsShapeFromMeshCmd -psn $newShape -m $shapeMeshName[0] -st $shapeType;

	// Rename generated physics shape
	AEnxRagdollLocator_renamePhysicsShape( $newShape );
}

global proc AEnxRagdollLocator_ShapeSetup_createShapesAroundObject( string $rigidbody, int $shapeType )
{
	if ( 1 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( \"" + $rigidbody + "\", $shapeMeshTrans[size($shapeMeshTrans) - 1], 1 );"); }
	if ( 2 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( \"" + $rigidbody + "\", $shapeMeshTrans[size($shapeMeshTrans) - 1], 2 );"); }
	if ( 3 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( \"" + $rigidbody + "\", $shapeMeshTrans[size($shapeMeshTrans) - 1], 3 );"); }
	if ( 4 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAndAttachAndDetachMeshToPhysicsShape( \"" + $rigidbody + "\", $shapeMeshTrans[size($shapeMeshTrans) - 1], 4 );"); }
}

global proc AEnxRagdollLocator_ShapeSetup_createShapesAttachToChild( string $rigidbody, int $shapeType )
{
	if ( 1 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAttachToChildShape( \"" + $rigidbody + "\", $shapeMeshTrans, 1 );"); }
	if ( 2 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAttachToChildShape( \"" + $rigidbody + "\", $shapeMeshTrans, 2 );"); }
	if ( 3 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAttachToChildShape( \"" + $rigidbody + "\", $shapeMeshTrans, 3 );"); }
	if ( 4 == $shapeType )
	{	NvExecuteOnSelection -hint "Please select input mesh to connect." 
	-cmd ("$shapeMeshTrans = `NvExecuteOnSelection -q`; AEnxRagdollLocator_CreateAttachToChildShape( \"" + $rigidbody + "\", $shapeMeshTrans, 4 );"); }
}

global proc AEnxRagdollLocator_ShapeSetup_CreatePSCmd( int $type, int $shapeType )
{
	global string $gRagdollLocator_CurRigidBody;
	string $cmd = "";
	if( $type == 0 ) // create around self
		$cmd = ( "AEnxRagdollLocator_ShapeSetup_createShapesAroundSelf( \"" + $gRagdollLocator_CurRigidBody + "\", " + $shapeType + " )" );
	else if( $type == 1 ) // create around object
		$cmd = ( "AEnxRagdollLocator_ShapeSetup_createShapesAroundObject( \"" + $gRagdollLocator_CurRigidBody + "\", " + $shapeType + " )" );
	else if( $type == 2 ) // create & attach to child
		$cmd = ( "AEnxRagdollLocator_ShapeSetup_createShapesAttachToChild( \"" + $gRagdollLocator_CurRigidBody + "\", " + $shapeType + " )" );
	eval $cmd;
}

global proc AEnxRagdollLocator_ShapeSetup_button_Add_command()
{
	//print ("AEnxRagdollLocator_ShapeSetup_button_Add_command\n");

	menuItem -subMenu true -tearOff true -label "Box";
	{
		menuItem -label "Around Self" -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 0, 1 )");
		menuItem -label "Around Object..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 1, 1 )");
		menuItem -label "Attached to Child..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 2, 1 )");
		setParent -menu ..;
	}
	
	menuItem -subMenu true -tearOff true -label "Sphere";
	{
		menuItem -label "Around Self" -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 0, 2 )");
		menuItem -label "Around Object..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 1, 2 )");
		menuItem -label "Attached to Child..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 2, 2 )");
		setParent -menu ..;
	}

	menuItem -subMenu true -tearOff true -label "Capsule";
	{
		menuItem -label "Around Self" -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 0, 3 )");
		menuItem -label "Around Object..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 1, 3 )");
		menuItem -label "Attached to Child..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 2, 3 )");
		setParent -menu ..;
	}

	menuItem -subMenu true -tearOff true -label "Convex Hull";
	{
		menuItem -label "Around Self" -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 0, 4 )");
		menuItem -label "Around Object..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 1, 4 )");
		menuItem -label "Attached to Child..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 2, 4 )");
		setParent -menu ..;
	}

	//global string $gAEphysicsShapeClothSphereSubMenuAdd;
	menuItem -subMenu true -tearOff true -label "ClothSperes";// -enable true $gAEphysicsShapeClothSphereSubMenuAdd;
	{
		menuItem -label "Around Self" -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 0, 6 )");
		menuItem -label "Around Object..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 1, 6 )") ;
		menuItem -label "Attached to Child..." -command ("AEnxRagdollLocator_ShapeSetup_CreatePSCmd( 2, 6 )") ;
		setParent -menu ..;
	}
}

global proc AEnxRagdollLocator_ShapeSetup_button_Select_command()
{
	//print ("AEnxRagdollLocator_ShapeSetup_button_Select_command\n");
	global string $gRagdollLocator_CurShape;
	$gRagdollLocator_CurShape = "";
	string $selected[];
	$selected = `textScrollList -q -selectItem "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
	if(size($selected) > 0)
	{
		$gRagdollLocator_CurShape = $selected[0];
		select $gRagdollLocator_CurShape;
	}
}

global proc AEnxRagdollLocator_ShapeSetup_button_Delete_command()
{
	//print ("AEnxRagdollLocator_ShapeSetup_button_Delete_command\n");

	string $selected[];
	if(`textScrollList -exists "AEnxRagdollLocator_ShapeSetup_textScrollList"`)
	{
		int $selectedIndexes[];
		$selectedIndexes = `textScrollList -q -sii "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
		if(size($selectedIndexes) == 0)
		{
			warning "No physics shape selected.\n";
			return;
		}
		if($selectedIndexes[0] == 1)
		{
			warning "can not delete the first physics shape.\n";
			return;
		}
		$selected = `textScrollList -q -si "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
	}
	else
		$selected = `ls -selection -type "physicsShape"`;

	if (size($selected) == 0 )
       error "No physics shape selected.";
    else
    {
		for( $select in $selected )
		{
			// warn user if it's the last physics shape in the connected rigidbody
			string $rb[] = `listConnections -d on -s off -type "nxRigidBody" ($select+".outPhysicsShape")`;
			$psUnderRB = `listConnections -d off -s on -type "physicsShape" ($rb[0]+".physicsShapes")`;
			if(size($psUnderRB) == 1)
				warning ( $select + " to be deleted, is last physic shape in the rigidbody.\n" );

			$shapeParents = `listRelatives -fullPath -parent -type "transform" -path $select`;
			if (`nodeType $shapeParents[0]`!="transform")
			{
				warning "Unable to find physics shape's transform parent. Only Physics Shape deleted.\n";
				delete $select;
			}
			else
			{
				$shapeParent = $shapeParents[0];
				delete $shapeParent;
			}

			//if(`textScrollList -exists "AEnxRagdollLocator_ShapeSetup_textScrollList"`)
			//	textScrollList -edit -removeItem $select "AEnxRagdollLocator_ShapeSetup_textScrollList";

			textScrollList -e -removeAll -enable true "AEnxRagdollLocator_ShapeSetup_textScrollList";

			global string $gRagdollLocator_CurRigidBody;
			string $shapelists[];
			$shapelists = `listConnections -shapes true -et true -type "physicsShape" $gRagdollLocator_CurRigidBody`;
			for($shape in $shapelists)
			{
				textScrollList -e -append $shape "AEnxRagdollLocator_ShapeSetup_textScrollList";
			}
		}
		global string $gRagdollLocator_CurShape;
		$gRagdollLocator_CurShape = "";
		print "Physics shape(s) deleted.\n";
	}	
}

global proc AEnxRagdollLocator_ShapeSetup_button_Rename_command()
{
	//print ("AEnxRagdollLocator_ShapeSetup_button_Rename_command\n");

	string $selected[];
	if(`textScrollList -exists "AEnxRagdollLocator_ShapeSetup_textScrollList"`)
		$selected = `textScrollList -q -si "AEnxRagdollLocator_ShapeSetup_textScrollList"`;

	if (size($selected) == 0 )
       error "No physics shape selected for rename.\n";
    else
    {
		$gPhysicsShapeNodeName=$selected[0];
		string $newName;
		string $result = `promptDialog
			-title ("Rename " + $gPhysicsShapeNodeName )
			-message "Enter Name:"
			-button "OK" -button "Cancel"
			-defaultButton "OK" -cancelButton "Cancel"
			-dismissString "Cancel"`;

		if ($result == "OK") 
		{
			$newName = `promptDialog -query -text`;
			rename $gPhysicsShapeNodeName $newName;
			
			textScrollList -e -removeAll -enable true "AEnxRagdollLocator_ShapeSetup_textScrollList";

			global string $gRagdollLocator_CurRigidBody;
			string $shapelists[];
			$shapelists = `listConnections -shapes true -et true -type "physicsShape" $gRagdollLocator_CurRigidBody`;
			for($shape in $shapelists)
			{
				textScrollList -e -append $shape "AEnxRagdollLocator_ShapeSetup_textScrollList";
			}
		}
	}
}

global proc AEnxRagdollLocator_ShapeSetup_textScrollList_selectCommand()
{
	//print ("AEnxRagdollLocator_ShapeSetup_textScrollList_selectCommand\n");

	global string $gRagdollLocator_CurShape;
	if($gRagdollLocator_CurShape != "")
	{
		select -deselect $gRagdollLocator_CurShape;
		$gRagdollLocator_CurShape = "";
	}
	string $selected[];
	$selected = `textScrollList -q -selectItem "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
	if(size($selected) > 0)
	{
		$gRagdollLocator_CurShape = $selected[0];

		select -add $gRagdollLocator_CurShape;
		global string $gAEnxRagdollLocatorNodeName;
		select -add $gAEnxRagdollLocatorNodeName;
	}

	AEnxRagdollLocatorShapeSetupReplace("");
	AEnxRagdollLocatorConnectedToReplace("");
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Sizex_changeCommand()
{
	float $sizex = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Sizex"`;

	global string $gRagdollLocator_CurShape;
	float $gRagdollShapeSetup_Size[];
	$gRagdollShapeSetup_Size = `getAttr ($gRagdollLocator_CurShape + ".size")`;
		
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".size") -type "float3" 
		$sizex $gRagdollShapeSetup_Size[1] $gRagdollShapeSetup_Size[2];
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Sizey_changeCommand()
{
	float $sizey = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Sizey"`;

	global string $gRagdollLocator_CurShape;
	float $gRagdollShapeSetup_Size[];
	$gRagdollShapeSetup_Size = `getAttr ($gRagdollLocator_CurShape + ".size")`;
		
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".size") -type "float3" 
		$gRagdollShapeSetup_Size[0] $sizey $gRagdollShapeSetup_Size[2];
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Sizez_changeCommand()
{
	float $sizez = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Sizez"`;

	global string $gRagdollLocator_CurShape;
	float $gRagdollShapeSetup_Size[];
	$gRagdollShapeSetup_Size = `getAttr ($gRagdollLocator_CurShape + ".size")`;
	$gRagdollShapeSetup_Size[2] = $sizez;
	
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".size") -type "float3" 
		$gRagdollShapeSetup_Size[0] $gRagdollShapeSetup_Size[1] $sizez;
}

global proc AEnxRagdollLocator_ShapeSetup_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_ShapeSetup_optionMenu_changeCommand\n");

	int $gRagdollShapeSetup_ShapeType = `optionMenu -q -select "AEnxRagdollLocator_ShapeSetup_optionMenu"`;
		
	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".shapeType") $gRagdollShapeSetup_ShapeType;

	AEnxRagdollLocatorShapeSetupReplace("");
	AEnxRagdollLocatorConnectedToReplace("");
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Radius_changeCommand()
{
	float $gRagdollShapeSetup_Radius = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Radius"`;

	floatSlider -e -value $gRagdollShapeSetup_Radius "AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".radius") $gRagdollShapeSetup_Radius;
}

global proc AEnxRagdollLocator_ShapeSetup_floatSlider_Radius_dragCommand()
{
	float $gRagdollShapeSetup_Radius = `floatSlider -q -value "AEnxRagdollLocator_ShapeSetup_floatSlider_Radius"`;

	floatField -e -value $gRagdollShapeSetup_Radius "AEnxRagdollLocator_ShapeSetup_floatField_Radius";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".radius") $gRagdollShapeSetup_Radius;
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Height_changeCommand()
{
	float $gRagdollShapeSetup_Height = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Height"`;

	floatSlider -e -value $gRagdollShapeSetup_Height "AEnxRagdollLocator_ShapeSetup_floatSlider_Height";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".height") $gRagdollShapeSetup_Height;
}

global proc AEnxRagdollLocator_ShapeSetup_floatSlider_Height_dragCommand()
{
	float $gRagdollShapeSetup_Height = `floatSlider -q -value "AEnxRagdollLocator_ShapeSetup_floatSlider_Height"`;

	floatField -e -value $gRagdollShapeSetup_Height "AEnxRagdollLocator_ShapeSetup_floatField_Height";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".height") $gRagdollShapeSetup_Height;
}

global proc AEnxRagdollLocator_ShapeSetup_floatField_Inflate_changeCommand()
{
	float $gRagdollShapeSetup_Inflate = `floatField -q -value "AEnxRagdollLocator_ShapeSetup_floatField_Inflate"`;

	floatSlider -e -value $gRagdollShapeSetup_Inflate "AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".inflate") $gRagdollShapeSetup_Inflate;
}

global proc AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate_dragCommand()
{
	float $gRagdollShapeSetup_Inflate = `floatSlider -q -value "AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate"`;

	floatField -e -value $gRagdollShapeSetup_Inflate "AEnxRagdollLocator_ShapeSetup_floatField_Inflate";

	global string $gRagdollLocator_CurShape;
	setAttr ($gRagdollLocator_CurShape + ".bestFit") false;
	setAttr ($gRagdollLocator_CurShape + ".inflate") $gRagdollShapeSetup_Inflate;
}

global proc AEnxRagdollLocatorShapeSetupNew(string $plug)
{
	//print ("AEnxRagdollLocatorShapeSetupNew\n");

	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 100 100 -columnAttach4 "both" "both" "both" "both" "both";
			text -label "";
			button -label "Add" 
			"AEnxRagdollLocator_ShapeSetup_button_Add";
				// for left click
				popupMenu -button 1;
					AEnxRagdollLocator_ShapeSetup_button_Add_command();
				// for right click
 				popupMenu;
 					AEnxRagdollLocator_ShapeSetup_button_Add_command();
			button -label "Select" 
			-command "AEnxRagdollLocator_ShapeSetup_button_Select_command"
			"AEnxRagdollLocator_ShapeSetup_button_Select";
			button -label "Delete" 
			-command "AEnxRagdollLocator_ShapeSetup_button_Delete_command"
			"AEnxRagdollLocator_ShapeSetup_button_Delete";
			button -label "Rename" 
			-command "AEnxRagdollLocator_ShapeSetup_button_Rename_command"
			"AEnxRagdollLocator_ShapeSetup_button_Rename";
		setParent ..;

		rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
			text -label "";
			textScrollList -allowMultiSelection false 
			-selectCommand "AEnxRagdollLocator_ShapeSetup_textScrollList_selectCommand"
			"AEnxRagdollLocator_ShapeSetup_textScrollList";
		setParent ..;

		rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "right" "both";
			text -label "";
			text -label "Shape Type";
			optionMenu
			-changeCommand "AEnxRagdollLocator_ShapeSetup_optionMenu_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_optionMenu";
			menuItem -label "Box";
			menuItem -label "Sphere";
			menuItem -label "Capsule";
			menuItem -label "ConvexHull";
			menuItem -label "TriangleMesh";
			menuItem -label "ClothSpheres";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
			text -label "";
			text -label "Size";
			floatField -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Sizex_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Sizex";
			floatField -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Sizey_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Sizey";
			floatField -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Sizez_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Sizez";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
			text -label "";
			text -label "Radius";
			floatField -minValue 0 -maxValue 100 -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Radius_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Radius";
			text -label "cm";
			floatSlider -min 0 -max 100
			-dragCommand "AEnxRagdollLocator_ShapeSetup_floatSlider_Radius_dragCommand"
			"AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
			text -label "";
			text -label "Height";
			floatField -minValue 0 -maxValue 100 -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Height_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Height";
			text -label "cm";
			floatSlider -min 0 -max 100
			-dragCommand "AEnxRagdollLocator_ShapeSetup_floatSlider_Height_dragCommand"
			"AEnxRagdollLocator_ShapeSetup_floatSlider_Height";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
			text -label "";
			text -label "Inflate";
			floatField -minValue 0 -maxValue 100 -precision 2
			-changeCommand "AEnxRagdollLocator_ShapeSetup_floatField_Inflate_changeCommand"
			"AEnxRagdollLocator_ShapeSetup_floatField_Inflate";
			text -label "cm";
			floatSlider -min 0 -max 100
			-dragCommand "AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate_dragCommand"
			"AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate";
		setParent..;
	setUITemplate -ppt;

	AEnxRagdollLocatorShapeSetupReplace($plug);
}

global proc AEnxRagdollLocatorShapeSetupReplace(string $plug)
{
	//print ("AEnxRagdollLocatorShapeSetupReplace\n");
	int $test = `button -q -exists "AEnxRagdollLocator_ShapeSetup_button_Add"`;
	if($test < 1)
		return;

	global string $gRagdollLocator_CurRigidBody;
	global string $gRagdollLocator_CurShape;

	float $gRagdollShapeSetup_Size[];
	int $gRagdollShapeSetup_ShapeType;
	float $gRagdollShapeSetup_Radius;
	float $gRagdollShapeSetup_Height;
	float $gRagdollShapeSetup_Inflate;

	if($gRagdollLocator_CurRigidBody != "")
	{
		button -e -enable true
		"AEnxRagdollLocator_ShapeSetup_button_Add";
		button -e -enable true
		"AEnxRagdollLocator_ShapeSetup_button_Select";
		button -e -enable true
		"AEnxRagdollLocator_ShapeSetup_button_Delete";
		button -e -enable true
		"AEnxRagdollLocator_ShapeSetup_button_Rename";

		textScrollList -e -removeAll -enable true "AEnxRagdollLocator_ShapeSetup_textScrollList";

		string $shapelists[];
		$shapelists = `listConnections -shapes true -et true -type "physicsShape" $gRagdollLocator_CurRigidBody`;
		for($shape in $shapelists)
		{
			textScrollList -e -append $shape "AEnxRagdollLocator_ShapeSetup_textScrollList";
		}

		$gRagdollShapeSetup_Size[0] = 0;
		$gRagdollShapeSetup_Size[1] = 0;
		$gRagdollShapeSetup_Size[2] = 0;
		$gRagdollShapeSetup_Radius = 0;
		$gRagdollShapeSetup_Height = 0;
		$gRagdollShapeSetup_Inflate = 0;

		floatField -e -value $gRagdollShapeSetup_Size[0] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizex";
		floatField -e -value $gRagdollShapeSetup_Size[1] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizey";
		floatField -e -value $gRagdollShapeSetup_Size[2] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizez";

		floatField -e -value $gRagdollShapeSetup_Radius -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Radius";
		floatSlider -e -value $gRagdollShapeSetup_Radius -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";
		floatField -e -value $gRagdollShapeSetup_Height -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Height";
		floatSlider -e -value $gRagdollShapeSetup_Height -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Height";
		floatField -e -value $gRagdollShapeSetup_Inflate -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Inflate";
		floatSlider -e -value $gRagdollShapeSetup_Inflate -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate";

		if($gRagdollLocator_CurShape != "")
		{
			textScrollList -e -selectItem $gRagdollLocator_CurShape "AEnxRagdollLocator_ShapeSetup_textScrollList";

			$gRagdollShapeSetup_ShapeType = `getAttr ($gRagdollLocator_CurShape + ".shapeType")`;
			optionMenu -e -select $gRagdollShapeSetup_ShapeType -enable true
			"AEnxRagdollLocator_ShapeSetup_optionMenu";
				
			switch($gRagdollShapeSetup_ShapeType)
			{
			case 1:// kBox
				{
					$gRagdollShapeSetup_Size = `getAttr ($gRagdollLocator_CurShape + ".size")`;
					floatField -e -value $gRagdollShapeSetup_Size[0] -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Sizex";
					floatField -e -value $gRagdollShapeSetup_Size[1] -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Sizey";
					floatField -e -value $gRagdollShapeSetup_Size[2] -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Sizez";
				}
				break;
			case 2:// kSphere
			case 6:// kClothSpheres
				{
					$gRagdollShapeSetup_Radius = `getAttr ($gRagdollLocator_CurShape + ".radius")`;
					floatField -e -value $gRagdollShapeSetup_Radius -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Radius";
					floatSlider -e -value $gRagdollShapeSetup_Radius -enable true
					"AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";
				}
				break;
			case 3:// kCapsule
				{
					$gRagdollShapeSetup_Radius = `getAttr ($gRagdollLocator_CurShape + ".radius")`;
					floatField -e -value $gRagdollShapeSetup_Radius -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Radius";
					floatSlider -e -value $gRagdollShapeSetup_Radius -enable true
					"AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";

					$gRagdollShapeSetup_Height = `getAttr ($gRagdollLocator_CurShape + ".height")`;
					floatField -e -value $gRagdollShapeSetup_Height -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Height";
					floatSlider -e -value $gRagdollShapeSetup_Height -enable true
					"AEnxRagdollLocator_ShapeSetup_floatSlider_Height";
				}
				break;
			case 4:// kConvexHull
				{
					$gRagdollShapeSetup_Inflate = `getAttr ($gRagdollLocator_CurShape + ".inflate")`;
					floatField -e -value $gRagdollShapeSetup_Inflate -enable true
					"AEnxRagdollLocator_ShapeSetup_floatField_Inflate";
					floatSlider -e -value $gRagdollShapeSetup_Inflate -enable true
					"AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate";
				}
				break;
			case 5:// kTriangleMesh
			default:
				break;
			}
		}
		else
		{
			$gRagdollShapeSetup_ShapeType = 1;
			optionMenu -e -select $gRagdollShapeSetup_ShapeType -enable false
			"AEnxRagdollLocator_ShapeSetup_optionMenu";
		}
	}
	else
	{
		button -e -enable false
		"AEnxRagdollLocator_ShapeSetup_button_Add";
		button -e -enable false
		"AEnxRagdollLocator_ShapeSetup_button_Select";
		button -e -enable false
		"AEnxRagdollLocator_ShapeSetup_button_Delete";
		button -e -enable false
		"AEnxRagdollLocator_ShapeSetup_button_Rename";

		textScrollList -e -removeAll -enable false "AEnxRagdollLocator_ShapeSetup_textScrollList";

		$gRagdollShapeSetup_Size[0] = 0;
		$gRagdollShapeSetup_Size[1] = 0;
		$gRagdollShapeSetup_Size[2] = 0;
		$gRagdollShapeSetup_ShapeType = 1;
		$gRagdollShapeSetup_Radius = 0;
		$gRagdollShapeSetup_Height = 0;
		$gRagdollShapeSetup_Inflate = 0;

		floatField -e -value $gRagdollShapeSetup_Size[0] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizex";
		floatField -e -value $gRagdollShapeSetup_Size[1] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizey";
		floatField -e -value $gRagdollShapeSetup_Size[2] -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Sizez";

		optionMenu -e -select $gRagdollShapeSetup_ShapeType -enable false
		"AEnxRagdollLocator_ShapeSetup_optionMenu";

		floatField -e -value $gRagdollShapeSetup_Radius -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Radius";
		floatSlider -e -value $gRagdollShapeSetup_Radius -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Radius";
		floatField -e -value $gRagdollShapeSetup_Height -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Height";
		floatSlider -e -value $gRagdollShapeSetup_Height -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Height";
		floatField -e -value $gRagdollShapeSetup_Inflate -enable false
		"AEnxRagdollLocator_ShapeSetup_floatField_Inflate";
		floatSlider -e -value $gRagdollShapeSetup_Inflate -enable false
		"AEnxRagdollLocator_ShapeSetup_floatSlider_Inflate";
	}
	AEnxRagdollLocator_selectDefaultShapeIntList();
}

global proc AEnxRagdollLocator_ConnectedTo_Bone_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_ConnectedTo_Bone_optionMenu_changeCommand\n");

	if(`optionMenu -exists "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu"`) 
 	{
 		deleteUI "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu";
 	}
	setParent "AEnxRagdollLocator_ConnectedTo_Shape_rowLayout";
		optionMenu
		-changeCommand "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu_changeCommand"
		"AEnxRagdollLocator_ConnectedTo_Shape_optionMenu";
		menuItem -label "Disabled";

	global string $gRagdollLocator_CurShape;
	string $currentRigidBody = `optionMenu -q -value "AEnxRagdollLocator_ConnectedTo_Bone_optionMenu"`;
	if($currentRigidBody != "Disabled") 
	{
		string $currentPhysicsShapeArray[] = `listConnections -shapes true -t "physicsShape" ($currentRigidBody + ".physicsShapes")`;
		string $removedPhysicsShapeArray[] = {$gRagdollLocator_CurShape};
		$currentPhysicsShapeArray = stringArrayRemoveExact($removedPhysicsShapeArray, $currentPhysicsShapeArray);

		int $selectItem = 1;
		for($i = 0; $i < `size($currentPhysicsShapeArray)`; $i++)
		{
			if (`getAttr  ($currentPhysicsShapeArray[$i] + ".shapeType")` == 6)
			{
				if(`isConnected ($gRagdollLocator_CurShape+".message") ($currentPhysicsShapeArray[$i] + ".connectToClothSphere")` == false)
				{
					menuItem -label $currentPhysicsShapeArray[$i];
					$selectItem = 2;
				}
			}
		}
	}
	setParent ..;
}

global proc AEnxRagdollLocator_ConnectedTo_Shape_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_ConnectedTo_Shape_optionMenu_changeCommand\n");
}

global proc AEnxRagdollLocatorConnectedTo_Load_textScrollList()
{
	//print ("AEnxRagdollLocatorConnectedTo_Load_textScrollList\n");

	textScrollList -e -removeAll "AEnxRagdollLocator_ConnectedTo_textScrollList";
	int $enable = false;
	global string $gRagdollLocator_CurRigidBody;
	if($gRagdollLocator_CurRigidBody != "")
	{
		$enable = true;
	}
	if($enable)
	{
		string $shapelists[];
		$shapelists = `listConnections -shapes true -et true -type "physicsShape" $gRagdollLocator_CurRigidBody`;
		for($shape in $shapelists)
		{
			string $currentPhysicsShapeClothSphereAttr = $shape + ".connectToClothSphere";
			string $connectedShapes[] = `listConnections -shapes true -t "physicsShape" $currentPhysicsShapeClothSphereAttr`;
			for($connectedShape in $connectedShapes)
			{
				string $value = $shape + "." + $connectedShape;
				textScrollList -e -append $value "AEnxRagdollLocator_ConnectedTo_textScrollList";
			}
		}
	}
	textScrollList -e -enable $enable "AEnxRagdollLocator_ConnectedTo_textScrollList";
}

global proc AEnxRagdollLocator_ConnectedTo_Add_button_changeCommand()
{
	//print ("AEnxRagdollLocator_ConnectedTo_Add_button_changeCommand\n");
	
	string $connectToPhysicsShape = `optionMenu -q -value "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu"`;
	if($connectToPhysicsShape == "Disabled")
	{
		return;
	}

	global string $gRagdollLocator_CurShape;
	string $connectToPhysicsMessageAttr = $connectToPhysicsShape + ".message";
	string $currentPhysicsShapeClothSphereAttr = $gRagdollLocator_CurShape + ".connectToClothSphere";
	if(`isConnected $connectToPhysicsMessageAttr $currentPhysicsShapeClothSphereAttr` == true)
	{
		return;
	}

	string $cmd = "connectAttr -force " +  $connectToPhysicsMessageAttr + " " + $currentPhysicsShapeClothSphereAttr;
	evalEcho $cmd;

	AEnxRagdollLocatorConnectedTo_Load_textScrollList();
}

global proc AEnxRagdollLocator_ConnectedTo_Remove_button_changeCommand()
{
	//print ("AEnxRagdollLocator_ConnectedTo_Remove_button_changeCommand\n");

	string $selectPairs[] = `textScrollList -q -selectItem "AEnxRagdollLocator_ConnectedTo_textScrollList"`;
	if(size($selectPairs) == 0)
	{
		return;
	}

	string $selectPair = $selectPairs[0];
	string $buff[];
	tokenize($selectPair, ".", $buff);
	string $shape0 = $buff[0];
	string $shape1 = $buff[1];
	string $connectToPhysicsMessageAttr = $shape1 + ".message";
	string $currentPhysicsShapeClothSphereAttr = $shape0 + ".connectToClothSphere";
	if(`isConnected $connectToPhysicsMessageAttr $currentPhysicsShapeClothSphereAttr` == false)
	{
		return;
	}
	
	string $cmd = "disconnectAttr " +  $connectToPhysicsMessageAttr + " " + $currentPhysicsShapeClothSphereAttr;
	evalEcho $cmd;

	AEnxRagdollLocatorConnectedTo_Load_textScrollList();
}

global proc AEnxRagdollLocatorConnectedToNew(string $plug)
{
	//print ("AEnxRagdollLocatorConnectedToNew\n");

	setUITemplate -pst attributeEditorTemplate;

	rowLayout -numberOfColumns 3 -columnWidth3 1 100 150 -columnAttach3 "both" "right" "both"
		"AEnxRagdollLocator_ConnectedTo_Bone_rowLayout";
	text -label "";
	text -label "Bone";
	setParent..;

	rowLayout -numberOfColumns 3 -columnWidth3 1 100 150 -columnAttach3 "both" "right" "both"
		"AEnxRagdollLocator_ConnectedTo_Shape_rowLayout";
	text -label "";
	text -label "Shape";
	setParent..;

	rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "both" "both";
	text -label "";
	button -label "Add" -command "AEnxRagdollLocator_ConnectedTo_Add_button_changeCommand"
		"AEnxRagdollLocator_ConnectedTo_Add_button";
	button -label "Remove" -command "AEnxRagdollLocator_ConnectedTo_Remove_button_changeCommand"
		"AEnxRagdollLocator_ConnectedTo_Remove_button";
	setParent..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
	text -label "";
	textScrollList -allowMultiSelection false 
	//-selectCommand "AEnxRagdollLocator_ConnectedTo_textScrollList_selectCommand"
	"AEnxRagdollLocator_ConnectedTo_textScrollList";
	setParent ..;
		
	setUITemplate -ppt;

	AEnxRagdollLocatorConnectedToReplace($plug);
}

global proc AEnxRagdollLocatorConnectedToReplace(string $plug)
{
	//print ("AEnxRagdollLocatorConnectedToReplace\n");
	int $test = `button -q -exists "AEnxRagdollLocator_ConnectedTo_Add_button"`;
	if($test < 1)
		return;

	int $enable = true;
	global string $gRagdollLocator_CurShape;
	if($gRagdollLocator_CurShape == "" || `getAttr ($gRagdollLocator_CurShape + ".shapeType")` != 6)
	{
		$enable = false;
	}

	button -e -enable $enable "AEnxRagdollLocator_ConnectedTo_Add_button";
	button -e -enable $enable "AEnxRagdollLocator_ConnectedTo_Remove_button";

	if(`optionMenu -exists "AEnxRagdollLocator_ConnectedTo_Bone_optionMenu"`) 
 	{
 		deleteUI "AEnxRagdollLocator_ConnectedTo_Bone_optionMenu";
 	}

	setParent "AEnxRagdollLocator_ConnectedTo_Bone_rowLayout";
		optionMenu -enable $enable
		-changeCommand "AEnxRagdollLocator_ConnectedTo_Bone_optionMenu_changeCommand"
		"AEnxRagdollLocator_ConnectedTo_Bone_optionMenu";
		menuItem -label "Disabled";
		if($enable)
		{
			global string $gRagdollLocator_AllRigidBodies[];
			int $i;
			for($i = 0; $i < `size($gRagdollLocator_AllRigidBodies)`; $i++)
			{
				menuItem -label $gRagdollLocator_AllRigidBodies[$i];
			}
		}
	setParent ..;

	if(`optionMenu -exists "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu"`) 
 	{
 		deleteUI "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu";
 	}
	setParent "AEnxRagdollLocator_ConnectedTo_Shape_rowLayout";
		optionMenu -enable $enable
		-changeCommand "AEnxRagdollLocator_ConnectedTo_Shape_optionMenu_changeCommand"
		"AEnxRagdollLocator_ConnectedTo_Shape_optionMenu";
		menuItem -label "Disabled";
	setParent ..;

	AEnxRagdollLocatorConnectedTo_Load_textScrollList();
}

global proc AEnxRagdollLocator_ShapeSetup_SimulationSet_button_command()
{
	//print ("AEnxRagdollLocator_ShapeSetup_SimulationSet_button_command\n");

	global string $gRagdollLocator_CurRigidBody;
	createSimulationSetManagerWindow($gRagdollLocator_CurRigidBody);
}

global proc AEnxRagdollLocatorSimulationSetNew(string $plug)
{
	//print ("AEnxRagdollLocatorSimulationSetNew\n");

	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 2 -columnWidth2 1 200 -columnAttach2 "both" "both";
			text -label "";
			button -label "Setup Simulation Sets"
			-command "AEnxRagdollLocator_ShapeSetup_SimulationSet_button_command"
			"AEnxRagdollLocator_ShapeSetup_SimulationSet_button";
		setParent ..;
			rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
			text -label "";
			textScrollList -allowMultiSelection false
			"AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList";
		setParent..;
	setUITemplate -ppt;

	AEnxRagdollLocatorSimulationSetReplace($plug);
}

global proc AEnxRagdollLocatorSimulationSetReplace(string $plug)
{
	//print ("AEnxRagdollLocatorSimulationSetReplace\n");
	int $test = `button -q -exists "AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList"`;
	if($test < 1)
		return;

	textScrollList -e -removeAll "AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList";
	
	global string $gRagdollLocator_CurRigidBody;
	if($gRagdollLocator_CurRigidBody != "")
	{
		button -e -enable true "AEnxRagdollLocator_ShapeSetup_SimulationSet_button";
		textScrollList -e -enable true "AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList";

		string $shapes[] = `listRelatives -ad -fullPath -type "physicsShape" $gRagdollLocator_CurRigidBody`;
		string $simuSets[];
		for($shape in $shapes)
		{
			string $sets[] = `simulationSets -ls $shape`;
			int $i = 0;
			for($set in $sets)
			{
				if($set != "")
				{
					int $bNew = true;
					for($known in $simuSets)
					{
						if($set == $known)
						{
							$bNew = false;
						}
					}
					if($bNew)
					{
						textScrollList -edit -append ($set) "AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList";
						$simuSets[$i] = $set;
						$i++;
					}
				}
			}		
		}
	}
	else
	{
		button -e -enable false "AEnxRagdollLocator_ShapeSetup_SimulationSet_button";
		textScrollList -e -enable false "AEnxRagdollLocator_ShapeSetup_SimulationSet_textScrollList";
	}
}

global proc AEnxRagdollLocator_UpdateRig_Simulation_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_UpdateRig_Simulation_optionMenu_changeCommand\n");
}

global proc AEnxRagdollLocator_UpdateRig_EditMode_Set_radioButton_onCommand()
{
	//print ("AEnxRagdollLocator_UpdateRig_EditMode_Set_radioButton_onCommand\n");

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	$gRagdollLocator_UpdateRig_EditMode_Type = 1;

	AEnxRagdollLocatorPhysicalMaterialReplace("");
	AEnxRagdollLocatorAdvancedReplace("");
}

global proc AEnxRagdollLocator_UpdateRig_EditMode_Scale_radioButton_onCommand()
{
	//print ("AEnxRagdollLocator_UpdateRig_EditMode_Scale_radioButton_onCommand\n");

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	$gRagdollLocator_UpdateRig_EditMode_Type = 2;

	AEnxRagdollLocatorPhysicalMaterialReplace("");
	AEnxRagdollLocatorAdvancedReplace("");
}

global proc AEnxRagdollLocator_UpdateRig_EditMode_Reg_radioButton_onCommand()
{
	//print ("AEnxRagdollLocator_UpdateRig_EditMode_Reg_radioButton_onCommand\n");

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	$gRagdollLocator_UpdateRig_EditMode_Type = 3;

	AEnxRagdollLocatorPhysicalMaterialReplace("");
	AEnxRagdollLocatorAdvancedReplace("");
}

global proc AEnxRagdollLocator_UpdateRig_Regen_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_UpdateRig_Regen_optionMenu_changeCommand\n");
}

global proc string AEnxRagdollLocator_UpdateRig_GetShapeName(int $type)
{
	switch ($type)
	{
	case 0:
        return "None";
	case 1:
		return "Box";
	case 2:
		return "Sphere";
	case 3:
		return "Capsule";
	case 4:
		return "Convex hull";
	case 5:
		return "Triangle Mesh";
	case 6:
		return "ClothSpheres";
	default:
		return "Unknown type";
	}
}

global proc AEnxRagdollLocator_UpdateRig_UpdateRig_button_command()
{
	//print ("AEnxRagdollLocator_UpdateRig_UpdateRig_button_command\n");

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	if($gRagdollLocator_UpdateRig_EditMode_Type != 3)
		return;

	AEnxRagdollLocator_InitParams;
	AEnxRagdollLocator_GetAllRigidbodies;

	int $nShapeType = 3;  // capsule
	global string $gRagdollLocator_AllRigidBodies[];
	for($rigidBody in $gRagdollLocator_AllRigidBodies)
	{
		string $shapelists[];
		$shapelists = `listConnections -shapes true -et true -type "physicsShape" $rigidBody`;
		
		if(`size $shapelists` > 0)
		{
			$nShapeType = getAttr ($shapelists[0] + ".shapeType");
		}
		for($select in $shapelists)
		{
			string $rb[] = `listConnections -d on -s off -type "nxRigidBody" ($select+".outPhysicsShape")`;
			$psUnderRB = `listConnections -d off -s on -type "physicsShape" ($rb[0]+".physicsShapes")`;
			if(size($psUnderRB) == 1)
				warning ( $select + " to be deleted, is last physic shape in the rigidbody.\n" );
			
			$shapeParents = `listRelatives -fullPath -parent -type "transform" -path $select`;
			if (`nodeType $shapeParents[0]`!="transform")
			{
				warning "Unable to find physics shape's transform parent. Only Physics Shape deleted.\n";
				delete $select;
			}
			else
			{
				$shapeParent = $shapeParents[0];
				delete $shapeParent;
			}
		}
	}
	
	global int $gRagdollLocator_General_Rig_Type, $gRagdollUseBonePoints;
	global string $gnxRagdollLocatorJointList, $gSourceShapeMeshList, $gRBIndicatorLabel;
	global float $gRagdollInflateValue, $gRagdollWeightValue;

	string $shapeType = AEnxRagdollLocator_UpdateRig_GetShapeName($nShapeType);
	int $simulateType = 1 - $gRagdollLocator_General_Rig_Type;
	
	$selectedJoints = `textScrollList -q -ai $gnxRagdollLocatorJointList`;
	$selectedMeshes = `textScrollList -q -si $gSourceShapeMeshList`;
	if( size( $selectedMeshes ) == 0 )
	{
		$selectedMeshes = `textScrollList -q -ai $gSourceShapeMeshList`;
		print "Selecting all meshes in the list, since no mesh had been specified. \n";
	}
	
	global string $gAEnxRagdollLocatorNodeName;
	if( size( $selectedJoints ) == 0 )
		error "There's no joint(s) in the list or no joint(s) are selected. Regenerate will not continue.\n";
	else
	{
		print "Regenerating Ragdoll..\n";
		select -clear;
		select -add $selectedMeshes;
		print "joints selected for ragdoll regeneration: ";
		for( $select in $selectedJoints )
		{
			string $selectedJoint = $select;
			if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
			{
				$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			}
			
			print ($selectedJoint+" ");
			select -add $selectedJoint;
		}
		print "\n";
		
		string $cmd = "GenerateRagdollCmd -w " + $gRagdollWeightValue + "  -i " + $gRagdollInflateValue + " -st \""+ $shapeType + "\" -mk " + $simulateType + " -bp " + $gRagdollUseBonePoints;
		evalEcho $cmd;		

		for( $select in $selectedJoints )
		{
			string $selectedJoint = $select;
			if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
			{
				$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			}
			
			$rb = `listRelatives -fullPath -children -type "nxRigidBody" $selectedJoint`;
			if( size($rb) > 0 )
				reorder -front $rb[0];
		}

		$rdLocator = $gAEnxRagdollLocatorNodeName;
		$rdLocatorTransform = `listRelatives -fullPath -parent -type "transform" $rdLocator`;
		reorder -front $rdLocatorTransform[0];
	}

	select $gAEnxRagdollLocatorNodeName;
}

global proc AEnxRagdollLocator_UpdateRig_Mirror_button_command()
{
	//print ("AEnxRagdollLocator_UpdateRig_Mirror_button_command\n");

	mirrorRigidBodyGUI;
}

global proc AEnxRagdollLocator_UpdateRig_Bake_button_command()
{
	//print ("AEnxRagdollLocator_UpdateRig_Bake_button_command\n");

	nxBakeAll;
}

global proc AEnxRagdollLocatorUpdateRigNew(string $plug)
{
	//print ("AEnxRagdollLocatorUpdateRigNew\n");

	setUITemplate -pst attributeEditorTemplate;

	/*
		rowLayout -numberOfColumns 3 -columnWidth3 1 150 100 -columnAttach3 "both" "right" "both";
		text -label "";
		text -label "Apply By Simulation Set";
		optionMenu
			-changeCommand "AEnxRagdollLocator_UpdateRig_Simulation_optionMenu_changeCommand"
			"AEnxRagdollLocator_UpdateRig_Simulation_optionMenu";
		menuItem -label "All";
		menuItem -label "Selected";
		setParent..;
	*/

		rowLayout -numberOfColumns 5 -columnWidth5 1 100 80 80 80 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Edit Mode";
		radioCollection;
		radioButton -label "Set Values"
			-onCommand "AEnxRagdollLocator_UpdateRig_EditMode_Set_radioButton_onCommand"
			"AEnxRagdollLocator_UpdateRig_EditMode_Set_radioButton";
		radioButton -label "Scale Values"
			-onCommand "AEnxRagdollLocator_UpdateRig_EditMode_Scale_radioButton_onCommand"
			"AEnxRagdollLocator_UpdateRig_EditMode_Scale_radioButton";
		radioButton -label "Regenerate"
			-onCommand "AEnxRagdollLocator_UpdateRig_EditMode_Reg_radioButton_onCommand"
			"AEnxRagdollLocator_UpdateRig_EditMode_Reg_radioButton";
		setParent..;

		rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "right" "both";
		text -label "";
		text -label "Regen";
		optionMenu
			-changeCommand "AEnxRagdollLocator_UpdateRig_Regen_optionMenu_changeCommand"
			"AEnxRagdollLocator_UpdateRig_Regen_optionMenu";
		menuItem -label "Meshes";
		menuItem -label "Bones";	
		setParent..;

		rowLayout -numberOfColumns 4 -columnWidth4 1 100 100 100 -columnAttach4 "both" "both" "both" "both";
		text -label "";
		button -label "Update Rig" 
			-command "AEnxRagdollLocator_UpdateRig_UpdateRig_button_command"
			"AEnxRagdollLocator_UpdateRig_UpdateRig_button";
		button -label "Mirror"
			-command "AEnxRagdollLocator_UpdateRig_Mirror_button_command"
			"AEnxRagdollLocator_UpdateRig_Mirror_button";
		button -label "Bake"
			-command "AEnxRagdollLocator_UpdateRig_Bake_button_command"
			"AEnxRagdollLocator_UpdateRig_Bake_button";
	setParent ..;
	setUITemplate -ppt;

	AEnxRagdollLocatorUpdateRigReplace($plug);
}

global proc AEnxRagdollLocatorUpdateRigReplace(string $plug)
{
	//print ("AEnxRagdollLocatorUpdateRigReplace\n");

	global int $gRagdollLocator_UpdateRig_Simulation_Type;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global int $gRagdollLocator_UpdateRig_Regen_Type;

	/*
	optionMenu -e -select $gRagdollLocator_UpdateRig_Simulation_Type
		"AEnxRagdollLocator_UpdateRig_Simulation_optionMenu";
		*/

	switch($gRagdollLocator_UpdateRig_EditMode_Type)
	{
	case 1:
		{
		radioButton -e -select
			"AEnxRagdollLocator_UpdateRig_EditMode_Set_radioButton";
		}
		break;
	case 2:
		{
		radioButton -e -select
			"AEnxRagdollLocator_UpdateRig_EditMode_Scale_radioButton";
		}
		break;
	case 3:
		{
		radioButton -e -select
			"AEnxRagdollLocator_UpdateRig_EditMode_Reg_radioButton";
		}
		break;
	default:
		break;
	}

	optionMenu -e -select $gRagdollLocator_UpdateRig_Regen_Type
		"AEnxRagdollLocator_UpdateRig_Regen_optionMenu";
}

global proc AEnxRagdollLocator_OverrideMassOrDensity_optionMenu_changeCommand()
{
	//print ("AEnxRagdollLocator_OverrideMassOrDensity_optionMenu_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollOverrideMassOrDensity =
		`optionMenu -q -select "AEnxRagdollLocator_OverrideMassOrDensity_optionMenu"`;

	//setAttr ($gRagdollLocator_CurRigidBody + ".overrideMassOrDensity") $gRagdollOverrideMassOrDensity;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".overrideMassOrDensity") $gRagdollOverrideMassOrDensity;
	};

	int $enableMass = 0;
	int $enableDensity = 0;
	switch ($gRagdollOverrideMassOrDensity) {
        case 2:
            $enableMass = 1;
            break;
        case 3:
            $enableDensity = 1;
            break;
        default:
            break;
    }

	floatField -e -enable $enableMass "AEnxRagdollLocator_Mass_floatField";
	floatSlider -e -enable $enableMass "AEnxRagdollLocator_Mass_floatSlider";

	floatField -e -enable $enableDensity "AEnxRagdollLocator_Density_floatField";
	floatSlider -e -enable $enableDensity "AEnxRagdollLocator_Density_floatSlider";
}

global proc AEnxRagdollLocator_Density_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_Density_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollDensity = `floatSlider -q -value "AEnxRagdollLocator_Density_floatSlider"`;

	floatField -e -value $gRagdollDensity "AEnxRagdollLocator_Density_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".density") $gRagdollDensity;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".density") $gRagdollDensity;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".density")`;
		$gRagdollDensity = $gRagdollDensity * $value;

		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".density") $gRagdollDensity;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_Density_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_Density_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollDensity = `floatField -q -value "AEnxRagdollLocator_Density_floatField"`;

	floatSlider -e -value $gRagdollDensity "AEnxRagdollLocator_Density_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".density") $gRagdollDensity;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".density") $gRagdollDensity;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".density")`;
		$gRagdollDensity = $gRagdollDensity * $value;

		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".density") $gRagdollDensity;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_Mass_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_Mass_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollMass = `floatSlider -q -value "AEnxRagdollLocator_Mass_floatSlider"`;

	floatField -e -value $gRagdollMass "AEnxRagdollLocator_Mass_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".mass") $gRagdollMass;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".mass") $gRagdollMass;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".mass")`;
		$gRagdollMass = $gRagdollMass * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".mass") $gRagdollMass;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_Mass_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_Mass_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollMass = `floatField -q -value "AEnxRagdollLocator_Mass_floatField"`;

	floatSlider -e -value $gRagdollMass "AEnxRagdollLocator_Mass_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".mass") $gRagdollMass;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".mass") $gRagdollMass;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".mass")`;
		$gRagdollMass = $gRagdollMass * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".mass") $gRagdollMass;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_StaticFriction_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_StaticFriction_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollStaticFriction = `floatSlider -q -value "AEnxRagdollLocator_StaticFriction_floatSlider"`;

	floatField -e -value $gRagdollStaticFriction "AEnxRagdollLocator_StaticFriction_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".staticFriction") $gRagdollStaticFriction;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".staticFriction") $gRagdollStaticFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{		
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".staticFriction")`;
		$gRagdollStaticFriction = $gRagdollStaticFriction * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".staticFriction") $gRagdollStaticFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_StaticFriction_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_StaticFriction_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollStaticFriction = `floatField -q -value "AEnxRagdollLocator_StaticFriction_floatField"`;

	floatSlider -e -value $gRagdollStaticFriction "AEnxRagdollLocator_StaticFriction_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".staticFriction") $gRagdollStaticFriction;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".staticFriction") $gRagdollStaticFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{		
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".staticFriction")`;
		$gRagdollStaticFriction = $gRagdollStaticFriction * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".staticFriction") $gRagdollStaticFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_DynamicFriction_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_DynamicFriction_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollDynamicFriction = `floatSlider -q -value "AEnxRagdollLocator_DynamicFriction_floatSlider"`;

	floatField -e -value $gRagdollDynamicFriction "AEnxRagdollLocator_DynamicFriction_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".dynamicFriction") $gRagdollDynamicFriction;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".dynamicFriction") $gRagdollDynamicFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{	
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".dynamicFriction")`;
		$gRagdollDynamicFriction = $gRagdollDynamicFriction * $value;
			
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".dynamicFriction") $gRagdollDynamicFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_DynamicFriction_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_DynamicFriction_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollDynamicFriction = `floatField -q -value "AEnxRagdollLocator_DynamicFriction_floatField"`;

	floatSlider -e -value $gRagdollDynamicFriction "AEnxRagdollLocator_DynamicFriction_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".dynamicFriction") $gRagdollDynamicFriction;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".dynamicFriction") $gRagdollDynamicFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{		
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".dynamicFriction")`;
		$gRagdollDynamicFriction = $gRagdollDynamicFriction * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".dynamicFriction") $gRagdollDynamicFriction;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_Bounciness_floatSlider_dragCommand()
{
	//print ("AEnxRagdollLocator_Bounciness_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollBounciness = `floatSlider -q -value "AEnxRagdollLocator_Bounciness_floatSlider"`;

	floatField -e -value $gRagdollBounciness "AEnxRagdollLocator_Bounciness_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".bounciness") $gRagdollBounciness;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".bounciness") $gRagdollBounciness;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{		
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".bounciness")`;
		$gRagdollBounciness = $gRagdollBounciness * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".bounciness") $gRagdollBounciness;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_Bounciness_floatField_changeCommand()
{
	//print ("AEnxRagdollLocator_Bounciness_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollBounciness = `floatField -q -value "AEnxRagdollLocator_Bounciness_floatField"`;

	floatSlider -e -value $gRagdollBounciness "AEnxRagdollLocator_Bounciness_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".bounciness") $gRagdollBounciness;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".bounciness") $gRagdollBounciness;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{		
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".bounciness")`;
		$gRagdollBounciness = $gRagdollBounciness * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".bounciness") $gRagdollBounciness;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocatorPhysicalMaterialNew(string $plug)
{
	//print ("AEnxRagdollLocatorPhysicalMaterialNew\n");

	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 3 -columnWidth3 1 150 100 -columnAttach3 "both" "right" "both";
		text -label "";
		text -label "Override Mass Or Density";
		optionMenu
			-changeCommand "AEnxRagdollLocator_OverrideMassOrDensity_optionMenu_changeCommand"
			"AEnxRagdollLocator_OverrideMassOrDensity_optionMenu";
		menuItem -label "Disable";
		menuItem -label "Mass";
		menuItem -label "Density";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Mass";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_Mass_floatField_changeCommand"
		"AEnxRagdollLocator_Mass_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_Mass_floatSlider_dragCommand"
		"AEnxRagdollLocator_Mass_floatSlider";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Density";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_Density_floatField_changeCommand"
		"AEnxRagdollLocator_Density_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_Density_floatSlider_dragCommand"
		"AEnxRagdollLocator_Density_floatSlider";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Static Friction";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_StaticFriction_floatField_changeCommand"
		"AEnxRagdollLocator_StaticFriction_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_StaticFriction_floatSlider_dragCommand"
		"AEnxRagdollLocator_StaticFriction_floatSlider";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Dynamic Friction";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_DynamicFriction_floatField_changeCommand"
		"AEnxRagdollLocator_DynamicFriction_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_DynamicFriction_floatSlider_dragCommand"
		"AEnxRagdollLocator_DynamicFriction_floatSlider";
		setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Bounciness";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_Bounciness_floatField_changeCommand"
		"AEnxRagdollLocator_Bounciness_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_Bounciness_floatSlider_dragCommand"
		"AEnxRagdollLocator_Bounciness_floatSlider";
		setParent..;
	setUITemplate -ppt;

	AEnxRagdollLocatorPhysicalMaterialReplace($plug);
}

global proc AEnxRagdollLocatorPhysicalMaterialReplace(string $plug)
{
	global int $gRagdollLocator_General_Rig_Type;
	if($gRagdollLocator_General_Rig_Type == 0)
	{
		return;
	}

	global string $gRagdollLocator_CurRigidBody;
	int $enable = false;
	if($gRagdollLocator_CurRigidBody != "")
	{
		$enable = true;
	}

	//print ("AEnxRagdollLocatorPhysicalMaterialReplace : " + $enable + "\n");

	int $gRagdollOverrideMassOrDensity;
	float $gRagdollDensity;
	float $gRagdollMass;
	float $gRagdollStaticFriction;
	float $gRagdollDynamicFriction;
	float $gRagdollBounciness;
	if($enable)
	{
		$gRagdollOverrideMassOrDensity = `getAttr ($gRagdollLocator_CurRigidBody + ".overrideMassOrDensity")`;
		$gRagdollOverrideMassOrDensity += 1;

		global int $gRagdollLocator_UpdateRig_EditMode_Type;
		if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
		{
			$gRagdollDensity = `getAttr ($gRagdollLocator_CurRigidBody + ".density")`;
			$gRagdollMass = `getAttr ($gRagdollLocator_CurRigidBody + ".mass")`;
			$gRagdollStaticFriction = `getAttr ($gRagdollLocator_CurRigidBody + ".staticFriction")`;
			$gRagdollDynamicFriction = `getAttr ($gRagdollLocator_CurRigidBody + ".dynamicFriction")`;
			$gRagdollBounciness = `getAttr ($gRagdollLocator_CurRigidBody + ".bounciness")`;
		}
		else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
		{
			$gRagdollDensity = 1;
			$gRagdollMass = 1;
			$gRagdollStaticFriction = 1;
			$gRagdollDynamicFriction = 1;
			$gRagdollBounciness = 1;
		}
		else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
		{
			$gRagdollDensity = `getAttr ($gRagdollLocator_CurRigidBody + ".density")`;
			$gRagdollMass = `getAttr ($gRagdollLocator_CurRigidBody + ".mass")`;
			$gRagdollStaticFriction = `getAttr ($gRagdollLocator_CurRigidBody + ".staticFriction")`;
			$gRagdollDynamicFriction = `getAttr ($gRagdollLocator_CurRigidBody + ".dynamicFriction")`;
			$gRagdollBounciness = `getAttr ($gRagdollLocator_CurRigidBody + ".bounciness")`;
		}
		else
		{
			$gRagdollDensity = 0;
			$gRagdollMass = 0;
			$gRagdollStaticFriction = 0;
			$gRagdollDynamicFriction = 0;
			$gRagdollBounciness = 0;
		}
	}
	else
	{
		$gRagdollOverrideMassOrDensity = 1;
		$gRagdollDensity = 0;
		$gRagdollMass = 0;
		$gRagdollStaticFriction = 0;
		$gRagdollDynamicFriction = 0;
		$gRagdollBounciness = 0;
	}

	optionMenu -e -select $gRagdollOverrideMassOrDensity -enable $enable
		"AEnxRagdollLocator_OverrideMassOrDensity_optionMenu";
	floatField -e -value $gRagdollMass -enable $enable
		"AEnxRagdollLocator_Mass_floatField";
	floatSlider -e -value $gRagdollMass -enable $enable
		"AEnxRagdollLocator_Mass_floatSlider";
	floatField -e -value $gRagdollDensity -enable $enable
		"AEnxRagdollLocator_Density_floatField";
	floatSlider -e -value $gRagdollDensity -enable $enable
		"AEnxRagdollLocator_Density_floatSlider";
	floatField -e -value $gRagdollStaticFriction -enable $enable
		"AEnxRagdollLocator_StaticFriction_floatField";
	floatSlider -e -value $gRagdollStaticFriction -enable $enable
		"AEnxRagdollLocator_StaticFriction_floatSlider";
	floatField -e -value $gRagdollDynamicFriction -enable $enable
		"AEnxRagdollLocator_DynamicFriction_floatField";
	floatSlider -e -value $gRagdollDynamicFriction -enable $enable
		"AEnxRagdollLocator_DynamicFriction_floatSlider";
	floatField -e -value $gRagdollBounciness -enable $enable
		"AEnxRagdollLocator_Bounciness_floatField";
	floatSlider -e -value $gRagdollBounciness -enable $enable
		"AEnxRagdollLocator_Bounciness_floatSlider";

	if($enable)
	{
		int $enableMass = 0;
		int $enableDensity = 0;
		switch ($gRagdollOverrideMassOrDensity) 
		{
			case 2:
				$enableMass = 1;
				break;
			case 3:
				$enableDensity = 1;
				break;
			default:
				break;
		}

		floatField -e -enable $enableMass "AEnxRagdollLocator_Mass_floatField";
		floatSlider -e -enable $enableMass "AEnxRagdollLocator_Mass_floatSlider";
		floatField -e -enable $enableDensity "AEnxRagdollLocator_Density_floatField";
		floatSlider -e -enable $enableDensity "AEnxRagdollLocator_Density_floatSlider";
	}
}

global proc AEnxRagdollLocator_ogic_checkBox_changeCommand()
{
	//print("AEnxRagdollLocator_ogic_checkBox_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollogic = `checkBox -q -value "AEnxRagdollLocator_ogic_checkBox"`;

	//setAttr ($gRagdollLocator_CurRigidBody + ".overrideGlobalIterationCount") $gRagdollogic;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".overrideGlobalIterationCount") $gRagdollogic;
	};
}

global proc AEnxRagdollLocator_pic_intField_changeCommand()
{
	//print("AEnxRagdollLocator_pic_intField_changeCommand\n");

	//global string $gRagdollLocator_CurRigidBody;

	int $gRagdollpic = `intField -q -value "AEnxRagdollLocator_pic_intField"`;

	intSlider -e -value $gRagdollpic "AEnxRagdollLocator_pic_intSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".positionIterationCount") $gRagdollpic;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".positionIterationCount") $gRagdollpic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".positionIterationCount")`;
		$gRagdollpic = $gRagdollpic * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".positionIterationCount") $gRagdollpic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_pic_intSlider_dragCommand()
{
	//print("AEnxRagdollLocator_pic_intSlider_dragCommand\n");

	//global string $gRagdollLocator_CurRigidBody;

	int $gRagdollpic = `intSlider -q -value "AEnxRagdollLocator_pic_intSlider"`;

	intField -e -value $gRagdollpic "AEnxRagdollLocator_pic_intField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".positionIterationCount") $gRagdollpic;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".positionIterationCount") $gRagdollpic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".positionIterationCount")`;
		$gRagdollpic = $gRagdollpic * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".positionIterationCount") $gRagdollpic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_vic_intField_changeCommand()
{
	//print("AEnxRagdollLocator_vic_intField_changeCommand\n");

	//global string $gRagdollLocator_CurRigidBody;

	int $gRagdollvic = `intField -q -value "AEnxRagdollLocator_vic_intField"`;

	intSlider -e -value $gRagdollvic "AEnxRagdollLocator_vic_intSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".velocityIterationCount") $gRagdollvic;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".velocityIterationCount") $gRagdollvic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".velocityIterationCount")`;
		$gRagdollvic = $gRagdollvic * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".velocityIterationCount") $gRagdollvic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_vic_intSlider_dragCommand()
{
	//print("AEnxRagdollLocator_vic_intSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollvic = `intSlider -q -value "AEnxRagdollLocator_vic_intSlider"`;

	intField -e -value $gRagdollvic "AEnxRagdollLocator_vic_intField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".velocityIterationCount") $gRagdollvic;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".velocityIterationCount") $gRagdollvic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".velocityIterationCount")`;
		$gRagdollvic = $gRagdollvic * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".velocityIterationCount") $gRagdollvic;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_cso_checkBox_changeCommand()
{
	//print("AEnxRagdollLocator_cso_checkBox_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollcso_i = `checkBox -q -value "AEnxRagdollLocator_cso_checkBox"`;

	//setAttr ($gRagdollLocator_CurRigidBody + ".contactShellOverride") $gRagdollcso_i;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];			
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".contactShellOverride") $gRagdollcso_i;
	};
}

global proc AEnxRagdollLocator_csd_floatField_changeCommand()
{
	//print("AEnxRagdollLocator_csd_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollcsd = `floatField -q -value "AEnxRagdollLocator_csd_floatField"`;

	floatSlider -e -value $gRagdollcsd "AEnxRagdollLocator_csd_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".contactShellDepth") $gRagdollcsd;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellDepth") $gRagdollcsd;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".contactShellDepth")`;
		$gRagdollcsd = $gRagdollcsd * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellDepth") $gRagdollcsd;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_csd_floatSlider_dragCommand()
{
	//print("AEnxRagdollLocator_csd_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollcsd = `floatSlider -q -value "AEnxRagdollLocator_csd_floatSlider"`;

	floatField -e -value $gRagdollcsd "AEnxRagdollLocator_csd_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".contactShellDepth") $gRagdollcsd;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellDepth") $gRagdollcsd;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".contactShellDepth")`;
		$gRagdollcsd = $gRagdollcsd * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellDepth") $gRagdollcsd;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_cso_floatField_changeCommand()
{
	//print("AEnxRagdollLocator_cso_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollcso = `floatField -q -value "AEnxRagdollLocator_cso_floatField"`;

	floatSlider -e -value $gRagdollcso "AEnxRagdollLocator_cso_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".contactShellOffset") $gRagdollcso;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellOffset") $gRagdollcso;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".contactShellOffset")`;
		$gRagdollcso = $gRagdollcso * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellOffset") $gRagdollcso;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_cso_floatSlider_dragCommand()
{
	//print("AEnxRagdollLocator_cso_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollcso = `floatSlider -q -value "AEnxRagdollLocator_cso_floatSlider"`;

	floatField -e -value $gRagdollcso "AEnxRagdollLocator_cso_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".contactShellOffset") $gRagdollcso;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellOffset") $gRagdollcso;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".contactShellOffset")`;
		$gRagdollcso = $gRagdollcso * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".contactShellOffset") $gRagdollcso;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_sto_checkBox_changeCommand()
{
	//print("AEnxRagdollLocator_sto_checkBox_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollsto = `checkBox -q -value "AEnxRagdollLocator_sto_checkBox"`;

	//setAttr ($gRagdollLocator_CurRigidBody + ".sleepThesholdsOverride") $gRagdollsto;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".sleepThesholdsOverride") $gRagdollsto;
	};
}

global proc AEnxRagdollLocator_set_floatField_changeCommand()
{
	//print("AEnxRagdollLocator_set_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollset = `floatField -q -value "AEnxRagdollLocator_set_floatField"`;

	floatSlider -e -value $gRagdollset "AEnxRagdollLocator_set_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".sleepEnergyThreshold") $gRagdollset;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".sleepEnergyThreshold") $gRagdollset;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".sleepEnergyThreshold")`;
		$gRagdollset = $gRagdollset * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".sleepEnergyThreshold") $gRagdollset;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_set_floatSlider_dragCommand()
{
	//print("AEnxRagdollLocator_set_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollset = `floatSlider -q -value "AEnxRagdollLocator_set_floatSlider"`;

	floatField -e -value $gRagdollset "AEnxRagdollLocator_set_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".sleepEnergyThreshold") $gRagdollset;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".sleepEnergyThreshold") $gRagdollset;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".sleepEnergyThreshold")`;
		$gRagdollset = $gRagdollset * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".sleepEnergyThreshold") $gRagdollset;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ld_floatField_changeCommand()
{
	//print("AEnxRagdollLocator_ld_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollld = `floatField -q -value "AEnxRagdollLocator_ld_floatField"`;

	floatSlider -e -value $gRagdollld "AEnxRagdollLocator_ld_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".linearDamping") $gRagdollld;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".linearDamping") $gRagdollld;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".linearDamping")`;
		$gRagdollld = $gRagdollld * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".linearDamping") $gRagdollld;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ld_floatSlider_dragCommand()
{
	//print("AEnxRagdollLocator_ld_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollld = `floatSlider -q -value "AEnxRagdollLocator_ld_floatSlider"`;

	floatField -e -value $gRagdollld "AEnxRagdollLocator_ld_floatField";

	//setAttr ($gRagdollLocator_CurRigidBody + ".linearDamping") $gRagdollld;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".linearDamping") $gRagdollld;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".linearDamping")`;
		$gRagdollld = $gRagdollld * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".linearDamping") $gRagdollld;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ad_floatField_changeCommand()
{
	//print("AEnxRagdollLocator_ad_floatField_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollad = `floatField -q -value "AEnxRagdollLocator_ad_floatField"`;

	floatSlider -e -value $gRagdollad "AEnxRagdollLocator_ad_floatSlider";

	//setAttr ($gRagdollLocator_CurRigidBody + ".angularDamping") $gRagdollad;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".angularDamping") $gRagdollad;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".angularDamping")`;
		$gRagdollad = $gRagdollad * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".angularDamping") $gRagdollad;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ad_floatSlider_dragCommand()
{
	//print("AEnxRagdollLocator_ad_floatSlider_dragCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	float $gRagdollad = `floatSlider -q -value "AEnxRagdollLocator_ad_floatSlider"`;

	floatField -e -value $gRagdollad "AEnxRagdollLocator_ad_floatFiead";

	//setAttr ($gRagdollLocator_CurRigidBody + ".angularDamping") $gRagdollad;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".angularDamping") $gRagdollad;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		$rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$value = `getAttr ($rigidbody + ".angularDamping")`;
		$gRagdollad = $gRagdollad * $value;
		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".angularDamping") $gRagdollad;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_comm_optionMenu_changeCommand()
{
	//print("AEnxRagdollLocator_comm_optionMenu_changeCommand\n");

	global string $gRagdollLocator_CurRigidBody;

	int $gRagdollcomm = `optionMenu -q -select "AEnxRagdollLocator_comm_optionMenu"`;
	$gRagdollcomm = $gRagdollcomm - 1;

	//setAttr ($gRagdollLocator_CurRigidBody + ".centerOfMassMode") $gRagdollcomm;
	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	for ($rigidbody in $gRagdollLocator_AllRigidBodies)
	{
		setAttr ($rigidbody + ".centerOfMassMode") $gRagdollcomm;
	};
}

global proc AEnxRagdollLocator_como_floatField_x_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_como_floatField_x"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".centerOfMassOverrideX") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".centerOfMassOverrideX")`;
			setAttr ($rigidbody + ".centerOfMassOverrideX") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_como_floatField_y_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_como_floatField_y"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".centerOfMassOverrideY") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".centerOfMassOverrideY")`;
			setAttr ($rigidbody + ".centerOfMassOverrideY") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_como_floatField_z_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_como_floatField_z"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".centerOfMassOverrideZ") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".centerOfMassOverrideZ")`;
			setAttr ($rigidbody + ".centerOfMassOverrideZ") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_iv_floatField_x_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_iv_floatField_x"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialVelocityX") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialVelocityX")`;
			setAttr ($rigidbody + ".initialVelocityX") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_iv_floatField_y_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_iv_floatField_y"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialVelocityY") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialVelocityY")`;
			setAttr ($rigidbody + ".initialVelocityY") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_iv_floatField_z_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_iv_floatField_z"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialVelocityZ") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialVelocityZ")`;
			setAttr ($rigidbody + ".initialVelocityZ") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_is_floatField_x_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_is_floatField_x"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialSpinX") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialSpinX")`;
			setAttr ($rigidbody + ".initialSpinX") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_is_floatField_y_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_is_floatField_y"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialSpinY") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialSpinY")`;
			setAttr ($rigidbody + ".initialSpinY") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_is_floatField_z_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_is_floatField_z"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			setAttr ($rigidbody + ".initialSpinZ") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$value_old = `getAttr ($rigidbody + ".initialSpinZ")`;
			setAttr ($rigidbody + ".initialSpinZ") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ip_floatField_x_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_ip_floatField_x"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".translateX") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".translateX")`;
			setAttr ($rbTransform[0] + ".translateX") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ip_floatField_y_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_ip_floatField_y"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".translateY") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".translateY")`;
			setAttr ($rbTransform[0] + ".translateY") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_ip_floatField_z_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_ip_floatField_z"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".translateZ") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".translateZ")`;
			setAttr ($rbTransform[0] + ".translateZ") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_io_floatField_x_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_io_floatField_x"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".rotateX") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".rotateX")`;
			setAttr ($rbTransform[0] + ".rotateX") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_io_floatField_y_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_io_floatField_y"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".rotateY") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".rotateY")`;
			setAttr ($rbTransform[0] + ".rotateY") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocator_io_floatField_z_changeCommand()
{
	$value = `floatField -q -value "AEnxRagdollLocator_io_floatField_z"`;

	global int $gRagdollLocator_UpdateRig_EditMode_Type;
	global string $gRagdollLocator_AllRigidBodies[];
	if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
	{		
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			setAttr ($rbTransform[0] + ".rotateZ") $value;
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
	{
		for ($rigidbody in $gRagdollLocator_AllRigidBodies)
		{
			$rbTransform = `listRelatives -fullPath -parent -type transform $rigidbody`;
			$value_old = `getAttr ($rbTransform[0] + ".rotateZ")`;
			setAttr ($rbTransform[0] + ".rotateZ") ($value_old * $value);
		};
	}
	else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
	{}
	else
	{
		error ("param exception\n");
	}
}

global proc AEnxRagdollLocatorAdvancedNew(string $plug)
{
	//print ("AEnxRagdollLocatorAdvancedNew\n");

	setUITemplate -pst attributeEditorTemplate;

	rowLayout -numberOfColumns 2 -columnWidth2 1 200 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Override Global Iteration Count"
		-changeCommand "AEnxRagdollLocator_ogic_checkBox_changeCommand"
		"AEnxRagdollLocator_ogic_checkBox";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Position Iteration Count";
		intField -minValue 0 -maxValue 255
		-changeCommand "AEnxRagdollLocator_pic_intField_changeCommand"
		"AEnxRagdollLocator_pic_intField";
		text -label "";
		intSlider -min 0 -max 255
		-dragCommand "AEnxRagdollLocator_pic_intSlider_dragCommand"
		"AEnxRagdollLocator_pic_intSlider";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Velocity Iteration Count";
		intField -minValue 0 -maxValue 255
		-changeCommand "AEnxRagdollLocator_vic_intField_changeCommand"
		"AEnxRagdollLocator_vic_intField";
		text -label "";
		intSlider -min 0 -max 255
		-dragCommand "AEnxRagdollLocator_vic_intSlider_dragCommand"
		"AEnxRagdollLocator_vic_intSlider";
	setParent..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 150 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Contact Shell Override"
		-changeCommand "AEnxRagdollLocator_cso_checkBox_changeCommand"
		"AEnxRagdollLocator_cso_checkBox";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Contact Shell Depth";
		floatField -minValue 0.0 -maxValue 255.0 -precision 2
		-changeCommand "AEnxRagdollLocator_csd_floatField_changeCommand"
		"AEnxRagdollLocator_csd_floatField";
		text -label "";
		floatSlider -min 0.0 -max 255.0
		-dragCommand "AEnxRagdollLocator_csd_floatSlider_dragCommand"
		"AEnxRagdollLocator_csd_floatSlider";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Contact Shell Offset";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_cso_floatField_changeCommand"
		"AEnxRagdollLocator_cso_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_cso_floatSlider_dragCommand"
		"AEnxRagdollLocator_cso_floatSlider";
	setParent..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 150 -columnAttach2 "both" "both";
		text -label "";
		checkBox -label "Sleep Thesholds Override"
		-changeCommand "AEnxRagdollLocator_sto_checkBox_changeCommand"
		"AEnxRagdollLocator_sto_checkBox";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Sleep Energy Theshold";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_set_floatField_changeCommand"
		"AEnxRagdollLocator_set_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_set_floatSlider_dragCommand"
		"AEnxRagdollLocator_set_floatSlider";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Liner Damping";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_ld_floatField_changeCommand"
		"AEnxRagdollLocator_ld_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_ld_floatSlider_dragCommand"
		"AEnxRagdollLocator_ld_floatSlider";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 20 100 -columnAttach5 "both" "right" "both" "left" "left";
		text -label "";
		text -label "Angular Damping";
		floatField -minValue 0.0 -maxValue 1.0 -precision 2
		-changeCommand "AEnxRagdollLocator_ad_floatField_changeCommand"
		"AEnxRagdollLocator_ad_floatField";
		text -label "";
		floatSlider -min 0.0 -max 1.0
		-dragCommand "AEnxRagdollLocator_ad_floatSlider_dragCommand"
		"AEnxRagdollLocator_ad_floatSlider";
	setParent..;

	rowLayout -numberOfColumns 3 -columnWidth3 1 150 150 -columnAttach3 "both" "right" "both";
		text -label "";
		text -label "Center Of Mass Mode";
		optionMenu
		-changeCommand "AEnxRagdollLocator_comm_optionMenu_changeCommand"
		"AEnxRagdollLocator_comm_optionMenu";
		menuItem -label "Caculate From Shapes";
		menuItem -label"Use Pivot";
		//menuItem -label"Local Offset";
	setParent..;

		rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Center Of Mass Override";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_como_floatField_x_changeCommand"
		"AEnxRagdollLocator_como_floatField_x";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_como_floatField_y_changeCommand"
		"AEnxRagdollLocator_como_floatField_y";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_como_floatField_z_changeCommand"
		"AEnxRagdollLocator_como_floatField_z";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Initial Velocity";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_iv_floatField_x_changeCommand"
		"AEnxRagdollLocator_iv_floatField_x";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_iv_floatField_y_changeCommand"
		"AEnxRagdollLocator_iv_floatField_y";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_iv_floatField_z_changeCommand"
		"AEnxRagdollLocator_iv_floatField_z";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Initial Spin";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_is_floatField_x_changeCommand"
		"AEnxRagdollLocator_is_floatField_x";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_is_floatField_y_changeCommand"
		"AEnxRagdollLocator_is_floatField_y";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_is_floatField_z_changeCommand"
		"AEnxRagdollLocator_is_floatField_z";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Initial Position";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_ip_floatField_x_changeCommand"
		"AEnxRagdollLocator_ip_floatField_x";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_ip_floatField_y_changeCommand"
		"AEnxRagdollLocator_ip_floatField_y";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_ip_floatField_z_changeCommand"
		"AEnxRagdollLocator_ip_floatField_z";
	setParent..;

	rowLayout -numberOfColumns 5 -columnWidth5 1 150 100 100 100 -columnAttach5 "both" "right" "both" "both" "both";
		text -label "";
		text -label "Initial Orientation";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_io_floatField_x_changeCommand"
		"AEnxRagdollLocator_io_floatField_x";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_io_floatField_y_changeCommand"
		"AEnxRagdollLocator_io_floatField_y";
		floatField -precision 2
		-changeCommand "AEnxRagdollLocator_io_floatField_z_changeCommand"
		"AEnxRagdollLocator_io_floatField_z";
	setParent..;

	setUITemplate -ppt;

	AEnxRagdollLocatorAdvancedReplace($plug);
}

global proc AEnxRagdollLocatorAdvancedReplace(string $plug)
{
	global int $gRagdollLocator_General_Rig_Type;
	if($gRagdollLocator_General_Rig_Type == 0)
	{
		return;
	}

	global string $gRagdollLocator_CurRigidBody;
	int $enable = false;
	if($gRagdollLocator_CurRigidBody != "")
	{
		$enable = true;
	}

	//print ("AEnxRagdollLocatorAdvancedReplace : " + $enable + "\n");

	int $gRagdollogic;
	int $gRagdollcso_i;
	int $gRagdollsto;
	int $gRagdollcomm;

	float $gRagdollpic;
	float $gRagdollvic;
	float $gRagdollcsd;
	float $gRagdollcso_f;
	float $gRagdollset;
	float $gRagdollld;
	float $gRagdollad;
	float $gRagdollcomo[];
	float $gRagdolliv[];
	float $gRagdollis[];
	float $gRagdollip[];
	float $gRagdollio[];

	if($enable)
	{
		$gRagdollogic = `getAttr ($gRagdollLocator_CurRigidBody + ".overrideGlobalIterationCount")`;
		$gRagdollcso_i = `getAttr ($gRagdollLocator_CurRigidBody + ".contactShellOverride")`;
		$gRagdollsto = `getAttr ($gRagdollLocator_CurRigidBody + ".sleepThesholdsOverride")`;
		$gRagdollcomm = `getAttr ($gRagdollLocator_CurRigidBody + ".centerOfMassMode")`;
		$gRagdollcomm = $gRagdollcomm + 1;

		global int $gRagdollLocator_UpdateRig_EditMode_Type;
		if($gRagdollLocator_UpdateRig_EditMode_Type == 1)
		{
			$gRagdollpic = `getAttr ($gRagdollLocator_CurRigidBody + ".positionIterationCount")`;
			$gRagdollvic = `getAttr ($gRagdollLocator_CurRigidBody + ".velocityIterationCount")`;
			$gRagdollcsd = `getAttr ($gRagdollLocator_CurRigidBody + ".contactShellDepth")`;
			$gRagdollcso_f = `getAttr ($gRagdollLocator_CurRigidBody + ".contactShellOffset")`;
			$gRagdollset = `getAttr ($gRagdollLocator_CurRigidBody + ".sleepEnergyThreshold")`;
			$gRagdollld = `getAttr ($gRagdollLocator_CurRigidBody + ".linearDamping")`;
			$gRagdollad = `getAttr ($gRagdollLocator_CurRigidBody + ".angularDamping")`;
			$gRagdollcomo = `getAttr ($gRagdollLocator_CurRigidBody + ".centerOfMassOverride")`;
			$gRagdolliv = `getAttr ($gRagdollLocator_CurRigidBody + ".initialVelocity")`;
			$gRagdollis = `getAttr ($gRagdollLocator_CurRigidBody + ".initialSpin")`;
			$gRagdollip = `getAttr ($gRagdollLocator_CurRigidBody + ".initialPosition")`;
			$gRagdollio = `getAttr ($gRagdollLocator_CurRigidBody + ".initialOrientation")`;
		}
		else if($gRagdollLocator_UpdateRig_EditMode_Type == 2)
		{
			$gRagdollpic = 1;
			$gRagdollvic = 1;
			$gRagdollcsd = 1;
			$gRagdollcso_f = 1;
			$gRagdollset = 1;
			$gRagdollld = 1;
			$gRagdollad = 1;
			$gRagdollcomo[0] = 1;
			$gRagdollcomo[1] = 1;
			$gRagdollcomo[2] = 1;
			$gRagdolliv[0] = 1;
			$gRagdolliv[1] = 1;
			$gRagdolliv[2] = 1;
			$gRagdollis[0] = 1;
			$gRagdollis[1] = 1;
			$gRagdollis[2] = 1;
			$gRagdollip[0] = 1;
			$gRagdollip[1] = 1;
			$gRagdollip[2] = 1;
			$gRagdollio[0] = 1;
			$gRagdollio[1] = 1;
			$gRagdollio[2] = 1;
		}
		else if($gRagdollLocator_UpdateRig_EditMode_Type == 3)
		{
			$gRagdollpic = `getAttr ($gRagdollLocator_CurRigidBody + ".positionIterationCount")`;
			$gRagdollvic = `getAttr ($gRagdollLocator_CurRigidBody + ".velocityIterationCount")`;
			$gRagdollcsd = `getAttr ($gRagdollLocator_CurRigidBody + ".contactShellDepth")`;
			$gRagdollcso_f = `getAttr ($gRagdollLocator_CurRigidBody + ".contactShellOffset")`;
			$gRagdollset = `getAttr ($gRagdollLocator_CurRigidBody + ".sleepEnergyThreshold")`;
			$gRagdollld = `getAttr ($gRagdollLocator_CurRigidBody + ".linearDamping")`;
			$gRagdollad = `getAttr ($gRagdollLocator_CurRigidBody + ".angularDamping")`;
			$gRagdollcomo = `getAttr ($gRagdollLocator_CurRigidBody + ".centerOfMassOverride")`;
			$gRagdolliv = `getAttr ($gRagdollLocator_CurRigidBody + ".initialVelocity")`;
			$gRagdollis = `getAttr ($gRagdollLocator_CurRigidBody + ".initialSpin")`;
			$gRagdollip = `getAttr ($gRagdollLocator_CurRigidBody + ".initialPosition")`;
			$gRagdollio = `getAttr ($gRagdollLocator_CurRigidBody + ".initialOrientation")`;
		}
		else
		{
			$gRagdollpic = 0;
			$gRagdollvic = 0;
			$gRagdollcsd = 0;
			$gRagdollcso_f = 0;
			$gRagdollset = 0;
			$gRagdollld = 0;
			$gRagdollad = 0;
			$gRagdollcomo[0] = 0;
			$gRagdollcomo[1] = 0;
			$gRagdollcomo[2] = 0;
			$gRagdolliv[0] = 0;
			$gRagdolliv[1] = 0;
			$gRagdolliv[2] = 0;
			$gRagdollis[0] = 0;
			$gRagdollis[1] = 0;
			$gRagdollis[2] = 0;
			$gRagdollip[0] = 0;
			$gRagdollip[1] = 0;
			$gRagdollip[2] = 0;
			$gRagdollio[0] = 0;
			$gRagdollio[1] = 0;
			$gRagdollio[2] = 0;
		}
	}
	else
	{
		$gRagdollcso_i = 0;
		$gRagdollsto = 0;
		$gRagdollcomm = 1;
		$gRagdollogic = 0;
		$gRagdollpic = 0;
		$gRagdollvic = 0;
		$gRagdollcsd = 0;
		$gRagdollcso_f = 0;
		$gRagdollset = 0;
		$gRagdollld = 0;
		$gRagdollad = 0;
		$gRagdollcomo[0] = 0;
		$gRagdollcomo[1] = 0;
		$gRagdollcomo[2] = 0;
		$gRagdolliv[0] = 0;
		$gRagdolliv[1] = 0;
		$gRagdolliv[2] = 0;
		$gRagdollis[0] = 0;
		$gRagdollis[1] = 0;
		$gRagdollis[2] = 0;
		$gRagdollip[0] = 0;
		$gRagdollip[1] = 0;
		$gRagdollip[2] = 0;
		$gRagdollio[0] = 0;
		$gRagdollio[1] = 0;
		$gRagdollio[2] = 0;
	}

	checkBox -e -value $gRagdollogic -enable $enable
	"AEnxRagdollLocator_ogic_checkBox";

	intField -e -value $gRagdollpic -enable $enable
	"AEnxRagdollLocator_pic_intField";
	intSlider -e -value $gRagdollpic -enable $enable
	"AEnxRagdollLocator_pic_intSlider";

	intField -e -value $gRagdollvic -enable $enable
	"AEnxRagdollLocator_vic_intField";
	intSlider -e -value $gRagdollvic -enable $enable
	"AEnxRagdollLocator_vic_intSlider";

	checkBox -e -value $gRagdollcso_i -enable $enable
	"AEnxRagdollLocator_cso_checkBox";

	floatField -e -value $gRagdollcsd -enable $enable
	"AEnxRagdollLocator_csd_floatField";
	floatSlider -e -value $gRagdollcsd -enable $enable
	"AEnxRagdollLocator_csd_floatSlider";

	floatField -e -value $gRagdollcso_f -enable $enable
	"AEnxRagdollLocator_cso_floatField";
	floatSlider -e -value $gRagdollcso_f -enable $enable
	"AEnxRagdollLocator_cso_floatSlider";

	checkBox -e -value $gRagdollsto -enable $enable
	"AEnxRagdollLocator_sto_checkBox";

	floatField -e -value $gRagdollset -enable $enable
	"AEnxRagdollLocator_set_floatField";
	floatSlider -e -value $gRagdollset -enable $enable
	"AEnxRagdollLocator_set_floatSlider";

	floatField -e -value $gRagdollld -enable $enable
	"AEnxRagdollLocator_ld_floatField";
	floatSlider -e -value $gRagdollld -enable $enable
	"AEnxRagdollLocator_ld_floatSlider";

	floatField -e -value $gRagdollad -enable $enable
	"AEnxRagdollLocator_ad_floatField";
	floatSlider -e -value $gRagdollad -enable $enable
	"AEnxRagdollLocator_ad_floatSlider";

	optionMenu -e -select $gRagdollcomm -enable $enable
	"AEnxRagdollLocator_comm_optionMenu";
	
	floatField -e -value $gRagdollcomo[0] -enable $enable
	"AEnxRagdollLocator_como_floatField_x";
	floatField -e -value $gRagdollcomo[1] -enable $enable
	"AEnxRagdollLocator_como_floatField_y";
	floatField -e -value $gRagdollcomo[2] -enable $enable
	"AEnxRagdollLocator_como_floatField_z";

	floatField -e -value $gRagdolliv[0] -enable $enable
	"AEnxRagdollLocator_iv_floatField_x";
	floatField -e -value $gRagdolliv[1] -enable $enable
	"AEnxRagdollLocator_iv_floatField_y";
	floatField -e -value $gRagdolliv[2] -enable $enable
	"AEnxRagdollLocator_iv_floatField_z";

	floatField -e -value $gRagdollis[0] -enable $enable
	"AEnxRagdollLocator_is_floatField_x";
	floatField -e -value $gRagdollis[1] -enable $enable
	"AEnxRagdollLocator_is_floatField_y";
	floatField -e -value $gRagdollis[2] -enable $enable
	"AEnxRagdollLocator_is_floatField_z";

	floatField -e -value $gRagdollip[0] -enable $enable
	"AEnxRagdollLocator_ip_floatField_x";
	floatField -e -value $gRagdollip[1] -enable $enable
	"AEnxRagdollLocator_ip_floatField_y";
	floatField -e -value $gRagdollip[2] -enable $enable
	"AEnxRagdollLocator_ip_floatField_z";

	floatField -e -value $gRagdollio[0] -enable $enable
	"AEnxRagdollLocator_io_floatField_x";
	floatField -e -value $gRagdollio[1] -enable $enable
	"AEnxRagdollLocator_io_floatField_y";
	floatField -e -value $gRagdollio[2] -enable $enable
	"AEnxRagdollLocator_io_floatField_z";
}

global proc AEnxRagdollLocatorTemplate(string $nodeName)
{
	global string $gAEnxRagdollLocatorNodeName;
	$gAEnxRagdollLocatorNodeName = $nodeName;

	global int $gRagdollLocator_General_Rig_Type;
	global string $gRagdollLocator_AllRigidBodies[];
		
	AEnxRagdollLocator_GetAllRigidbodies;

	$gRagdollLocator_General_Rig_Type = 0; // kinematic
	if(`size $gRagdollLocator_AllRigidBodies` > 0)
	{
		string $rigidbody = $gRagdollLocator_AllRigidBodies[0];
		$gRagdollLocator_General_Rig_Type = `getAttr ($rigidbody + ".simulationType")`;
	}

	editorTemplate -beginScrollLayout;

		editorTemplate -beginLayout "General" -collapse false;
			editorTemplate -beginLayout "Rig Type" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorRigTypeNew" "AEnxRagdollLocatorRigTypeReplace" "rig type";
			editorTemplate -endLayout;
			editorTemplate -beginLayout "Display" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorDisplayNew" "AEnxRagdollLocatorDisplayReplace" "display";
			editorTemplate -endLayout;
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Templates" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorRagdollSaveLoadNew" "AEnxRagdollLocatorRagdollSaveLoadReplace" "ragdollSaveLoad";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Joint Setup" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorJointsNew" "AEnxRagdollLocatorJointsReplace" "joints";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Shape Setup" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorShapeSetupNew" "AEnxRagdollLocatorShapeSetupReplace" "shape setup";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Connected To" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorConnectedToNew" "AEnxRagdollLocatorConnectedToReplace" "connected to";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Simulation Set" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorSimulationSetNew" "AEnxRagdollLocatorSimulationSetReplace" "simulation set";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Rig Tools" -collapse false;
			editorTemplate -beginLayout "Source Meshes" -collapse false;
				editorTemplate -callCustom "AEnxRagdollLocatorMeshesNew" "AEnxRagdollLocatorMeshesReplace" "source meshes";
			editorTemplate -endLayout;
			editorTemplate -beginLayout "Update Rig" -collapse false;
				editorTemplate -callCustom "AEnxRagdollLocatorUpdateRigNew" "AEnxRagdollLocatorUpdateRigReplace" "update rig";
			editorTemplate -endLayout;
		editorTemplate -endLayout;

		if($gRagdollLocator_General_Rig_Type)
		{
			editorTemplate -beginLayout "Mass Distribution" -collapse false;
				editorTemplate -addControl "useExistingMass" "AEnxRagdollLocatoruseExistingMassChanged";
				editorTemplate -addControl "overallMass" "AEnxRagdollLocatorOverallMassChanged";
				editorTemplate -addControl "distributeRatio"; 
				editorTemplate -callCustom "AEnxRagdollLocatorRedistributeMassNew" "AEnxRagdollLocatorRedistributeMassReplace" "overallMass";
			editorTemplate -endLayout;

			editorTemplate -beginLayout "Physical Material" -collapse false;
				editorTemplate -callCustom "AEnxRagdollLocatorPhysicalMaterialNew" "AEnxRagdollLocatorPhysicalMaterialReplace" "physical material";
			editorTemplate -endLayout;

			editorTemplate -beginLayout "Advanced Dynamics" -collapse false;
				editorTemplate -callCustom "AEnxRagdollLocatorAdvancedNew" "AEnxRagdollLocatorAdvancedReplace" "advanced";
			editorTemplate -endLayout;
		}

		editorTemplate -suppress "caching";
		editorTemplate -suppress "nodeState";
		editorTemplate -suppress "blackBox";
		editorTemplate -suppress "rmbCommand";
		editorTemplate -suppress "templateName";
		editorTemplate -suppress "templatePath";
		editorTemplate -suppress "viewName";
		editorTemplate -suppress "iconName";
		editorTemplate -suppress "viewMode";
		editorTemplate -suppress "templateVersion";
		editorTemplate -suppress "uiTreatment";
		editorTemplate -suppress "customTreatment";
		editorTemplate -suppress "creator";
		editorTemplate -suppress "creationDate";
		editorTemplate -suppress "containerType";
		editorTemplate -suppress "visibility";
		editorTemplate -suppress "intermediateObject";
		editorTemplate -suppress "template";
		editorTemplate -suppress "ghosting";
		editorTemplate -suppress "ghostingControl";
		editorTemplate -suppress "ghostPreSteps";
		editorTemplate -suppress "ghostPostSteps";
		editorTemplate -suppress "ghostStepSize";
		editorTemplate -suppress "ghostColorPreA";
		editorTemplate -suppress "ghostColorPre";
		editorTemplate -suppress "ghostColorPostA";
		editorTemplate -suppress "ghostColorPost";
		editorTemplate -suppress "ghostRangeStart";
		editorTemplate -suppress "ghostRangeEnd";
		editorTemplate -suppress "ghostDriver";
		editorTemplate -suppress "translate";
		editorTemplate -suppress "rotate";
		editorTemplate -suppress "rotateOrder";
		editorTemplate -suppress "scale";
		editorTemplate -suppress "shear";
		editorTemplate -suppress "rotatePivot";
		editorTemplate -suppress "rotatePivotTranslate";
		editorTemplate -suppress "scalePivot";
		editorTemplate -suppress "scalePivotTranslate";
		editorTemplate -suppress "rotateAxis";
		editorTemplate -suppress "selectHandle";
		editorTemplate -suppress "inheritsTransform";
		editorTemplate -suppress "displayHandle";
		editorTemplate -suppress "displayScalePivot";
		editorTemplate -suppress "displayRotatePivot";
		editorTemplate -suppress "displayLocalAxis";
		editorTemplate -suppress "dynamics";
		editorTemplate -suppress "showManipDefault";
		editorTemplate -suppress "rotateQuaternion";
		editorTemplate -suppress "enableRestPosition";
		editorTemplate -suppress "lockOutput";
		editorTemplate -suppress "objectColorRGB";
		editorTemplate -suppress "useObjectColor";
		editorTemplate -suppress "objectColor";
		editorTemplate -suppress "lodVisibility";
		editorTemplate -suppress "selectionChildHighlighting";
		editorTemplate -suppress "ghostCustomSteps";
		editorTemplate -suppress "ghostFrames";
		editorTemplate -suppress "geometry";
		editorTemplate -suppress "minTransLimit";
		editorTemplate -suppress "maxTransLimit";
		editorTemplate -suppress "minTransLimitEnable";
		editorTemplate -suppress "maxTransLimitEnable";
		editorTemplate -suppress "minRotLimit";
		editorTemplate -suppress "maxRotLimit";
		editorTemplate -suppress "minRotLimitEnable";
		editorTemplate -suppress "maxRotLimitEnable";
		editorTemplate -suppress "minScaleLimit";
		editorTemplate -suppress "maxScaleLimit";
		editorTemplate -suppress "minScaleLimitEnable";
		editorTemplate -suppress "maxScaleLimitEnable";		
		editorTemplate -suppress "drawOverride";
		editorTemplate -suppress "instObjGroups";
		editorTemplate -suppress "renderInfo";
		editorTemplate -suppress "renderLayerInfo";
		editorTemplate -suppress "target";
		editorTemplate -suppress "motionBlur";
		editorTemplate -suppress "visibleInReflections";
		editorTemplate -suppress "visibleInRefractions";
		editorTemplate -suppress "castsShadows";
		editorTemplate -suppress "receiveShadows";
		editorTemplate -suppress "maxVisibilitySamplesOverride";
		editorTemplate -suppress "maxVisibilitySamples";
		editorTemplate -suppress "geometryAntialiasingOverride";
		editorTemplate -suppress "antialiasingLevel";
		editorTemplate -suppress "shadingSamplesOverride";
		editorTemplate -suppress "shadingSamples";
		editorTemplate -suppress "maxShadingSamples";
		editorTemplate -suppress "volumeSamplesOverride";
		editorTemplate -suppress "volumeSamples";
		editorTemplate -suppress "depthJitter";
		editorTemplate -suppress "ignoreSelfShadowing";
		editorTemplate -suppress "primaryVisibility";
		editorTemplate -suppress "compInstObjGroups";
		editorTemplate -suppress "controlPoints";
		editorTemplate -suppress "localPosition";
		editorTemplate -suppress "localScale";
		editorTemplate -suppress "overallMass";
		editorTemplate -suppress "useExistingMass";
		editorTemplate -suppress "distributeRatio";
	    editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}

global proc AEnxRagdollLocatorTemplate_old(string $nodeName)
{
	editorTemplate -beginScrollLayout;
	
		editorTemplate -beginLayout "Source Meshes" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorMeshesNew" "AEnxRagdollLocatorMeshesReplace" "source meshes";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Joints" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorJointsNew" "AEnxRagdollLocatorJointsReplace" "joints";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Ragdoll Save and Load" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorRagdollSaveLoadNew" "AEnxRagdollLocatorRagdollSaveLoadReplace" "ragdollSaveLoad";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Regenerate" -collapse false;
			editorTemplate -callCustom "AEnxRagdollLocatorRegenerateNew" "AEnxRagdollLocatorRegenerateReplace" "regenerate ragdoll";
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Distribute Mass" -collapse false;
			//editorTemplate -callCustom "AEnxRagdollLocatorDistributeMassNew" "AEnxRagdollLocatorDistributeMassReplace";
			editorTemplate -addControl "useExistingMass" "AEnxRagdollLocatoruseExistingMassChanged";
			editorTemplate -addControl "overallMass" "AEnxRagdollLocatorOverallMassChanged";
			editorTemplate -addControl "distributeRatio"; // "AEnxRagdollLocatoruseExistingMassChanged";

			editorTemplate -callCustom "AEnxRagdollLocatorRedistributeMassNew" "AEnxRagdollLocatorRedistributeMassReplace" "overallMass";
		editorTemplate -endLayout;

		editorTemplate -suppress "caching";
		editorTemplate -suppress "nodeState";
		editorTemplate -suppress "blackBox";
		editorTemplate -suppress "rmbCommand";
		editorTemplate -suppress "templateName";
		editorTemplate -suppress "templatePath";
		editorTemplate -suppress "viewName";
		editorTemplate -suppress "iconName";
		editorTemplate -suppress "viewMode";
		editorTemplate -suppress "templateVersion";
		editorTemplate -suppress "uiTreatment";
		editorTemplate -suppress "customTreatment";
		editorTemplate -suppress "creator";
		editorTemplate -suppress "creationDate";
		editorTemplate -suppress "containerType";
		editorTemplate -suppress "visibility";
		editorTemplate -suppress "intermediateObject";
		editorTemplate -suppress "template";
		editorTemplate -suppress "ghosting";

		editorTemplate -suppress "ghostingControl";
		editorTemplate -suppress "ghostPreSteps";
		editorTemplate -suppress "ghostPostSteps";
		editorTemplate -suppress "ghostStepSize";
		editorTemplate -suppress "ghostColorPreA";
		editorTemplate -suppress "ghostColorPre";
		editorTemplate -suppress "ghostColorPostA";
		editorTemplate -suppress "ghostColorPost";
		editorTemplate -suppress "ghostRangeStart";
		editorTemplate -suppress "ghostRangeEnd";
		editorTemplate -suppress "ghostDriver";
		editorTemplate -suppress "translate";
		editorTemplate -suppress "rotate";
		editorTemplate -suppress "rotateOrder";
		editorTemplate -suppress "scale";
		editorTemplate -suppress "shear";
		editorTemplate -suppress "rotatePivot";
		editorTemplate -suppress "rotatePivotTranslate";
		editorTemplate -suppress "scalePivot";
		editorTemplate -suppress "scalePivotTranslate";
		editorTemplate -suppress "rotateAxis";
		editorTemplate -suppress "selectHandle";
		editorTemplate -suppress "inheritsTransform";
		editorTemplate -suppress "displayHandle";
		editorTemplate -suppress "displayScalePivot";
		editorTemplate -suppress "displayRotatePivot";
		editorTemplate -suppress "displayLocalAxis";
		editorTemplate -suppress "dynamics";
		editorTemplate -suppress "showManipDefault";
		editorTemplate -suppress "rotateQuaternion";
		editorTemplate -suppress "enableRestPosition";
		editorTemplate -suppress "lockOutput";
		editorTemplate -suppress "objectColorRGB";
		editorTemplate -suppress "useObjectColor";
		editorTemplate -suppress "objectColor";
		editorTemplate -suppress "lodVisibility";
		editorTemplate -suppress "selectionChildHighlighting";

		editorTemplate -suppress "ghostCustomSteps";
		editorTemplate -suppress "ghostFrames";
		editorTemplate -suppress "geometry";

		editorTemplate -suppress "minTransLimit";
		editorTemplate -suppress "maxTransLimit";
		editorTemplate -suppress "minTransLimitEnable";
		editorTemplate -suppress "maxTransLimitEnable";
		editorTemplate -suppress "minRotLimit";
		editorTemplate -suppress "maxRotLimit";
		editorTemplate -suppress "minRotLimitEnable";
		editorTemplate -suppress "maxRotLimitEnable";
		editorTemplate -suppress "minScaleLimit";
		editorTemplate -suppress "maxScaleLimit";
		editorTemplate -suppress "minScaleLimitEnable";
		editorTemplate -suppress "maxScaleLimitEnable";
		
		editorTemplate -suppress "drawOverride";
		editorTemplate -suppress "instObjGroups";
		editorTemplate -suppress "renderInfo";
		editorTemplate -suppress "renderLayerInfo";
		editorTemplate -suppress "target";

		editorTemplate -suppress "motionBlur";
		editorTemplate -suppress "visibleInReflections";
		editorTemplate -suppress "visibleInRefractions";
		editorTemplate -suppress "castsShadows";
		editorTemplate -suppress "receiveShadows";
		editorTemplate -suppress "maxVisibilitySamplesOverride";
		editorTemplate -suppress "maxVisibilitySamples";
		editorTemplate -suppress "geometryAntialiasingOverride";
		editorTemplate -suppress "antialiasingLevel";
		editorTemplate -suppress "shadingSamplesOverride";
		editorTemplate -suppress "shadingSamples";
		editorTemplate -suppress "maxShadingSamples";
		editorTemplate -suppress "volumeSamplesOverride";
		editorTemplate -suppress "volumeSamples";
		editorTemplate -suppress "depthJitter";
		editorTemplate -suppress "ignoreSelfShadowing";
		editorTemplate -suppress "primaryVisibility";
		editorTemplate -suppress "compInstObjGroups";
		editorTemplate -suppress "controlPoints";
		editorTemplate -suppress "localPosition";
		editorTemplate -suppress "localScale";

	    editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}

proc string storeRagdollLocator(string $plug)
{
	global string $gAEnxRagdollLocatorNodeName;

	// Store the ragdoll locator node name.
	string $buffer[];
	tokenize($plug, ".", $buffer);

    // Store the ragdoll locator name.
	$gAEnxRagdollLocatorNodeName = $buffer[0];

    return $gAEnxRagdollLocatorNodeName;
}

proc string getRagdollLocatorName()
{
    global string $gAEnxRagdollLocatorNodeName;
    return $gAEnxRagdollLocatorNodeName;
}

//
// This section of the codes provides the UI for managing the source meshes 
// used by the ragdoll.
// Features: display list of source meshes, connecting & disconnecting them to nxRagdollLocator.
//

global proc AEnxRagdollLocatorMeshesNew(string $plug)
{
    storeRagdollLocator($plug);

	// Create the textFieldGrp

	setUITemplate -pst attributeEditorTemplate;
		AEnxRagdollLocator_loadConnectedShapeMesh();
	setUITemplate -ppt;
}

global proc AEnxRagdollLocatorMeshesReplace(string $plug)
{
    storeRagdollLocator($plug);
    AEnxRagdollLocator_reloadSourceShapeMeshList();
}

// A display of all source meshes used to form the ragdoll.
// Provide buttons to connect & disconnect the source shape meshes.
global proc AEnxRagdollLocator_loadConnectedShapeMesh()
{		
	$ragdollLocator = getRagdollLocatorName();
	global string $gSourceShapeMeshList;
	$gSourceShapeMeshList="ragdollLocator_meshlist";

	rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
	text -label "";
	textScrollList -allowMultiSelection true $gSourceShapeMeshList;
	setParent..;
	
	select ($ragdollLocator);
	$sourceMeshes = `listConnections -t "mesh" -shapes true ($ragdollLocator + ".meshes")`;
	
	for ($item in $sourceMeshes)
	{
		textScrollList -edit -append $item $gSourceShapeMeshList;
	};	

	rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "both" "both";
	text -label "";
	button -label "Add" -command "AEnxRagdollLocator_shapeOutlinerEditor";
	button -label "Remove" -command "AEnxRagdollLocator_disconnectSourceShapeMesh";
	setParent..;
}

// Reload SourceShapeMeshList in nxRagdollLocator Attr Editor
global proc AEnxRagdollLocator_reloadSourceShapeMeshList(){
	global string $gSourceShapeMeshList;
	$status=`textScrollList -exists $gSourceShapeMeshList`;
	//print $status;

	if($status==1){
		textScrollList -edit -removeAll $gSourceShapeMeshList;
	}
	
	$ragdollLocator = getRagdollLocatorName();
	//select ( $ragdollLocator );
	$sourceMeshes = `listConnections -t "mesh" -shapes true ($ragdollLocator + ".meshes")`;
	
	for ($item in $sourceMeshes)
	{
		textScrollList -edit -append $item $gSourceShapeMeshList;
	};	
	//textScrollList -edit -doubleClickCommand "getSelectedPhysicsShape()" $gSourceShapeMeshList;
}

// Item filter script for a filter of meshes in the screen that are not intermediate
global proc int meshFilterSctipt( string $name )
{
	string $shape[] = `ls -type mesh -noIntermediate $name`;
	return `size($shape)` > 0;

}

// Display the outliner listing only all shapes in the scene
global proc AEnxRagdollLocator_shapeOutlinerEditor(){

	global string $gShapeOutlinerWindow;
	// Display only the shape in the outliner
	string $shapeFilter =`itemFilter -byScript meshFilterSctipt`;

	// Create a new regular outliner in its own window
	$gShapeOutlinerWindow = `window -title "Shape Mesh Outliner" -widthHeight 350 450`;
		columnLayout -adjustableColumn true;
			frameLayout -label "Please select mesh to add into ragdoll" -collapse false  -h 350; 
				string $outliner = `outlinerEditor`;
				outlinerEditor -edit
					-mainListConnection "worldList"
					-selectionConnection "modelList"
					-showShapes true
					-expandObjects true
					-showDagOnly true
					-ignoreDagHierarchy false
					-showNamespace true
					-highlightActive true
					-autoSelectNewObjects false
					-doNotSelectNewObjects false
					-showSetMembers true
					-filter $shapeFilter
					$outliner;
				setParent ..;
			frameLayout  -labelVisible false -collapse false;
				gridLayout -numberOfColumns 2 -cw (340/2); 
					button -label "Add" -command "AEnxRagdollLocator_connectSourceShapeMesh";
					string $cancelBtn = `button -label "Cancel" -command "deleteUI -window $gShapeOutlinerWindow"`;
				setParent ..; 
			setParent ..;
		setParent ..;  
	showWindow $gShapeOutlinerWindow;
}

global proc AEnxRagdollLocator_connectSourceShapeMesh()
{
	global string $gShapeOutlinerWindow;
	$selected = `ls -sl`;
	if( size($selected) == 0  )
	{
        error "Please select shape mesh to connect.\n";
    }
    else
    {
		// 1. Obtain nxRagdollLocator & shape mesh from the selection
		// Since this command will be called only within AEnxRagdollLocator,
		// use the global $gAEnxRagdollLocatorNodeName
		string $rdLocator  = getRagdollLocatorName();
		string $sourceMesh = "";
		int $count=0;
		
		// Check if either of the selection is a shape mesh, as the other is definitely a nxRagdollLocator.
		for( $select in $selected )
		{
			string $nodeType = `nodeType $select`;
			
			if ( $nodeType == "mesh" )
				$sourceMesh = $select;
			
			// 2. Establish the connection / disconnection if mesh is selected and is not connected to nxRagdollLocator
			$connectedMeshes = `listConnections -shapes true ($rdLocator + ".meshes")`;
			if( $sourceMesh != "" && (stringArrayCount($sourceMesh, $connectedMeshes)==0))
			{	
				// Connect source shape mesh's message to nxRagdollLocator's meshes[]
				connectAttr -nextAvailable ($sourceMesh + ".message") ($rdLocator + ".meshes");
				print ($sourceMesh+" connected.\n");
				$count++;
				$sourceMesh = "";
			}
			else
				warning "Transform selected or shape mesh is already connected to nxRagdollLocator. Skipping.\n";
		}
		
		print ($count+" mesh(es) connected.\n");
		// After adding meshes to the list, close the window by deleting the UI.
		deleteUI -window $gShapeOutlinerWindow;		
    }
}

global proc AEnxRagdollLocator_disconnectSourceShapeMesh()
{
	global string $gSourceShapeMeshList;
	$selected = `textScrollList -q -si $gSourceShapeMeshList`;
	//print $selected;
	if (size($selected) == 0 )
    {
       error "No shape mesh selected.";
    }
    else
    {
		for( $select in $selected )
		{
			$MeshMsgPlugList =`connectionInfo -destinationFromSource ($select+".message")`;
			
			for( $rdLocatorMeshesPlug in $MeshMsgPlugList )
			{
				if( `nodeType $rdLocatorMeshesPlug` == "nxRagdollLocator" )
				{
					disconnectAttr  ($select + ".message") $rdLocatorMeshesPlug;
					removeMultiInstance -b true $rdLocatorMeshesPlug; // empties the plug array also
					textScrollList -edit -removeItem $select $gSourceShapeMeshList;
					print ($select + " shape mesh disconnected.\n");
				}
			}
		}
	}
}

global proc string AEnxRagdollLocator_getFullPathName(string $jointName)
{
	$ragdollLocator = getRagdollLocatorName();
	string $parent[] = `listRelatives -parent -fullPath $ragdollLocator`;
	string $buffer[];
	tokenize $parent[0] "|" $buffer;
	string $root = $buffer[0];
	string $children[] = `listRelatives -fullPath -children -allDescendents -type joint $root`;
	int $i;
	int $size = size($children);
	for($i = 0; $i < $size; $i++)
	{
		int $bufferLength = `tokenize $children[$i] "|" $buffer`;
		if($buffer[$bufferLength-1] == $jointName)
		{
			return $children[$i];
		}
	}
	return $jointName;
}

global proc string AEnxRagdollLocator_getFullPathNameFromLabel(string $jointName, string $labelName)
{
	$jointName = substituteAllString($jointName, $labelName, "");
	$jointName = AEnxRagdollLocator_getFullPathName($jointName);
	return $jointName;
}

//
// This section of the codes provides the UI for managing the joints 
// used by the ragdoll.
// Features: display list of joints, different ways to make the selection of joints
//           adding & deleting them to/from the ragdoll
//           and connecting/disconnecting them to nxRagdollLocator.
//			 show/hide connected physics shapes
//			 make generated RB kinematic / dynamic
//

// The custom creation proc for the list of joints.
global proc AEnxRagdollLocatorJointsNew(string $plug)
{
    storeRagdollLocator($plug);

	// Create the textFieldGrp

	setUITemplate -pst attributeEditorTemplate;
		AEnxRagdollLocator_loadConnectedJoint();
	setUITemplate -ppt;
	AEnxRagdollLocator_selectDefaultJointList();
}

global proc AEnxRagdollLocatorJointsReplace(string $plug)
{
    $nodeName = storeRagdollLocator($plug);
    AEnxRagdollLocator_reloadJointList();
    AEnxRagdollLocator_selectDefaultJointList();
}

global proc AEnxRagdollLocator_scendingJoint_private()
{
	global int $gRagdollScending;
	global string $gRagdollLocator_SelectedRigidBodies[];

	string $allItems[];
	$allItems = `textScrollList -q -allItems "ragdollLocator_jointlist"`;
	textScrollList -e -removeAll "ragdollLocator_jointlist";
	$allItems = `sort $allItems`;
	int $i;
	int $count = size($allItems);
	for($i = 0; $i < $count; $i++)
	{
		if($gRagdollScending == 0)
		{
			textScrollList -e -append $allItems[$i] "ragdollLocator_jointlist";
		}
		else
		{
			textScrollList -e -appendPosition 1 $allItems[$i] "ragdollLocator_jointlist";
		}

		if(stringArrayContains($allItems[$i], $gRagdollLocator_SelectedRigidBodies))
		{
			textScrollList -e -selectItem $allItems[$i] "ragdollLocator_jointlist";
		}
	}
}

global proc AEnxRagdollLocator_scendingJoint()
{
	global int $gRagdollScending;
	if($gRagdollScending == 0)
		$gRagdollScending = 1;
	else
		$gRagdollScending = 0;
	
	print ("AEnxRagdollLocator_scendingJoint $gRagdollScending : " + $gRagdollScending + "\n");

	string $buttonLabel = "Name (Descending)";
	if($gRagdollScending == 0)
		$buttonLabel = "Name (Ascending)";

	button -e -label $buttonLabel
		"AEnxRagdollLocator_scendingJoint_button";

	AEnxRagdollLocator_scendingJoint_private;
}

global proc AEnxRagdollLocator_searchJoint()
{
	textScrollList -e -deselectAll "ragdollLocator_jointlist";
	string $searchText = `textField -q -text "AEnxRagdollLocator_searchJoint_textField"`;
	$searchText = tolower($searchText);
	string $allItems[];
	$allItems = `textScrollList -q -allItems "ragdollLocator_jointlist"`;
	int $i;
	int $count = size($allItems);
	for($i = 0; $i < $count; $i++)
	{
		string $existText = tolower($allItems[$i]);
		if(startsWith($existText, $searchText))
		{
			textScrollList -e -selectItem $allItems[$i] "ragdollLocator_jointlist";
		}
	}
}

global proc ragdollLocator_jointlist_selectCommand()
{
	global string $gRagdollLocator_CurRigidBody;
	$gRagdollLocator_CurRigidBody = "";
	global string $gRagdollLocator_SelectedRigidBodies[];
	clear $gRagdollLocator_SelectedRigidBodies;
	global string $gRagdollLocator_CurShape;
	if($gRagdollLocator_CurShape != "")
	{
		select -deselect $gRagdollLocator_CurShape;
		$gRagdollLocator_CurShape = "";
	}

	$gRagdollLocator_SelectedRigidBodies = `textScrollList -q -selectItem "ragdollLocator_jointlist"`;
	if(size($gRagdollLocator_SelectedRigidBodies) > 0)
	{
		string $buffer[];

		clear $buffer;
		string $temp1 = $gRagdollLocator_SelectedRigidBodies[0];
		tokenize($temp1, $buffer);
		$nxRigidBodyList = `listRelatives -fullPath -children -type "nxRigidBody" $buffer[0]`;		
		
		if(size($nxRigidBodyList) > 0)
		{
			clear $buffer;
			string $temp2 = $nxRigidBodyList[0];
			tokenize($temp2, "|", $buffer);
			int $bufferLength = `size $buffer`;

			$gRagdollLocator_CurRigidBody = $buffer[$bufferLength-1];
		}
	}

	//print ("$gRagdollLocator_CurRigidBody : " + $gRagdollLocator_CurRigidBody + "\n");
		
	AEnxRagdollLocatorShapeSetupReplace("");
	AEnxRagdollLocatorConnectedToReplace("");
	AEnxRagdollLocatorSimulationSetReplace("");
	AEnxRagdollLocatorPhysicalMaterialReplace("");
	AEnxRagdollLocatorAdvancedReplace("");
}

// A display of all joints used to form the ragdoll.
// Provide buttons to create & delete the joints .
global proc AEnxRagdollLocator_loadConnectedJoint()
{		
	$ragdollLocator = getRagdollLocatorName();
	global string $gnxRagdollLocatorJointList;
	$gnxRagdollLocatorJointList= "ragdollLocator_jointlist";

	global int $gRagdollScending;
	string $buttonLabel = "Name (Descending)";
	if($gRagdollScending == 0)
		$buttonLabel = "Name (Ascending)";

	rowLayout -numberOfColumns 4 -columnWidth4 1 100 100 100 -columnAttach4 "both" "both" "both" "both";
		text -label "";
		button -label "Pick" -command "AEnxRagdollLocator_selectJoints";
		button -label "Add" -command "AEnxRagdollLocator_jointOutlinerEditor";
		button -label "Remove" -command ("AEnxRagdollLocator_DeleteJointsFromRagdoll( \"" + getRagdollLocatorName() + "\");");
	setParent ..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 200 -columnAttach2 "both" "both";
		text -label "";
		button -label $buttonLabel
			-command "AEnxRagdollLocator_scendingJoint"
			"AEnxRagdollLocator_scendingJoint_button";
	setParent ..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
		text -label "";
		textScrollList 
			-allowMultiSelection true 
			-selectCommand "ragdollLocator_jointlist_selectCommand"
			-doubleClickCommand "AEnxRagdollLocator_selectJoints"
			$gnxRagdollLocatorJointList;
			popupMenu;
				menuItem -label "All" -command "AEnxRagdollLocator_selectAllJoints";
				menuItem -label "None" -command "AEnxRagdollLocator_deselectJoints";
				menuItem -label "Inverse" -command "AEnxRagdollLocator_selectInverseJoints";
	setParent ..;

	rowLayout -numberOfColumns 2 -columnWidth2 1 300 -columnAttach2 "both" "both";
		text -label "";
		if( getApplicationVersionAsFloat() > 2013 )
		{
			textField -placeholderText "Search By Name ..."
				-changeCommand "AEnxRagdollLocator_searchJoint"
				"AEnxRagdollLocator_searchJoint_textField";
		}
		else
		{
			textField
				-changeCommand "AEnxRagdollLocator_searchJoint"
				"AEnxRagdollLocator_searchJoint_textField";
		}
	setParent ..;
	
	AEnxRagdollLocator_editJointList();

	/*
	rowColumnLayout -numberOfColumns 2 -cw 1 (350/2) -cw 2 (350/2);
		button -label "Hide Physics Shape" -command "AEnxRagdollLocator_ShowPhysicsShape(off)";       		    
		button -label "Show Physics Shape" -command "AEnxRagdollLocator_ShowPhysicsShape(on)";	
		// Temporary disabling the buttons, till there's a use for it
		// To Do: if using the following feature, need to including creation & deletion of rigid constraints (for dynamic)
		// Delete RC - when make kinematic
		// Create RC - when make dynamic 
		//button -label "Make Kinematic" -command "AEnxRagdollLocator_MakeDynamicRigidBody(off)";       		    
		//button -label "Make Dynamic" -command "AEnxRagdollLocator_MakeDynamicRigidBody(on)";
	setParent ..;
	*/
}

global proc AEnxRagdollLocator_selectDefaultJointList()
{
	global string $gnxRagdollLocatorJointList;
	int $tmp = `textScrollList -q -numberOfItems $gnxRagdollLocatorJointList`;
	int $selection[] = `textScrollList -q -selectIndexedItem $gnxRagdollLocatorJointList`;
	if(`size $selection` < 1 && $tmp >0)
	{
		textScrollList -e -selectIndexedItem 1 $gnxRagdollLocatorJointList;
		ragdollLocator_jointlist_selectCommand;
	}
}

global proc AEnxRagdollLocator_selectDefaultShapeIntList()
{
	int $tmp = `textScrollList -q -numberOfItems "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
	int $selected[] = `textScrollList -q -selectIndexedItem "AEnxRagdollLocator_ShapeSetup_textScrollList"`;
	if(`size $selected` < 1 && $tmp >0)
	{
		textScrollList -e -selectIndexedItem 1 "AEnxRagdollLocator_ShapeSetup_textScrollList";
		AEnxRagdollLocator_ShapeSetup_textScrollList_selectCommand();
	}
}

global proc AEnxRagdollLocator_editJointList()
{
	global string $gnxRagdollLocatorJointList, $gRBIndicatorLabel;
	string $joints[];
	AEnxSortJointWithPathDepth($joints);
	for ($item in $joints)
	{
		$jointChildList = `listRelatives -fullPath -children -type "nxRigidBody" $item`;
		string $buffer[];
		clear $buffer;
		tokenize $item "|" $buffer;
		int $bufferLength = `size $buffer`;
		if( size( $jointChildList ) > 0 )
			textScrollList -edit -append ($buffer[$bufferLength-1]+$gRBIndicatorLabel) $gnxRagdollLocatorJointList;
		else
			textScrollList -edit -append $buffer[$bufferLength-1] $gnxRagdollLocatorJointList;
	};	

	AEnxRagdollLocator_scendingJoint_private;
}

global proc AEnxSortJointWithPathDepth(string $array[])
{
	clear $array;
	$ragdollLocator = getRagdollLocatorName();
	$joints = `listConnections -t "joint" ($ragdollLocator + ".joints")`;
	int $i;
	int $depthArray[];
	clear $depthArray;
	int $size = `size $joints`;
	for($i = 0; $i < $size; $i++)
	{
		string $item = $joints[$i];
		string $buffer[];
		clear $buffer;
		$array[$i] = $item;
		$depthArray[$i]  = `tokenize $item "|" $buffer`;
	}
	AEnxRagdollLocatorString_quickSort($array, $depthArray, 0, $size - 1);
}

global proc AEnxRagdollLocator_swapInt(int $array[], int $low, int $high)
{
	int $temp = $array[$high];
	$array[$high] = $array[$low];
	$array[$low] = $temp;
}

global proc int AEnxRagdollLocator_SortParition(int $indexArray[], int $value[], int $low, int $high)
{
	int $pivot = $value[$low];
	while($low < $high)
	{
		while($low < $high && $value[$high] >= $pivot) $high = $high - 1;
		AEnxRagdollLocator_swapInt($indexArray, $low, $high);
		AEnxRagdollLocator_swapInt($value, $low, $high);

		while($low < $high && $value[$low] <= $pivot) $low = $low + 1;
		AEnxRagdollLocator_swapInt($indexArray, $low, $high);
		AEnxRagdollLocator_swapInt($value, $low, $high);
	}
	return $low;
}

global proc AEnxRagdollLocator_quickSort(int $indexArray[], int $value[], int $low, int $high)
{
	if($low < $high)
	{
		int $n = AEnxRagdollLocator_SortParition($indexArray, $value, $low, $high);
		AEnxRagdollLocator_quickSort($indexArray, $value, $low, $n);
		AEnxRagdollLocator_quickSort($indexArray, $value, $n + 1, $high);
	}
}

global proc AEnxRagdollLocatorString_quickSort(string $array[], int $value[], int $low, int $high)
{
	int $i;
	int $indexArray[];
	clear $indexArray;
	int $size = `size $array`;
	for($i = 0; $i < $size; $i++)
	{
		$indexArray[$i] = $i;
	}
	AEnxRagdollLocator_quickSort($indexArray, $value, $low, $high);
	string $tempArray[];
	clear $tempArray;
	for($i = 0; $i < $size; $i++)
	{
		$tempArray[$i] = $array[$indexArray[$i]];
	}
	for($i = 0; $i < $size; $i++)
	{
		$array[$i] = $tempArray[$i];
	}
}

// Reload RagdollLocatorJointList in nxRagdollLocator Attr Editor
global proc AEnxRagdollLocator_reloadJointList(){
	global string $gnxRagdollLocatorJointList;
	$status=`textScrollList -exists $gnxRagdollLocatorJointList`;
	//print $status;

	if($status==1){
		textScrollList -edit -removeAll $gnxRagdollLocatorJointList;
	}
	
	AEnxRagdollLocator_editJointList();
}

global proc AEnxRagdollLocator_selectJoints(){
	global string $gnxRagdollLocatorJointList, $gRBIndicatorLabel;
	$selected = `textScrollList -q -si $gnxRagdollLocatorJointList`;
	if( size( $selected ) > 0 )
	{
		select -clear;
		string $result;
		for( $select in $selected ){
			$result = AEnxRagdollLocator_getFullPathNameFromLabel($select, $gRBIndicatorLabel);
			select -add $result;
		}

		// show exact the last selected item
		//nxShowEditorExact $result;
		physxShelf_FocusSelectedCommand();
	}
	else
	{
		print "No Joints are selected from the list. Select Operation will not continue.\n";
	}
}

global proc AEnxRagdollLocator_selectAllJoints(){
	global string $gnxRagdollLocatorJointList;
	$selected = `textScrollList -q -ai $gnxRagdollLocatorJointList`;
	//select -clear;
	for( $select in $selected ){
		//select -add $select;
		textScrollList -e -selectItem $select $gnxRagdollLocatorJointList;
	}

	ragdollLocator_jointlist_selectCommand;
}

global proc AEnxRagdollLocator_selectAllShapeMesh(){
	global string $gSourceShapeMeshList;
	$selected = `textScrollList -q -ai $gSourceShapeMeshList`;
	//select -clear;
	for( $select in $selected ){
		//select -add $select;
		textScrollList -e -selectItem $select $gSourceShapeMeshList;
	}
}

global proc AEnxRagdollLocator_deselectJoints(){
	global string $gnxRagdollLocatorJointList;
	//select -clear;
	//select (getRagdollLocatorName());
	textScrollList -e -deselectAll $gnxRagdollLocatorJointList;

	ragdollLocator_jointlist_selectCommand;
}

global proc AEnxRagdollLocator_selectInverseJoints(){
	global string $gnxRagdollLocatorJointList;
	$selected = `textScrollList -q -si $gnxRagdollLocatorJointList`;
	$allJoints = `textScrollList -q -ai $gnxRagdollLocatorJointList`;
	string $inverseSelect[] = stringArrayRemove($selected, $allJoints);
	
	textScrollList -e -deselectAll $gnxRagdollLocatorJointList;
	for( $item in $inverseSelect ){
		textScrollList -e -selectItem $item $gnxRagdollLocatorJointList;
	}

	ragdollLocator_jointlist_selectCommand;
}

// Display the outliner listing only all joints in the scene
global proc AEnxRagdollLocator_jointOutlinerEditor(){

	global string $gJointOutlinerWindow;
	// Display only the joints in the outliner
	string $special =`itemFilter -byType joint`;
	$ragdollLocator = getRagdollLocatorName();

	// Create a new regular outliner in its own window
	$gJointOutlinerWindow = `window -title "Joints Outliner" -widthHeight 350 450`;
			string $formLayout = `formLayout -numberOfDivisions 100`;
			string $frameLayout = `frameLayout -label "Please select joints to add into ragdoll" -collapse false -h 350`; 
				string $outliner = `outlinerEditor`;
				outlinerEditor -edit
					-mainListConnection "worldList"
					-selectionConnection "modelList"
					//-showShapes false
					//-showAttributes false
					//-showConnected false
					//-showAnimCurvesOnly false
					//-autoExpand false
					-expandObjects true
					-showDagOnly true
					-ignoreDagHierarchy false
					//-expandConnections false
					-showNamespace true
					//-showCompounds true
					//-showNumericAttrsOnly false
					-highlightActive true
					-autoSelectNewObjects false
					-doNotSelectNewObjects false
					//-transmitFilters false
					-showSetMembers true
					//-setFilter defaultSetFilter
					-filter $special
					$outliner;
				setParent ..;

				string $okButton = `button -label "Add" -command ("AEnxRagdollLocator_AddJointsToNxRagdollLocator " + $ragdollLocator )`;
				string $cancelBtn = `button -label "Cancel" -command "deleteUI -window $gJointOutlinerWindow"`;
			formLayout -edit
				-attachForm     $frameLayout    "top"    5
				-attachForm     $frameLayout     "left"   5
				-attachControl  $frameLayout    "bottom" 5 $okButton
				-attachForm     $frameLayout     "right"   5

				-attachNone $okButton "top"    
				-attachForm $okButton "left"  5
				-attachForm  $okButton "bottom" 5 
				-attachPosition $okButton "right"   0 50

 				-attachNone     $cancelBtn "top"    
				-attachPosition $cancelBtn "left"   0 50
				-attachForm  $cancelBtn "bottom" 5 
				-attachForm     $cancelBtn     "right"   5 
				$formLayout;
		setParent ..;  
	showWindow $gJointOutlinerWindow;
}

// Add the list of joints user had selected in the outliner 
// - Connect joint's message to nxRagdollLocatos's joints
// - Create rigidbodies on the selected joints
// - Close the outliner after adding the joints
global proc AEnxRagdollLocator_AddJointsToNxRagdollLocator( string $ragdollLocator ){
	global string $gJointOutlinerWindow, $gnxRagdollLocatorJointList;
	//$ragdollLocator = getRagdollLocatorName();
	$selected = `ls -sl`;

	// check rigid body type
	int $nShapeType = 3;  // capsule
	global string $gRagdollLocator_AllRigidBodies[];
	for($rigidBody in $gRagdollLocator_AllRigidBodies)
	{
		string $shapelists[];
		$shapelists = `listConnections -shapes true -et true -type "physicsShape" $rigidBody`;
		
		if(`size $shapelists` > 0)
		{
			$nShapeType = getAttr ($shapelists[0] + ".shapeType");
			break;
		}
	}

	int $count=0;
	for($select in $selected)
	{
		
		$connectedJoints = listConnections ($ragdollLocator + ".joints");
		// Skip if selected is a joint & not already connected to nxRagdollLocator
		if( (`nodeType $select` == "joint") && (stringArrayCount($select, $connectedJoints)==0))
		{
			connectAttr -nextAvailable ($select + ".message") ($ragdollLocator + ".joints");
			textScrollList -e -append $select $gnxRagdollLocatorJointList;
			textScrollList -e -selectItem $select $gnxRagdollLocatorJointList;
			$count++;
		}
		else
		{
			warning ($select + " is not a joint or is already connected to " + $ragdollLocator + ". Skipping.\n");
		}
	}

	AEnxRagdollLocator_GetAllRigidbodies;

	if(`window -exists $gJointOutlinerWindow`)
		deleteUI -window $gJointOutlinerWindow;

	AEnxRagdollLocator_editJointList();
	$ragdollLocator = getRagdollLocatorName();
	select $ragdollLocator;

	// Create rigidbodies on the selected joints
	// AEnxRagdollLocator_RegenerateRagdoll( false );
	global int $gRagdollLocator_General_Rig_Type, $gRagdollUseBonePoints;
	global float $gRagdollInflateValue, $gRagdollWeightValue;
	int $simulateType = 1 - $gRagdollLocator_General_Rig_Type;
	string $shapeType = AEnxRagdollLocator_UpdateRig_GetShapeName($nShapeType);
	string $cmd = "GenerateRagdollCmd -w " + $gRagdollWeightValue + "  -i " + $gRagdollInflateValue + " -st \""+ $shapeType + "\" -mk " + $simulateType + " -bp " + $gRagdollUseBonePoints;
	select -clear;
	select -add $selected;
	evalEcho $cmd;
	select $ragdollLocator;
}

// Delete the list of joints user had selected from the list
// If there are rigid bodies on the selected joint:
// - Delete the Joint's child shape Mesh
// - Delete Rigid bodies and connected nxRigidConstraint nodes, if there are.
// - Disonnect joint's message to nxRagdollLocatos's joints 
global proc AEnxRagdollLocator_DeleteJointsFromRagdoll(string $ragdollLocator)
{
	global string $gnxRagdollLocatorJointList, $gRBIndicatorLabel;
	string $selected[];
	// Use scrollList selection is available
 	if(`textScrollList -exists $gnxRagdollLocatorJointList`)
 		$selected = `textScrollList -q -si $gnxRagdollLocatorJointList`;
 	else // else use selection
		$selected = `ls -selection -type "joint"`;

	if( size( $selected ) > 0 )
	{
		for( $select in $selected ){
			string $selectedJoint = $select;
			// check if selected have rigidbodies & constraints, if yes delete them
			$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			$childRigidBody = `listRelatives -fullPath -children -type "nxRigidBody" $selectedJoint`;
			if( size($childRigidBody) > 0 )
			{
				//$childConvexhullMesh = `listRelatives -children -type "mesh" $selectedJoint`;	
				//print ("Objects deleted from " + $selectedJoint + ": ");
					
				// If there's connected nxRigidConstraint from the rigidbody, delete the nxRigidConstraint node
				$connectedRConstraints = `listConnections ($childRigidBody[0]+".adapter")`;	
				for( $rConstraint in $connectedRConstraints )
				{
					//print ($rConstraint + ", ");
					delete $rConstraint;
				}
				
				// Delete joint's rigid body
				//print ($childRigidBody[0] + ", ");
				delete $childRigidBody[0];
				
				// Delete joint's convex hull mesh - now that mesh is a child of rigidbody, there's no need to delete
				//print ($childConvexhullMesh[0] + "\n");
				//delete $childConvexhullMesh[0];
			}
			//print "\n";
			
			// For both joints with/without rigid body children, disconnect joints from nxRagdollLocator
			$JointMsgPlugList =`connectionInfo -destinationFromSource ($selectedJoint+".message")`;
			
			for( $rdLocatorJointsPlug in $JointMsgPlugList )
			{
				if( `nodeType $rdLocatorJointsPlug` == "nxRagdollLocator" )
				{
					disconnectAttr ($selectedJoint + ".message") $rdLocatorJointsPlug;
					removeMultiInstance -b true $rdLocatorJointsPlug; // empties the plug array also
					if(`textScrollList -exists $gnxRagdollLocatorJointList`)
						textScrollList -edit -removeItem $select $gnxRagdollLocatorJointList;
					//print ($selectedJoint + ".message disconnected from "+ $rdLocatorJointsPlug +".\n");
				}
			}			
		}
		//print "Joints remove.. Completed.\n";
	}
	else
	{
		print "No Joints are selected from the list. Delete Operation will not continue.\n";
	}

	AEnxRagdollLocator_GetAllRigidbodies;
	global string $gRagdollLocator_CurRigidBody;
	$gRagdollLocator_CurRigidBody = "";
	global string $gRagdollLocator_CurShape;
	$gRagdollLocator_CurShape = "";
	AEnxRagdollLocator_editJointList();
}

//
// Show / Hide Physics shapes in the ragdoll
// if there's no selection on the list, default it as show/hide all
//
global proc AEnxRagdollLocator_ShowPhysicsShape( int $show )
{
	$ragdollLocator = getRagdollLocatorName();
	global string $gnxRagdollLocatorJointList, $gRBIndicatorLabel;
	
	// 1. Get the list of selected joints from the list
	$selected = `textScrollList -q -si $gnxRagdollLocatorJointList`;
	if( size( $selected ) == 0 )
		$selected = `textScrollList -q -ai $gnxRagdollLocatorJointList`;
	
	// 2. Make the selection
	select -clear;
	for( $select in $selected )
	{
		//$select = substituteAllString($select, $gRBIndicatorLabel, "");
		string $selectedJoint = $select;
		if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
		{
			$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			$childRB = `listRelatives -fullPath -type "nxRigidBody" $selectedJoint`;
			select -add $childRB;
			
		}
	}
	
	// 3. Show/hide the selection
	if( $show )
		physicsShowPhysicsShapes;	
	else
		physicsShowNonPhysicsShapes;
		
	// 4. After showing / hiding the physics shape, reselect nxRagdollLocator
	select $ragdollLocator;
}

//
// Make rigidbodies in selected joint(s): Kinematic / Dynamic 
// warn & skip if selected joint(s) don't have generated rigid bodies.
// if there's no selection on the list, default it as show/hide all
//
// change the simulationType of rigid body accordingly
// 
// Make Dynamic: Add rigid constriants (minimal 2 joints selected) - to do
//
global proc AEnxRagdollLocator_MakeDynamicRigidBody( int $dynamic )
{
	global string $gnxRagdollLocatorJointList, $gRBIndicatorLabel;
	
	// 1. Get the list of selected joints from the list
	$selected = `textScrollList -q -si $gnxRagdollLocatorJointList`;
	if( size( $selected ) == 0 )
		print "No joint selected. Operation will not continue.\n";
	
	// 2. For all selected joints, apply make dynamic / kinematic only to joints with a rigidbody
	for( $select in $selected )
	{
		string $selectedJoint = $select;
		if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
		{
			$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			$rigidbodies = `listRelatives -fullPath -children -type "nxRigidBody" $selectedJoint`;
			for( $rigidbody in $rigidbodies )
			{
				//.act - simulationType Dynamic: 1, Kinematic: 0
				setAttr ($rigidbody+".act") $dynamic;
				print ($rigidbody+".act set to: "+$dynamic+"\n");
			}
		}
		else
			warning ($selectedJoint+" does not have a rigid body. Skipping.\n");
	}
}

//
// This section of the codes provides the UI to save/load ragdoll
//

global proc AEnxRagdollLocatorRagdollSaveLoadNew( string $plug )
{
	setUITemplate -pst attributeEditorTemplate;
		rowLayout -numberOfColumns 3 -columnWidth3 1 100 100 -columnAttach3 "both" "both" "both";
		text -label "";
		button -label "Save" -command ("AEnxRagdollLocator_SaveRagdoll( \"" + getRagdollLocatorName() + "\" )");
		button -label "Load" -command ("AEnxRagdollLocator_LoadRagdoll( \"" + getRagdollLocatorName() + "\" )");
		setParent..;
	setUITemplate -ppt;
}

global proc AEnxRagdollLocatorRagdollSaveLoadReplace( string $plug )
{
	$nodeName = storeRagdollLocator($plug);
    AEnxRagdollLocator_reloadJointList();
}

//
// This section of the codes provides the UI to regenerate Ragdoll for selected joints or entire skeleton
//
// Features: Option to regenerate on selected joints or entire skeleton
//           Providing properties for the regeneration of ragdoll:
//           - Shape Type: convex hull or capsule
//			 - Simulation Type: Dynamic or Kinematic
//			 - inflate: (default=0.0f)
//			 - weight: (default=0.2f)
//

// The custom creation proc for the UI to regenerate ragdoll.
global proc AEnxRagdollLocatorRegenerateNew( string $plug )
{
	global string $gRagdollShapeType, $gRagdollSimulationType, $gRagdollInflate, $gRagdollWeight, $gRagdollUseBonePointsChkBox;
	// Ragdoll defaults
	global float $gRagdollInflateValue, $gRagdollWeightValue;
	global int $gRagdollShapeTypeValue, $gRagdollSimulationTypeValue, $gRagdollUseBonePoints;

    storeRagdollLocator($plug);

	setUITemplate -pst attributeEditorTemplate;
		rowColumnLayout -numberOfColumns 1 -cw 1 500;
			$gRagdollShapeType = `radioButtonGrp 
				-numberOfRadioButtons 3 -columnWidth 2 85
				-label "Shape Type" 
				-labelArray3 "Convex Hull" "Capsule" "ClothSpheres"
				-select $gRagdollShapeTypeValue`;
			$gRagdollSimulationType = `radioButtonGrp 
				-numberOfRadioButtons 2 
				-label "Simulation Type" 
				-labelArray2 "Dynamic" "Kinematic"
				-select $gRagdollSimulationTypeValue`;
			$gRagdollInflate = `floatSliderGrp 
				-label "Inflate" -field true
				-minValue 0.0 -maxValue 1.0
				-fieldMinValue 0.0 -fieldMaxValue 100.0
				-value $gRagdollInflateValue
				-precision 2`;
			$gRagdollWeight = `floatSliderGrp 
				-label "Weight" -field true
				-minValue 0.0 -maxValue 1.0
				-value $gRagdollWeightValue
				-precision 2`;
		setParent ..;
			
		rowColumnLayout -numberOfColumns 1 -columnOffset 1 left 135;
			$gRagdollUseBonePointsChkBox = `checkBox 
				-label "Include Joint Ends in Shape Fitting"
				-value $gRagdollUseBonePoints`;
		setParent ..;
		
		rowColumnLayout -numberOfColumns 2 -cw 1 (350/2) -cw 2 (350/2);
			button -label "Selected Joint(s)" -command "AEnxRagdollLocator_RegenerateRagdollOld(0)";       		    
			button -label "Entire Skeleton" -command "AEnxRagdollLocator_RegenerateRagdollOld(1)";
		setParent ..;
		
		rowColumnLayout -numberOfColumns 1 -cw 1 350;
			button -label "Mirror Rigid Bodies" -command "mirrorRigidBodyGUI";
			button -label "Delete Ragdoll" -command "AEnxRagdollLocator_DeleteRagdoll( off )";
			//button -label "Delete Ragdoll" -command "AEnxRagdollLocator_PromptDeleteRagdoll()";
		setParent ..;
	setUITemplate -ppt;

	AEnxRagdollLocatorRegenerateReplace( $plug );
}

global proc AEnxRagdollLocatorRegenerateReplace(string $plug)
{
	global string $gRagdollShapeType, $gRagdollSimulationType, $gRagdollInflate, $gRagdollWeight, $gRagdollUseBonePointsChkBox;
	// Ragdoll defaults
	global float $gRagdollInflateValue, $gRagdollWeightValue;
	global int $gRagdollShapeTypeValue, $gRagdollSimulationTypeValue, $gRagdollUseBonePoints;

	if( `NvSolverGetPhysXVersion` < 300 ) 
	{
		radioButtonGrp -e -enable3 false $gRagdollShapeType;
		if($gRagdollShapeTypeValue == 3) $gRagdollShapeTypeValue = 1;
	}
	else
	{
		radioButtonGrp -e -enable3 true $gRagdollShapeType;
	}
	radioButtonGrp -e -select $gRagdollShapeTypeValue $gRagdollShapeType;
	radioButtonGrp -e -select $gRagdollSimulationTypeValue $gRagdollSimulationType;
	floatSliderGrp -e -value $gRagdollInflateValue $gRagdollInflate;
	floatSliderGrp -e -value $gRagdollWeightValue $gRagdollWeight;
	checkBox -e -value $gRagdollUseBonePoints $gRagdollUseBonePointsChkBox;

    storeRagdollLocator($plug);
}

global proc AEnxRagdollLocator_RegenerateRagdollOld( int $fromSkeleton )
{
	global string $gRagdollShapeType, $gRagdollSimulationType, $gRagdollInflate, $gRagdollWeight, $gRagdollUseBonePointsChkBox;
	global string $gnxRagdollLocatorJointList, $gSourceShapeMeshList, $gRBIndicatorLabel;
	// Ragdoll defaults
	global float $gRagdollInflateValue, $gRagdollWeightValue;
	global int $gRagdollShapeTypeValue, $gRagdollSimulationTypeValue, $gRagdollUseBonePoints;
	//int $shapeTypeChoice; 
	//int $simulateTypeChoice; //1: Dynamic, 2: Kinematic
	//float $inflate, $weight;
	// 1. Get regenerate options from UI
	$gRagdollShapeTypeValue = `radioButtonGrp -q -select $gRagdollShapeType`;
	$shapeType="ConvexHull";
	if($gRagdollShapeTypeValue == 2) //1: Convex Hull, 2: Capsule 3: ClothSpheres
		$shapeType = "Capsule";
	else if($gRagdollShapeTypeValue == 3)
		$shapeType = "ClothSpheres";
	$gRagdollSimulationTypeValue = `radioButtonGrp -q -select $gRagdollSimulationType`;
	$simulateType=0;
	if($gRagdollSimulationTypeValue == 2) //1: Dynamic, 2: Kinematic
		$simulateType = 1;
	
	//print ("simtype: " + $simulateType );
	
	$gRagdollInflateValue = `floatSliderGrp -q -value $gRagdollInflate`;
	$gRagdollWeightValue = `floatSliderGrp -q -value $gRagdollWeight`;
	$gRagdollUseBonePoints = `checkBox -q -value $gRagdollUseBonePointsChkBox`;
	
	// 2. Get the selected / entire list of joints
	if( $fromSkeleton )
		$selectedJoints = `textScrollList -q -ai $gnxRagdollLocatorJointList`;
	else
		$selectedJoints = `textScrollList -q -si $gnxRagdollLocatorJointList`;
		
	// 3. Get selected Mesh
	$selectedMeshes = `textScrollList -q -si $gSourceShapeMeshList`;

	// if no mesh is selected, select all meshes in the list
	if( size( $selectedMeshes ) == 0 )
	{
		$selectedMeshes = `textScrollList -q -ai $gSourceShapeMeshList`;
		print "Selecting all meshes in the list, since no mesh had been specified. \n";
	}

	
	//if( size( $selectedJoints ) == 0 || size( $selectedMeshes ) == 0)
	if( size( $selectedJoints ) == 0 )
		error "There's no joint(s) in the list or no joint(s) are selected. Regenerate will not continue.\n";
	else
	{
		print "Regenerating Ragdoll..\n";
		select -clear;
		select -add $selectedMeshes;
		//remove rbIndicator from the label
		print "joints selected for ragdoll regeneration: ";
		for( $select in $selectedJoints )
		{
			string $selectedJoint = $select;
			if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
			{
				$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			}
			
			print ($selectedJoint+" ");
			select -add $selectedJoint;
		}
		print "\n";
		
		string $cmd = "GenerateRagdollCmd -w " + $gRagdollWeightValue + "  -i " + $gRagdollInflateValue + " -st \""+ $shapeType + "\" -mk " + $simulateType + " -bp " + $gRagdollUseBonePoints;
		evalEcho $cmd;
		

		// Reorder the rigidbodies & nxragdoll locator
		for( $select in $selectedJoints )
		{
			string $selectedJoint = $select;
			if( `gmatch $selectedJoint ("*"+$gRBIndicatorLabel)` == 1 )
			{
				$selectedJoint = AEnxRagdollLocator_getFullPathNameFromLabel($selectedJoint, $gRBIndicatorLabel);
			}
			
			$rb = `listRelatives -fullPath -children -type "nxRigidBody" $selectedJoint`;
			if( size($rb) > 0 )
				reorder -front $rb[0];
		}

		$rdLocator = getRagdollLocatorName();
		$rdLocatorTransform = `listRelatives -fullPath -parent -type "transform" $rdLocator`;
		reorder -front $rdLocatorTransform[0];
	}
}

global proc string AEnxRagdollLocator_GenerateRagdollFirstTime( int $makeKinematic, string $shapeType )
{
	// Ragdoll defaults
	global float $gRagdollInflateValue, $gRagdollWeightValue;
	global int $gRagdollShapeTypeValue, $gRagdollSimulationTypeValue, $gRagdollUseBonePoints;

	$selectedMeshes = `ls -sl -noIntermediate`;
	select -clear;
	for( $mesh in $selectedMeshes )
	{
		if(`nodeType $mesh` == "transform" )
		{
			string $shapes[] = `listRelatives -fullPath -noIntermediate -s $mesh`;
			for( $shape in $shapes)
			{
				select -add ($shape);
			}
		}
		else
			select -add $mesh;
	}
	
	// Default values for ragdoll creation 
	// shapeType: convexhull, inflate: 0, weight: 0.2
	// Update the default values on the helper to settings in last use. 
	$gRagdollShapeTypeValue = 1;
	$gRagdollSimulationTypeValue = $makeKinematic + 1; //+1 due to the 1-based integer value used in radiogrp
	$gRagdollInflateValue = 0;
	$gRagdollWeightValue = 0.2;
	$gRagdollUseBonePoints = 1;

	global int $gRagdollLocator_General_Rig_Type;
	$gRagdollLocator_General_Rig_Type = $makeKinematic;

	string $result;
	string $cmd = "GenerateRagdollCmd -w " + $gRagdollWeightValue + "  -i " + $gRagdollInflateValue + " -st \""+ $shapeType + "\" -mk " + $makeKinematic + " -bp " + $gRagdollUseBonePoints + " -fc";
	$result = `evalEcho $cmd`;
	select $result;

	refreshEditorTemplates;

	return $result;
}

global proc AEnxRagdollLocator_DeleteAllRB(string $ragdollLocator)
{
	$joints = `listConnections -t "joint" ($ragdollLocator + ".joints")`;
	for ($item in $joints)
	{
		$rigidBodies = `listRelatives -fullPath -children -type "nxRigidBody" $item`;
		if( size( $rigidBodies ) > 0 )
			delete $rigidBodies;
	}
}

global proc AEnxRagdollLocator_DeleteRagdoll( int $fromSelection )
{
	global string $gRagdollLocator_CurRigidBody;
	$gRagdollLocator_CurRigidBody = "";
	global string $gRagdollLocator_CurShape;
	$gRagdollLocator_CurShape = "";
	global string $gRagdollLocator_SelectedRigidBodies[];
	clear $gRagdollLocator_SelectedRigidBodies;
	global string $gRagdollLocator_AllRigidBodies[];
	clear $gRagdollLocator_AllRigidBodies;

	string $ragdollLocators[];
	if( $fromSelection )
	{
		//Try finding it from the selection
		string $selected[] = `ls -selection -type "nxRagdollLocator" -type "transform"`;
		if(size($selected) == 0)
		{
			error "Please select a nxRagdoll locator for deletion.\n";
			return;
		}
		
		//verify that selections are ragdoll locator
		for($i=0; $i<size($selected); $i++)
		{
			if( `nodeType $selected[$i]` == "nxRagdollLocator" )
				$ragdollLocators[size($ragdollLocators)] = $selected[$i];
			else
			{
				string $selectedChild[] = `listRelatives -fullPath -type "nxRagdollLocator" $selected[$i]`;
				if(size($selectedChild) == 1)
					$ragdollLocators[size($ragdollLocators)] = $selectedChild[0];
			}
		}

		if(size($ragdollLocators) == 0)
		{
			error "Please select a nxRagdoll locator for deletion.\n";
			return;
		}
	}
	else
		$ragdollLocators[0] = getRagdollLocatorName();

	for( $ragdollLocator in $ragdollLocators )
	{
		//AEnxRagdollLocator_DeleteAllRB($ragdollLocator);
		$ragdoll = `listRelatives -fullPath -parent $ragdollLocator`; 
		delete $ragdoll;
	}
}

global proc AEnxRagdollLocator_SaveRagdoll( string $ragdollLocator )
{
	undoInfo -stateWithoutFlush off;
	select -replace $ragdollLocator;
	string $file = `fileDialog -dm "*.rag" -mode 1 -title "Save Ragdoll As..."`;
	string $cmd = "NxRagdollSaveLoadCmd 1 \"" + $file + "\"";
	evalEcho $cmd;
	undoInfo -stateWithoutFlush on;
}

global proc AEnxRagdollLocator_LoadRagdoll( string $ragdollLocator )
{
	if(NvSolverGetMode() != "EDIT")
		AEnxRagdollLocator_LoadRagdollDuringSimulatePrompt $ragdollLocator;
	else
		AEnxRagdollLocator_OpenFileForLoad $ragdollLocator;
}

global proc AEnxRagdollLocator_OpenFileForLoad( string $ragdollLocator )
{
	select -replace $ragdollLocator;
	string $file = `fileDialog -dm "*.rag" -mode 0 -title "Load Ragdoll..."`;
	if ( $file == "" )
	{
		print( "No file selected!" );
		return;
	}
	string $cmd = "NxRagdollSaveLoadCmd 0 \"" + $file + "\"";
	evalEcho $cmd;	
}

global proc AEnxRagdollLocator_LoadRagdollDuringSimulatePrompt( string $ragdollLocator )
{
	string $window = `window 
		-title "Unable to load ragdoll without rewinding."
		-widthHeight 350 55
		-sizeable false`;

	rowColumnLayout -numberOfColumns 1 -cw 1 350 -columnOffset 1 "left" 50 -rowOffset 1 "both" 5;    
		radioButtonGrp -numberOfRadioButtons 2
			-vertical
			-select 1
			-label1 "Rewind and load ragdoll." 
			-label2 "Load ragdoll now and capture as initial pose."
			"LoadRagdollDuringSimulatePromptRadioGrp";
	setParent ..;        

	rowColumnLayout 
		-numberOfRows 1
		-columnOffset 1 "left" 75;
		button -label "Ok" -width 50 -command ("AEnxRagdollLocator_LoadRagdollDuringSimulate "+$ragdollLocator + " " + $window);
		//button -label "Ok" -width 50 -command ("AEnxRagdollLocator_LoadRagdollDuringSimulate " + $window);
		button -label "Cancel" -width 50 -command ("deleteUI -window " + $window);
	setParent ..;

	showWindow $window;
}

global proc AEnxRagdollLocator_LoadRagdollDuringSimulate( string $ragdollLocator, string $window )
{
	if(`radioButtonGrp -exists "LoadRagdollDuringSimulatePromptRadioGrp"`)
	{
		$toLoad = `radioButtonGrp -q -select "LoadRagdollDuringSimulatePromptRadioGrp"`;
		deleteUI -window $window;

		if( $toLoad == 1 ) // Rewind & Load
			physxShelf_ResetSimulationCommand;

		if( $toLoad == 2) // Load With Current Pose
			physxShelf_CaptureInitialTransformCommand;

		AEnxRagdollLocator_OpenFileForLoad $ragdollLocator;
	}
}

