// Copyright (c) 2005 - 2011 NVIDIA Corporation. All rights reserved.
// NVIDIA Corporation and its licensors retain all intellectual property and proprietary 
// rights in and to this software and related documentation and any modifictions thereto.
// Any use, reproduction, disclosure or distribution of this software and related 
// documentation without an express license agreement from NVIDIA Corporation 
// is strictly prohibited.

//global proc physxCreateRagDollOptions()
//{
//	pml_skinVolume_options(0);
//}
//
//global proc physxCreateRagDollDynamic()
//{
//	pml_skinVolume(0);
//}
//
//global proc physxCreateRagDollKinematic()
//{
//	pml_skinVolume(1);
//}
//	
//global proc physxCreateRagDollKinematicOptions()
//{
//	pml_skinVolume_options(1);
//}
	
global proc physxRagDollStartup_LoadSources()
{
	source "physxSkeletonToRigidBody.mel";
	source "nxMirrorRigidBody.mel";
}

global proc conversionBetweenCapsulesAndConvexHulls( int $mode )
{
	if ( 0 == $mode )
	{
		//print("Convert All Convex Hull To Capsule\n");
		evalEcho("convertBtwConvexHullAndCapsuleCmd -opt 0");
	}
	else if ( 1 == $mode )
	{
		//print("Convert All Capsule To Convex Hull\n");
		evalEcho("convertBtwConvexHullAndCapsuleCmd -opt 1");
	}
	else if ( 2 == $mode )
	{
		//print("Convert Selected Joints To Use Capsule\n");
		evalEcho("convertBtwConvexHullAndCapsuleCmd -opt 2");
	}
	else if ( 3 == $mode )
	{
		//print("Convert Selected Joints To Use Convex Hull\n");
		evalEcho("convertBtwConvexHullAndCapsuleCmd -opt 3");
	}
}

global proc saveRagdollFromMenu()
{
	string $selected[] = `ls -selection -type "nxRagdollLocator" -type "transform"`;
	string $ragdollLocator = "";
	if( size($selected) == 0 )
	{
		error "Please select a ragdoll locator before saving a ragdoll file.\n";
		return;
	}

	if(`nodeType $selected[0]` == "nxRagdollLocator")
		$ragdollLocator = $selected[0];
	else
	{
		string $child[] = `listRelatives -fullPath -allDescendents -type "nxRagdollLocator"`;
		if( size($child) == 0 )
		{
			error "Please select a ragdoll locator before saving a ragdoll file.\n";
			return;
		}
		else
			$ragdollLocator = $child[0];
	}

	AEnxRagdollLocator_SaveRagdoll( $ragdollLocator );
}

global proc loadRagdollFromMenu()
{
	string $selected[] = `ls -selection -type "nxRagdollLocator"`;
	if( size($selected) == 0 )
	{
		//print "Please select a ragdoll locator before loading a ragdoll file.\n";
		// To del commented codes, once the design of this feature is confirmed.
		string $ragdollLocator = AEnxRagdollLocator_GenerateRagdollFirstTime( 0, "Capsule" );
		print ("Ragdoll: " + $ragdollLocator );
		// check if ragdoll is sucessfully generated by checking the selection is the ragdoll locator
		if( $ragdollLocator == "" )
		{
			print "Initial ragdoll cannot be generated, please select a skinned mesh / joint.\n";
			return;
		}
		$selected[0] = $ragdollLocator;
	}

	AEnxRagdollLocator_LoadRagdoll( $selected[0] );
}

global proc physxRagDollStartup_FillMainMenu()
{
	menuItem -subMenu true -tearOff true  -aob true -label "Ragdolls";

	//menuItem -label "Create Dynamic Ragdoll" -c "physxCreateRagDollDynamic";
	//menuItem -label "Create Kinematic Ragdoll" -c "physxCreateRagDollKinematic";
	//menuItem -optionBox true -c "physxCreateRagDollKinematicOptions";
	
	menuItem -label "Create Dynamic Ragdoll" -c "AEnxRagdollLocator_GenerateRagdollFirstTime( 0, \"Capsule\" )";
	menuItem -label "Create Kinematic Ragdoll" -c "AEnxRagdollLocator_GenerateRagdollFirstTime( 1, \"Capsule\" )";

	menuItem -label "Remove Selected Joints" -c "nxRagDollDeleteJointsFromSelection( true, false )";
	menuItem -label "Remove Unselected Joints" -c "nxRagDollDeleteJointsFromSelection( true, true )";
	
	menuItem -label "Convert All Convex Hull To Capsule" -c "evalEcho conversionBetweenCapsulesAndConvexHulls( 0 )";
	menuItem -label "Convert All Capsule To Convex Hull" -c "evalEcho conversionBetweenCapsulesAndConvexHulls( 1 )";
	menuItem -label "Convert Selected Joints To Use Capsule" -c "evalEcho conversionBetweenCapsulesAndConvexHulls( 2 )";
	menuItem -label "Convert Selected Joints To Use Convex Hull" -c "evalEcho conversionBetweenCapsulesAndConvexHulls( 3 )";

	menuItem -divider true;
	menuItem -label "Save Ragdoll to File" -c "saveRagdollFromMenu";
	menuItem -label "Load Ragdoll from File" -c "loadRagdollFromMenu";

	menuItem -divider true;
	menuItem -label "Delete Ragdoll" -c "AEnxRagdollLocator_DeleteRagdoll on";
	//menuItem -divider 1;
	
	//menuItem -optionBox true -c "physxCreateRagDollOptions";

	////menuItem -subMenu true -tearOff true -aob true -label "Advanced";
	//{
	//	menuItem -label "Create Skin Collision Volume (SCV)" -c "pml_skinVolume(3)";
	//	menuItem -optionBox true -c "pml_skinVolume_options(3)";

	//	menuItem -label "Create Ragdoll from SCV" -c "NxRagdollExtractFromSkinCollisionVolumes";
		
	//	menuItem -label "Create Ragdoll Rigid Bodies" -c "NxRagdollCreateRigidBodies";
		
	//	menuItem -label "Create Ragdoll Dynamic Constraints" -c "NxRagdollCreateRigidConstraints";
		
	//	//menuItem -label "Create Ragdoll Kinematic Constraints" -c "NxRagdollConnectAnimations";
	
	//	//setParent -menu ..;
	//}

	setParent -menu ..;

}

