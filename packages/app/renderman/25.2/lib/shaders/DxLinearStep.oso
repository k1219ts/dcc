OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -v -o /WORK_DATA/develop/dcc/packages/app/renderman/25.2/lib/shaders/DxLinearStep.oso -I/opt/pixar/RenderManProServer-25.2/include -I/WORK_DATA/develop/sources/renderman/PixarRenderMan-Examples-25.2_2282810-linuxRHEL7_gcc93icc219.x86_64/plugins/include/osl
shader FloatSmoothStep	%meta{string,help,"A Smooth step-function between two bounds"} %meta{string,label,"SmoothStep"} %meta{string,category,"Math Float"} 
param	int	computeMode	0		%meta{string,widget,"mapper"} %meta{string,options,"Linear:0|Smooth:1"} %meta{string,label,"Step Mode"} %meta{string,help,"Linear or Smooth"} %meta{int,connectable,0}  %read{0,0} %write{2147483647,-1}
param	float	Input	0.5		%meta{string,help,"The Input value"}  %read{8,30} %write{2147483647,-1}
param	float	Low	0.400000006		%meta{string,help,"The lower bound of the step function"}  %read{5,30} %write{2147483647,-1}
param	float	High	0.600000024		%meta{string,help,"The higher bound of the step function"}  %read{5,30} %write{2147483647,-1}
param	int	Invert	0		%meta{string,widget,"checkBox"} %meta{string,label,"Invert"} %meta{string,help,"Invert"}  %read{2,27} %write{2147483647,-1}
oparam	float	Out	0		%meta{string,help,"The result. Zero if below lower bound, one if above high bound, and a smooth step funciton in between."}  %read{2147483647,-1} %write{14,31}
local	float	___269_result	%read{14,25} %write{12,24}
local	float	___270_xclamped	%read{10,21} %write{9,20}
const	int	$const1	0		%read{0,27} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
temp	int	$tmp2	%read{3,3} %write{2,2}
const	string	$const2	"linearstep"		%read{4,15} %write{2147483647,-1}
temp	int	$tmp3	%read{6,6} %write{5,5}
const	string	$const3	"clamp"		%read{7,18} %write{2147483647,-1}
temp	float	$tmp4	%read{9,9} %write{8,8}
temp	float	$tmp5	%read{12,12} %write{10,10}
temp	float	$tmp6	%read{12,12} %write{11,11}
temp	float	$tmp7	%read{26,26} %write{25,25}
temp	int	$tmp8	%read{17,17} %write{16,16}
temp	float	$tmp9	%read{20,20} %write{19,19}
temp	float	$tmp10	%read{23,23} %write{21,21}
temp	float	$tmp11	%read{23,23} %write{22,22}
const	float	$const5	1		%read{26,31} %write{2147483647,-1}
temp	int	$tmp12	%read{28,28} %write{27,27}
temp	float	$tmp13	%read{31,31} %write{30,30}
code ___main___
# DxLinearStep.osl:39
#         if (Invert == 0)
	eq		$tmp1 computeMode $const1 	%filename{"DxLinearStep.osl"} %line{39} %argrw{"wrr"}
	if		$tmp1 27 32 	%argrw{"r"}
# DxLinearStep.osl:40
#             Out = linearstep(Low, High, Input);
	eq		$tmp2 Invert $const1 	%line{40} %argrw{"wrr"}
	if		$tmp2 15 27 	%argrw{"r"}
# DxLinearStep.osl:41
#         else
	functioncall	$const2 15 	%line{41} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:361
#     if (edge0 != edge1) {
	neq		$tmp3 Low High 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{361} %argrw{"wrr"}
	if		$tmp3 13 14 	%argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:362
#         float xclamped = clamp (x, edge0, edge1);
	functioncall	$const3 10 	%line{362} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp4 Input High 	%line{163} %argrw{"wrr"}
	max		___270_xclamped $tmp4 Low 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:363
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp5 ___270_xclamped Low 	%line{363} %argrw{"wrr"}
	sub		$tmp6 High Low 	%argrw{"wrr"}
	div		___269_result $tmp5 $tmp6 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:365
#         result = step (edge0, x);
	step		___269_result Low Input 	%line{365} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:367
#     return result;
	assign		Out ___269_result 	%line{367} %argrw{"wr"}
# DxLinearStep.osl:43
#     else
	functioncall	$const2 26 	%filename{"DxLinearStep.osl"} %line{43} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:361
#     if (edge0 != edge1) {
	neq		$tmp8 Low High 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{361} %argrw{"wrr"}
	if		$tmp8 24 25 	%argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:362
#         float xclamped = clamp (x, edge0, edge1);
	functioncall	$const3 21 	%line{362} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp9 Input High 	%line{163} %argrw{"wrr"}
	max		___270_xclamped $tmp9 Low 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:363
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp10 ___270_xclamped Low 	%line{363} %argrw{"wrr"}
	sub		$tmp11 High Low 	%argrw{"wrr"}
	div		___269_result $tmp10 $tmp11 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:365
#         result = step (edge0, x);
	step		___269_result Low Input 	%line{365} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:367
#     return result;
	assign		$tmp7 ___269_result 	%line{367} %argrw{"wr"}
# DxLinearStep.osl:43
#     else
	sub		Out $const5 $tmp7 	%filename{"DxLinearStep.osl"} %line{43} %argrw{"wrr"}
# DxLinearStep.osl:45
#             Out = smoothstep(Low, High, Input);
	eq		$tmp12 Invert $const1 	%line{45} %argrw{"wrr"}
	if		$tmp12 30 32 	%argrw{"r"}
# DxLinearStep.osl:46
#         else
	smoothstep	Out Low High Input 	%line{46} %argrw{"wrrr"}
# DxLinearStep.osl:48
# }
	smoothstep	$tmp13 Low High Input 	%line{48} %argrw{"wrrr"}
	sub		Out $const5 $tmp13 	%argrw{"wrr"}
	end
